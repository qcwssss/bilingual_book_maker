{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bilingual book maker","text":"<p>The <code>bilingual_book_maker</code> is an AI translation tool that uses ChatGPT to assist users in creating multi-language versions of epub/txt files and books.</p> <p>This tool is exclusively designed for translating epub books that have entered the public domain and is not intended for copyrighted works. Before using this tool, please review the project's disclaimer.</p>"},{"location":"book_source/","title":"Translate from Different Sources","text":""},{"location":"book_source/#txtsrt","title":"txt/srt","text":"<p>Txt files and srt files are plain text files. This program can translate plain text.</p> <pre><code>python3 make_book.py --book_name test_books/the_little_prince.txt --test --language zh-hans\n</code></pre>"},{"location":"book_source/#epub","title":"epub","text":"<p>epub is made of html files. By default, we only translate contents in <code>&lt;p&gt;</code>. Use <code>--translate-tags</code> to specify tags need for translation. Use comma to separate multiple tags. For example: <code>--translate-tags h1,h2,h3,p,div</code></p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --openai_key ${openai_key} --translate-tags div,p\n</code></pre> <p>If you want to translate strings in an e-book that aren't labeled with any tags, you can use the <code>--allow_navigable_strings</code> parameter. This will add the strings to the translation queue.  Note that it's best to look for e-books that are more standardized if possible.</p>"},{"location":"book_source/#e-reader","title":"e-reader","text":"<p>Use <code>--book_from</code> option to specify e-reader type (Now only <code>kobo</code> is available), and use <code>--device_path</code> to specify the mounting point.</p> <pre><code># Translate books download from Rakuten Kobo on kobo e-reader\nbbook_maker --book_from kobo --device_path /tmp/kobo\n</code></pre>"},{"location":"cmd/","title":"Command Line Options","text":""},{"location":"cmd/#test-translate","title":"Test translate","text":"<p><code>--test</code> </p> <p>Use this option to preview the result if you haven't paid for the service or just want to test. Note that there is a limit and it may take some time.</p> <pre><code>bbook_maker --book_name test_books/Lex_Fridman_episode_322.srt --openai_key ${openai_key}  --test\n</code></pre> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --openai_key ${openai_key}  --test --language zh-hans\n</code></pre> <p><code>--test_num &lt;TEST_NUM&gt;</code></p> <p>Use this option to set how many paragraph you want to translate for testing. Default is 10.</p>"},{"location":"cmd/#resume","title":"Resume","text":"<p><code>--resume</code> </p> <p>Use this option to manually resume the process after an interruption.</p>"},{"location":"cmd/#retranslate-epub-only","title":"Retranslate (epub only)","text":"<p><code>--retranslate &lt;translated_filepath, file_name_in_epub, start_str [, end_str]&gt;</code></p> <p>If a file in epub is not translated well, it supports to re-translate part of epub separately.</p> <p>This option take 4 arguments: <code>translated_filepath</code>, <code>file_name_in_epub</code>, <code>start_str</code>, <code>end_str</code>. <code>end_str</code> is optional.</p> <ul> <li> <p>Retranslate from start_str to end_str's tag:</p> <pre><code>bbook_maker --book_name \"test_books/animal_farm.epub\" --retranslate 'test_books/animal_farm_bilingual.epub' 'index_split_002.html' 'in spite of the present book shortage which' 'This kind of thing is not a good symptom. Obviously'\n</code></pre> </li> <li> <p>Retranslate start_str's tag:</p> <pre><code>bbook_maker --book_name \"test_books/animal_farm.epub\" --retranslate 'test_books/animal_farm_bilingual.epub' 'index_split_002.html' 'in spite of the present book shortage which'\n</code></pre> </li> <li> <p>Retranslate start_str's tag, auto find filename:</p> <pre><code>bbook_maker --book_name \"test_books/animal_farm.epub\" --retranslate 'test_books/animal_farm_bilingual.epub' '' 'in spite of the present book shortage which'\n</code></pre> </li> </ul> <p>Warning:</p> <p>It deletes from the tag at start_str of the finished book to the next tag at end_str, and then re-translates.</p> <p>Therefore, please make sure that the next tag of end_str is the translated content. (If end_str is not provided, the next label of start_str is guaranteed to be the translated content.) There can be missing translations between the two strings, but if end_str is not translated, there will be problems.</p>"},{"location":"cmd/#customize-output-style-epub-only","title":"Customize output style (epub only)","text":"<p><code>--translation_style &lt;TRANSLATION_STYLE&gt;</code></p> <p>Support changing the output style of epub files.</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --translation_style \"color: #4a4a4a; font-style: normal; background-color: #f7f7f7; padding: 5px; margin: 10px 0; border-radius: 5px;\"\n</code></pre> <p></p>"},{"location":"cmd/#proxy","title":"Proxy","text":"<p><code>--proxy &lt;PROXY&gt;</code> </p> <p>Use this option to specify proxy server for internet access. Enter a string such as <code>http://127.0.0.1:7890</code> .</p>"},{"location":"cmd/#api-base","title":"API base","text":"<p><code>--api_base &lt;API_BASE_URL&gt;</code></p> <p>If you want to change api_base like using Cloudflare Workers, use this option to support it.</p> <pre><code>bbook_maker --book_name 'animal_farm.epub' --openai_key sk-XXXXX --api_base 'https://xxxxx/v1'\n</code></pre> <p>Note: the api url should be '<code>https://xxxx/v1</code>'. Quotation marks are required.</p>"},{"location":"cmd/#microsoft-azure-endpoints","title":"Microsoft Azure Endpoints","text":"<p><code>--api_base &lt;API_BASE_URL&gt;</code> <code>--deployment_id &lt;DEPLOYMENT_ID&gt;</code></p> <p>You can use the api endpoint provided from Microsoft.</p> <pre><code>bbook_maker --book_name 'animal_farm.epub' --openai_key XXXXX --api_base 'https://example-endpoint.openai.azure.com' --deployment_id 'deployment-name'\n</code></pre> <p>Note : Current only support chatgptapi model for deployment_id. And <code>api_base</code> must be provided when using <code>deployment_id</code>. You can check here for more information about <code>deployment_id</code>.</p>"},{"location":"cmd/#batch-size-txt-only","title":"Batch size (txt only)","text":"<p><code>--batch_size</code></p> <p>Use this parameter to specify the number of lines for batch translation. Default is 10. (Currently only effective for txt files).</p> <pre><code>python3 make_book.py --book_name test_books/the_little_prince.txt --test --batch_size 20\n</code></pre>"},{"location":"cmd/#accumulated-num","title":"Accumulated Num","text":"<p><code>--accumulated_num &lt;ACCUMULATED_NUM&gt;</code></p> <p>Wait for how many tokens have been accumulated before starting the translation. gpt3.5 limits the total_token to 4090. </p> <p>For example, if you use --accumulated_num 1600, maybe openai will output 2200 tokens and maybe 200 tokens for other messages in the system messages user messages. 1600+2200+200=4000, so you are close to the limit. </p> <p>You have to choose your own value, there is no way to tell if the limit is reached before sending request.</p>"},{"location":"disclaimer/","title":"Disclaimer","text":"<ol> <li>The purpose of this project, bilingual_book_maker, is to assist users in creating multilingual versions of epub files and books. It is only applicable to books that have entered the public domain and is not intended for use with copyrighted material. We strongly advise users to read the copyright information carefully before using this project and to comply with relevant laws and regulations in order to protect their own and others' rights.</li> <li>In no event shall the authors or developers be liable for any loss or damage caused by the use of this project. Users assume all risks associated with the use of this project. Users must confirm that they have obtained permission from the original copyright holder or used open source EPUB files before using this project to avoid potential copyright risks.</li> </ol> <p>If you have any concerns or suggestions about the use of this project, please contact us through the issues section.</p> <p>\u514d\u8d23\u58f0\u660e\uff1a</p> <ol> <li>\u8be5\u9879\u76ee\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u5e2e\u52a9\u7528\u6237\u5236\u4f5c\u591a\u8bed\u8a00\u7248\u672c\u7684epub\u6587\u4ef6\u548c\u56fe\u4e66\uff0c\u4ec5\u9002\u7528\u4e8e\u8fdb\u5165\u516c\u5171\u7248\u6743\u9886\u57df\u4e66\u7c4d\uff0c\u4e0d\u9002\u7528\u4e8e\u6709\u7248\u6743\u7684\u4e66\u7c4d\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u7528\u6237\u5728\u4f7f\u7528\u8be5\u9879\u76ee\u65f6\u4ed4\u7ec6\u9605\u8bfb\u5176\u7248\u6743\u4fe1\u606f\u5e76\u9075\u5b88\u76f8\u5173\u6cd5\u5f8b\u548c\u89c4\u5b9a\uff0c\u4ee5\u4fdd\u62a4\u81ea\u5df1\u548c\u4ed6\u4eba\u7684\u6743\u76ca\u3002</li> <li>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f5c\u8005\u548c\u5f00\u53d1\u8005\u4e0d\u5bf9\u56e0\u4f7f\u7528\u8be5\u9879\u76ee\u800c\u5bfc\u81f4\u7684\u4efb\u4f55\u635f\u5931\u6216\u635f\u5bb3\u627f\u62c5\u4efb\u4f55\u8d23\u4efb\u3002\u4f7f\u7528\u8be5\u9879\u76ee\u7684\u98ce\u9669\u7531\u7528\u6237\u81ea\u884c\u627f\u62c5\u3002\u7528\u6237\u5fc5\u987b\u5728\u4f7f\u7528\u8be5\u9879\u76ee\u4e4b\u524d\uff0c\u786e\u8ba4\u5176\u5df2\u83b7\u5f97\u4e86\u539f\u8457\u4f5c\u6743\u4eba\u7684\u8bb8\u53ef\u6216\u4f7f\u7528\u4e86\u516c\u5f00\u53ef\u7528\u7684\u5f00\u6e90EPUB\u6587\u4ef6\uff0c\u4ee5\u907f\u514d\u53ef\u80fd\u5b58\u5728\u7684\u7248\u6743\u98ce\u9669\u3002</li> </ol> <p>\u5982\u679c\u60a8\u5bf9\u8be5\u9879\u76ee\u7684\u4f7f\u7528\u6709\u4efb\u4f55\u7591\u8651\u6216\u5efa\u8bae\uff0c\u8bf7\u901a\u8fc7 issues \u4e0e\u6211\u4eec\u8054\u7cfb\u3002</p>"},{"location":"env_settings/","title":"Environment Settings","text":"<p>You can also write information into env to skip some options.</p>"},{"location":"env_settings/#model-keys","title":"Model keys","text":"<pre><code># Set env BBM_OPENAI_API_KEY to ignore option --openai_key\nexport BBM_OPENAI_API_KEY=${your_api_key}\n\n# Set env BBM_CAIYUN_API_KEY to ignore option --caiyun_key\nexport BBM_CAIYUN_API_KEY=${your_api_key}\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pip","title":"pip","text":"<p>bilingual_book_maker has been published as a Python package and can be install by <code>pip</code>. (Recommend in a virtual environment.)</p> <pre><code>pip install -U bbook_maker\n</code></pre>"},{"location":"installation/#git","title":"git","text":"<p>You can also install from github if you want to use the latest version.</p> <pre><code>git clone git@github.com:yihong0618/bilingual_book_maker.git\npip install .\n</code></pre>"},{"location":"model_lang/","title":"Model and Languages","text":""},{"location":"model_lang/#models","title":"Models","text":"<p><code>-m, --model &lt;Model&gt;</code> </p> <p>Currently <code>bbook_maker</code> supports these models: <code>chatgptapi</code> , <code>gpt3</code> , <code>google</code> , <code>caiyun</code> , <code>deepl</code> , <code>deeplfree</code> , <code>gpt4</code> , <code>gpt4omini</code> , <code>o1-preview</code> , <code>o1</code> , <code>o1-mini</code> , <code>o3-mini</code> , <code>claude</code> , <code>customapi</code>. Default model is <code>chatgptapi</code> . </p>"},{"location":"model_lang/#openai-models","title":"OPENAI models","text":"<p>There are three models you can choose from.</p> <ul> <li> <p>gpt3</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model gpt3 --openai_key ${openai_key}\n</code></pre> </li> <li> <p>chatgpiapi</p> <p><code>chatgptapi</code> is GPT-3.5-turbo, which is used by ChatGPT currently.</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model chatgptapi --openai_key ${openai_key}\n</code></pre> </li> <li> <p>gpt4</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model gpt4 --openai_key ${openai_key}\n</code></pre> <p>If using <code>gpt4</code> , you can add <code>--use_context</code> to add a context paragraph to each passage sent to the model for translation.</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model gpt4 --openai_key ${openai_key} --use_context\n</code></pre> <p>The option <code>--use_context</code> prompts the GPT4 model to create a one-paragraph summary. </p> <p>If it is the beginning of the translation, it will summarize the entire passage sent (the size depending on <code>--accumulated_num</code> ).</p> <p>If it has any proceeding passage, it will amend the summary to include details from the most recent passage, creating a running one-paragraph context payload of the important details of the entire translated work, which improves consistency of flow and tone of each translation.</p> </li> </ul> <p>Note 1: Use <code>--openai_key</code> option to specify OpenAI API key. If you have multiple keys, separate them by commas (xxx, xxx, xxx) to reduce errors caused by API call limits.</p> <p>Note 2: You can just set the environment variable <code>BBM_OPENAI_API_KEY</code> instead the openai_key. See Environment setting.</p>"},{"location":"model_lang/#caiyun","title":"CAIYUN","text":"<p>Using Caiyun model to translate. The api currently only support: </p> <ol> <li>Simplified Chinese &lt;-&gt; English</li> <li>Simplified Chinese &lt;-&gt; Japanese</li> </ol> <p>The official Caiyun has provided a test token (3975l6lr5pcbvidl6jl2). You can apply your own token by following this [tutorial].(https://bobtranslate.com/service/translate/caiyun.html)</p> <pre><code>bbook_maker --model caiyun --caiyun_key 3975l6lr5pcbvidl6jl2 --book_name test_books/animal_farm.epub\n</code></pre>"},{"location":"model_lang/#deepl","title":"DEEPL","text":"<p>There are two models you can choose from.</p> <ul> <li> <p>deepl: DeepL Translator. </p> <p>Need to pay to get the token. Use <code>--model deepl --deepl_key ${deepl_key}</code></p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model deepl --deepl_key ${deepl_key}\n</code></pre> </li> <li> <p>deeplfree: DeepL free model</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model deeplfree\n</code></pre> </li> </ul>"},{"location":"model_lang/#claude","title":"Claude","text":"<p>Support Claude model. Use <code>--model claude --claude_key ${claude_key}</code> .</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model claude --claude_key ${claude_key}\n</code></pre>"},{"location":"model_lang/#custom-api","title":"Custom API","text":"<p>Support CustomAPI model. Use <code>--model customapi --custom_api ${custom_api}</code> .</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model customapi --custom_api ${custom_api}\n</code></pre>"},{"location":"model_lang/#google","title":"Google","text":"<p>Support google model. Use <code>--model google</code></p>"},{"location":"model_lang/#languages","title":"Languages","text":"<p><code>--language &lt;LANGUAGE&gt;</code> </p> <p>Set target languages. All models except for <code>caiyun</code> supports lots of languages. You can use <code>bbook_maker --help</code> to check available languages. Default target language is <code>\"Simplified Chinese\"</code> .</p> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model chatgptapi --openai_key ${openai_key} --language ja\n</code></pre> <pre><code>bbook_maker --book_name test_books/animal_farm.epub --model chatgptapi --openai_key ${openai_key} --language \"Simplified Chinese\"\n</code></pre>"},{"location":"prompt/","title":"Tweak the prompt","text":"<p>To tweak the prompt, use the <code>--prompt</code> parameter. Valid placeholders for the <code>user</code> role template include <code>{text}</code> and <code>{language}</code>. It supports a few ways to configure the prompt:</p> <ul> <li> <p>If you don't need to set the <code>system</code> role content, you can simply set it up like this: <code>--prompt \"Translate {text} to {language}.\"</code> or <code>--prompt prompt_template_sample.txt</code></p> <pre><code># prompt_template_sample.txt\nTranslate the given text to {language}. Be faithful or accurate in translation. Make the translation readable or intelligible. Be elegant or natural in translation. If the text cannot be translated, return the original text as is. Do not translate person's name. Do not add any additional text in the translation. The text to be translated is: \n{text}\n</code></pre> </li> <li> <p>If you need to set the <code>system</code> role content, you can use the following format: <code>--prompt '{\"user\":\"Translate {text} to {language}\", \"system\": \"You are a professional translator.\"}'</code> or <code>--prompt prompt_template_sample.json</code></p> <pre><code># prompt_template_sample.json\n{\n    \"system\": \"You are a professional translator.\", \n    \"user\": \"Translate the given text to {language}. Be faithful or accurate in translation. Make the translation readable or intelligible. Be elegant or natural in translation. If the text cannot be translated, return the original text as is. Do not translate person's name. Do not add any additional text in the translation. The text to be translated is:\\n{text}\"\n}\n</code></pre> </li> </ul> <p>You can also set the <code>user</code> and <code>system</code> role prompt by setting environment variables: <code>BBM_CHATGPTAPI_USER_MSG_TEMPLATE</code> and <code>BBM_CHATGPTAPI_SYS_MSG</code>.</p> <ul> <li>You can now use PromptDown format (<code>.md</code> files) for more structured prompts: <code>--prompt prompt_md.prompt.md</code><pre><code># Translation Prompt\n\n## System Message\nYou are a professional translator who specializes in accurate translations.\n\n## Conversation\n\n| Role  | Content                                  |\n|-------|------------------------------------------|\n| User  | Please translate the following text into {language}:\\n\\n{text} |\n\n# OR using Developer Message (for newer AI models)\n\n# Translation Prompt\n\n## Developer Message\nYou are a professional translator who specializes in accurate translations.\n\n## Conversation\n\n| Role  | Content                                  |\n|-------|------------------------------------------|\n| User  | Please translate the following text into {language}:\\n\\n{text} |\n</code></pre> </li> </ul>"},{"location":"prompt/#examples","title":"Examples","text":"<pre><code>python3 make_book.py --book_name test_books/animal_farm.epub --prompt prompt_template_sample.txt\n# or\npython3 make_book.py --book_name test_books/animal_farm.epub --prompt prompt_template_sample.json\n# or\npython3 make_book.py --book_name test_books/animal_farm.epub --prompt \"Please translate \\`{text}\\` to {language}\"\n</code></pre>"},{"location":"quickstart/","title":"QuickStart","text":"<p>After successfully install the package, you can see <code>bbook-maker</code> is in the output of <code>pip list</code>.</p>"},{"location":"quickstart/#preparation","title":"Preparation","text":"<ol> <li>ChatGPT or OpenAI token</li> <li>epub/txt books</li> <li>Environment with internet access or proxy</li> <li>Python 3.8+</li> </ol>"},{"location":"quickstart/#use","title":"Use","text":"<p>You can use by command <code>bbook_maker</code>. A sample book, <code>test_books/animal_farm.epub</code>, is provided for testing purposes.</p> <pre><code>bbook_maker --book_name ${path of a book} --openai_key ${openai_key}\n\n# Example\nbbook_maker --book_name test_books/animal_farm.epub --openai_key ${openai_key}\n</code></pre> <p>Or, you can use the script provided by repository.</p> <pre><code>python3 make_book.py --book_name ${path of a book} --openai_key ${openai_key}\n\n# Example\npython3 make_book.py --book_name test_books/animal_farm.epub --openai_key ${openai_key}\n</code></pre> <p>Once the translation is complete, a bilingual book named <code>${book_name}_bilingual.epub</code> would be generated.</p> <p>Note: If there are any errors or you wish to interrupt the translation by pressing <code>CTRL+C</code>. A book named <code>${book_name}_bilingual_temp.epub</code> would be generated. You can simply rename it to any desired name.</p>"},{"location":"api_docs/API_DOCUMENTATION/","title":"Bilingual Book Maker API Layer - Comprehensive Documentation","text":""},{"location":"api_docs/API_DOCUMENTATION/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Architecture Overview</li> <li>Core Components Deep Dive</li> <li>Progress Tracking System</li> <li>Translation Flow Step-by-Step</li> <li>Key Patterns and Design Decisions</li> <li>Common Issues and Debugging</li> <li>Code Examples</li> </ol>"},{"location":"api_docs/API_DOCUMENTATION/#1-system-architecture-overview","title":"1. System Architecture Overview","text":""},{"location":"api_docs/API_DOCUMENTATION/#high-level-component-architecture","title":"High-Level Component Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        FastAPI Application                       \u2502\n\u2502                           (main.py)                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Endpoints  \u2502\u2500\u2500\u2500\u25b6\u2502 AsyncTranslator \u2502\u2500\u2500\u2500\u25b6\u2502  JobManager   \u2502  \u2502\n\u2502  \u2502  /translate  \u2502    \u2502                 \u2502    \u2502               \u2502  \u2502\n\u2502  \u2502   /status    \u2502    \u2502  Orchestration  \u2502    \u2502 Thread Pool   \u2502  \u2502\n\u2502  \u2502  /download   \u2502    \u2502                 \u2502    \u2502   Executor    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502          \u2502                    \u2502                      \u2502          \u2502\n\u2502          \u25bc                    \u25bc                      \u25bc          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Models     \u2502    \u2502 Progress Monitor\u2502    \u2502   Storage     \u2502  \u2502\n\u2502  \u2502              \u2502    \u2502                 \u2502    \u2502               \u2502  \u2502\n\u2502  \u2502 Data Types   \u2502    \u2502 TqdmInterceptor \u2502    \u2502  Upload Dir   \u2502  \u2502\n\u2502  \u2502 Validation   \u2502    \u2502 AsyncTracker    \u2502    \u2502  Output Dir   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                              \u2502                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   Book Maker Core    \u2502\n                    \u2502                      \u2502\n                    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n                    \u2502  \u2502 EPUB Loader  \u2502    \u2502\n                    \u2502  \u2502 TXT Loader   \u2502    \u2502\n                    \u2502  \u2502 SRT Loader   \u2502    \u2502\n                    \u2502  \u2502 MD Loader    \u2502    \u2502\n                    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n                    \u2502          \u2502            \u2502\n                    \u2502          \u25bc            \u2502\n                    \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n                    \u2502  \u2502 Translation  \u2502    \u2502\n                    \u2502  \u2502   Engines    \u2502    \u2502\n                    \u2502  \u2502              \u2502    \u2502\n                    \u2502  \u2502 ChatGPT      \u2502    \u2502\n                    \u2502  \u2502 Claude       \u2502    \u2502\n                    \u2502  \u2502 Gemini       \u2502    \u2502\n                    \u2502  \u2502 DeepL        \u2502    \u2502\n                    \u2502  \u2502 Google       \u2502    \u2502\n                    \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>User Request \u2192 FastAPI \u2192 Job Creation \u2192 Thread Pool \u2192 Translation Engine \u2192 Progress Updates \u2192 Response\n\n1. HTTP Request (/translate)\n   \u2193\n2. File Upload &amp; Validation\n   \u2193\n3. Job Creation (UUID generation)\n   \u2193 \n4. Thread Submission (async execution) \n   \u2193\n5. File Processing (EPUB/TXT/SRT/MD)\n   \u2193\n6. Translation Engine Invocation\n   \u2193 (with progress callbacks)\n7. Progress Updates via TqdmInterceptor\n   \u2193\n8. Output File Generation\n   \u2193\n9. Job Completion &amp; File Storage\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#api-request-lifecycle","title":"API Request Lifecycle","text":"<pre><code>1. Request Reception\n   - FastAPI endpoint receives multipart/form-data\n   - File validation (format, size)\n   - Parameter validation (model, language, API key)\n\n2. Job Initialization\n   - UUID generation for job_id\n   - File storage with unique prefix\n   - Job record creation in JobManager\n\n3. Async Processing\n   - Thread pool executor submission\n   - Translation function execution\n   - Progress monitoring activation\n\n4. Translation Execution\n   - Loader instantiation (EPUB/TXT/etc.)\n   - Model initialization (ChatGPT/Claude/etc.)\n   - Paragraph-by-paragraph translation\n   - Progress updates via callbacks\n\n5. Completion Handling\n   - Output file generation\n   - Job status update\n   - Resource cleanup scheduling\n   - Download URL availability\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#2-core-components-deep-dive","title":"2. Core Components Deep Dive","text":""},{"location":"api_docs/API_DOCUMENTATION/#api-layer-components","title":"API Layer Components","text":""},{"location":"api_docs/API_DOCUMENTATION/#mainpy-fastapi-application-core","title":"<code>main.py</code> - FastAPI Application Core","text":"<p>Purpose: Entry point and HTTP endpoint management</p> <p>Key Responsibilities: - Request validation and routing - Middleware configuration (CORS, TrustedHost) - Exception handling and error responses - File upload/download management - Job lifecycle endpoints</p> <p>Critical Functions:</p> <pre><code>- start_translation(): Creates and starts translation jobs\n- get_job_status(): Returns current job progress and status\n- download_result(): Serves completed translation files\n- list_jobs(): Provides job listing with filtering\n</code></pre> <p>Configuration Integration: - Uses <code>settings</code> from config for environment-based behavior - Dynamically adjusts CORS origins based on environment - Configurable worker pools and TTL settings</p>"},{"location":"api_docs/API_DOCUMENTATION/#async_translatorpy-translation-orchestration","title":"<code>async_translator.py</code> - Translation Orchestration","text":"<p>Purpose: Bridge between API and book_maker core</p> <p>Key Responsibilities: - Job execution management - Model class mapping and initialization - File type detection and loader selection - Progress callback integration - Retry logic with exponential backoff</p> <p>Translation Flow:</p> <pre><code>1. start_translation()\n   - Validates input file\n   - Creates job record\n   - Registers progress callbacks\n   - Submits to thread pool\n\n2. _execute_translation()\n   - Sets up timeout monitoring\n   - Creates TqdmInterceptor patch\n   - Invokes appropriate loader\n   - Handles retries on failure\n\n3. _translate_with_loader()\n   - Determines file type\n   - Instantiates correct loader\n   - Manages output file placement\n   - Handles format-specific quirks\n</code></pre> <p>Model Mapping:</p> <pre><code>MODEL_CLASSES = {\n    TranslationModel.CHATGPT: ChatGPTAPI,\n    TranslationModel.CLAUDE: Claude,\n    TranslationModel.GEMINI: Gemini,\n    TranslationModel.DEEPL: DeepL,\n    TranslationModel.GOOGLE: Google,\n    # ... more models\n}\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#job_managerpy-job-lifecycle-management","title":"<code>job_manager.py</code> - Job Lifecycle Management","text":"<p>Purpose: Thread-safe job storage and execution</p> <p>Key Features: - Thread pool executor for concurrent translations - Job TTL and automatic cleanup - File management (upload/output/temp) - Progress tracking integration - Statistics and monitoring</p> <p>Thread Safety:</p> <pre><code>- Uses threading.RLock for all job operations\n- Thread-safe collections for job storage\n- Atomic status transitions\n- Safe cleanup operations\n</code></pre> <p>Storage Management:</p> <pre><code>- Upload directory: Unique prefixed files\n- Output directory: Job-specific outputs\n- Temp directory: Working files\n- Automatic cleanup after TTL expiration\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#progress_monitorpy-real-time-progress-tracking","title":"<code>progress_monitor.py</code> - Real-time Progress Tracking","text":"<p>Purpose: Intercept and relay translation progress</p> <p>Architecture:</p> <pre><code>ProgressMonitor (Core)\n    \u251c\u2500\u2500 Callback Registry (job_id \u2192 callback)\n    \u251c\u2500\u2500 Progress Storage (current/total tracking)\n    \u2514\u2500\u2500 Update Broadcasting\n\nTqdmInterceptor (Patching)\n    \u251c\u2500\u2500 Inherits from tqdm\n    \u251c\u2500\u2500 Overrides update() method\n    \u2514\u2500\u2500 Forwards to ProgressMonitor\n\nAsyncProgressTracker (Singleton)\n    \u251c\u2500\u2500 Global instance\n    \u251c\u2500\u2500 High-level API\n    \u2514\u2500\u2500 Context managers for patching\n</code></pre> <p>Key Innovation: The TqdmInterceptor monkey-patches the tqdm library used by book_maker, allowing transparent progress tracking without modifying the core translation code.</p>"},{"location":"api_docs/API_DOCUMENTATION/#modelspy-data-models-and-validation","title":"<code>models.py</code> - Data Models and Validation","text":"<p>Purpose: Type safety and data validation</p> <p>Model Categories: 1. Enums:    - <code>JobStatus</code>: pending, processing, completed, failed, cancelled    - <code>TranslationModel</code>: chatgpt, claude, gemini, deepl, google, etc.</p> <ol> <li>Dataclasses:</li> <li> <p><code>TranslationJob</code>: Complete job state and metadata</p> </li> <li> <p>Pydantic Models:</p> </li> <li>Request validation (TranslationRequest)</li> <li>Response serialization (TranslationResponse, JobStatusResponse)</li> <li>Error handling (ErrorResponse)</li> </ol>"},{"location":"api_docs/API_DOCUMENTATION/#config-configuration-management","title":"<code>config/</code> - Configuration Management","text":"<p>Purpose: Environment-based settings</p> <p>Structure:</p> <pre><code>settings.py\n    \u251c\u2500\u2500 SecurityConfig (CORS, Trusted Hosts)\n    \u251c\u2500\u2500 Settings (Pydantic BaseSettings)\n    \u2514\u2500\u2500 Environment detection\n\nconstants.py\n    \u251c\u2500\u2500 NetworkConstants (ports, hosts)\n    \u251c\u2500\u2500 SecurityConstants (methods, headers)\n    \u251c\u2500\u2500 HttpStatusConstants (status codes)\n    \u2514\u2500\u2500 DefaultValues (fallbacks)\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#book-maker-components","title":"Book Maker Components","text":""},{"location":"api_docs/API_DOCUMENTATION/#epub_loaderpy-epub-processing-engine","title":"<code>epub_loader.py</code> - EPUB Processing Engine","text":"<p>Purpose: Handle EPUB file translation</p> <p>Key Features: - BeautifulSoup HTML parsing - Paragraph extraction and translation - Progress callback integration - Resume capability with pickle - Context-aware translation support</p> <p>Progress Integration:</p> <pre><code>def _update_global_progress(self, current, total):\n    if self.progress_tracker and self.job_id:\n        self.progress_tracker.monitor.update_progress(\n            self.job_id, current, total\n        )\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#other-loaders-txt-srt-md","title":"Other Loaders (TXT, SRT, MD)","text":"<p>Purpose: Format-specific handlers</p> <p>Common Pattern:</p> <pre><code>class XXXLoader(BaseBookLoader):\n    def __init__(self, file_name, model, key, ...):\n        # Initialize translator\n        # Set up file handling\n\n    def make_bilingual_book(self):\n        # Read source file\n        # Process content\n        # Translate segments\n        # Generate output file\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#base_loaderpy-abstract-base-class","title":"<code>base_loader.py</code> - Abstract Base Class","text":"<p>Purpose: Define loader interface</p> <p>Required Methods: - <code>_make_new_book()</code>: Create output structure - <code>make_bilingual_book()</code>: Main translation logic - <code>load_state()</code>: Resume functionality - <code>_save_progress()</code>: Checkpoint creation</p>"},{"location":"api_docs/API_DOCUMENTATION/#3-progress-tracking-system","title":"3. Progress Tracking System","text":""},{"location":"api_docs/API_DOCUMENTATION/#the-architecture-fix","title":"The Architecture Fix","text":"<p>Original Problem: The progress tracking system had an instance reference issue where the <code>AsyncProgressTracker</code> singleton wasn't properly maintaining callback references across thread boundaries.</p> <p>Solution Architecture:</p> <pre><code># Global singleton instance\nglobal_progress_tracker = AsyncProgressTracker()\n\n# Registration in job_manager.py\nglobal_progress_tracker.start_tracking(job_id, callback)\n\n# Patching in async_translator.py\nwith global_progress_tracker.create_tqdm_patch(job_id):\n    # Translation happens here\n    # tqdm is monkey-patched to use TqdmInterceptor\n\n# Update flow in epub_loader.py\nself.progress_tracker.monitor.update_progress(job_id, current, total)\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#callback-flow","title":"Callback Flow","text":"<pre><code>1. Job Start\n   \u2514\u2500&gt; job_manager.start_job()\n       \u2514\u2500&gt; global_progress_tracker.start_tracking(job_id, callback)\n           \u2514\u2500&gt; Registers callback in ProgressMonitor\n\n2. Translation Execution\n   \u2514\u2500&gt; async_translator._execute_translation()\n       \u2514\u2500&gt; Creates TqdmInterceptor patch\n           \u2514\u2500&gt; Replaces tqdm.tqdm with TqdmInterceptor\n\n3. Progress Updates (two paths):\n\n   Path A: Via tqdm\n   \u2514\u2500&gt; book_maker uses tqdm(iterable)\n       \u2514\u2500&gt; TqdmInterceptor.update()\n           \u2514\u2500&gt; ProgressMonitor.update_progress()\n               \u2514\u2500&gt; Callback execution\n\n   Path B: Direct call\n   \u2514\u2500&gt; epub_loader._update_global_progress()\n       \u2514\u2500&gt; ProgressMonitor.update_progress()\n           \u2514\u2500&gt; Callback execution\n\n4. Job Completion\n   \u2514\u2500&gt; job_manager cleans up\n       \u2514\u2500&gt; global_progress_tracker.stop_tracking(job_id)\n           \u2514\u2500&gt; Unregisters callback\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#update-throttling","title":"Update Throttling","text":"<p>The system implements intelligent throttling to prevent excessive updates:</p> <pre><code>should_update = (\n    self._last_update_time is None or                    # First update\n    now - self._last_update_time &gt;= interval or          # Time-based\n    self.n == 1 or                                       # Start\n    (self.total and self.n &gt;= self.total) or            # End\n    (self.total and (self.n * 100 // self.total) % 5 == 0)  # 5% milestones\n)\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#4-translation-flow-step-by-step","title":"4. Translation Flow Step-by-Step","text":""},{"location":"api_docs/API_DOCUMENTATION/#complete-request-flow","title":"Complete Request Flow","text":"<pre><code># 1. HTTP Request Reception\nPOST /translate\nContent-Type: multipart/form-data\n- file: example.epub\n- model: chatgpt\n- key: sk-xxx\n- language: zh-cn\n\n# 2. FastAPI Endpoint Processing (main.py)\nasync def start_translation():\n    # Validate file format\n    # Save with unique prefix\n    unique_path = job_manager.get_upload_path(file.filename)\n    # Start translation job\n    job_id = async_translator.start_translation(...)\n\n# 3. Job Creation (async_translator.py)\ndef start_translation():\n    # Create job record\n    job = job_manager.create_job(...)\n    # Register progress callback\n    def progress_callback(update):\n        job_manager.update_job_progress(...)\n    # Submit to thread pool\n    job_manager.start_job(job_id, translation_func, progress_callback)\n\n# 4. Thread Execution (job_manager.py)\ndef _execute_job():\n    # Update status to PROCESSING\n    # Call translation function\n    output_path = translation_func(job)\n    # Mark as COMPLETED or FAILED\n    # Clean up resources\n\n# 5. Translation Processing (async_translator.py)\ndef _execute_translation():\n    # Set up timeout monitoring\n    # Apply TqdmInterceptor patch\n    with global_progress_tracker.create_tqdm_patch(job_id):\n        self._translate_with_loader(...)\n\n# 6. Loader Execution (epub_loader.py)\ndef make_bilingual_book():\n    # Parse EPUB structure\n    # Extract paragraphs\n    for paragraph in tqdm(paragraphs):\n        # Translate paragraph\n        translated = self.translate_model.translate(text)\n        # Update progress\n        self._update_global_progress(current, total)\n        # Save checkpoint periodically\n\n# 7. Output Generation\n# Move generated file to output directory\nshutil.move(generated_file, output_path)\n\n# 8. Job Completion\n# Update job record\njob.mark_completed(output_path)\n# Stop progress tracking\nglobal_progress_tracker.stop_tracking(job_id)\n\n# 9. Client Polling\nGET /status/{job_id}\n# Returns progress, status, download_url\n\n# 10. File Download\nGET /download/{job_id}\n# Serves completed file\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#progress-update-flow","title":"Progress Update Flow","text":"<pre><code># Real-time updates during translation\n1. tqdm iteration in book_maker\n   \u2193\n2. TqdmInterceptor.update() intercepts\n   \u2193\n3. ProgressMonitor.update_progress() called\n   \u2193\n4. Registered callback executed\n   \u2193\n5. JobManager.update_job_progress()\n   \u2193\n6. TranslationJob.progress updated\n   \u2193\n7. Available via GET /status/{job_id}\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#5-key-patterns-and-design-decisions","title":"5. Key Patterns and Design Decisions","text":""},{"location":"api_docs/API_DOCUMENTATION/#asyncthreading-architecture","title":"Async/Threading Architecture","text":"<p>Design Choice: Thread Pool Executor instead of asyncio - Reason: book_maker core is synchronous and CPU-intensive - Implementation: ThreadPoolExecutor with configurable max_workers - Benefits: True parallelism for CPU-bound translation tasks</p> <pre><code>self._executor = ThreadPoolExecutor(\n    max_workers=max_workers,\n    thread_name_prefix=\"translation-\"\n)\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#singleton-pattern","title":"Singleton Pattern","text":"<p>Used For: Progress tracking and job management - Global Instances: <code>job_manager</code>, <code>async_translator</code>, <code>global_progress_tracker</code> - Benefits: Consistent state across all components - Thread Safety: All operations protected by locks</p>"},{"location":"api_docs/API_DOCUMENTATION/#monkey-patching","title":"Monkey Patching","text":"<p>Purpose: Intercept tqdm progress without modifying book_maker</p> <pre><code># Temporary replacement of tqdm\nimport tqdm as tqdm_module\noriginal_tqdm = tqdm_module.tqdm\ntqdm_module.tqdm = TqdmInterceptor\ntry:\n    # Translation happens here\nfinally:\n    tqdm_module.tqdm = original_tqdm\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#error-handling-strategy","title":"Error Handling Strategy","text":"<p>Multi-Level Protection: 1. Global Exception Handler: Catches all unhandled exceptions 2. Job-Level Try-Catch: Each job isolated from others 3. Retry Logic: Exponential backoff for transient failures 4. Graceful Degradation: Failed jobs don't affect system</p> <pre><code>try:\n    output_path = translation_func(job)\n    job.mark_completed(output_path)\nexcept Exception as e:\n    job.mark_failed(str(e))\n    if job.retry_count &lt; self.max_retries:\n        # Retry with backoff\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#file-management","title":"File Management","text":"<p>Three-Tier Storage:</p> <pre><code>uploads/     # Original files with UUID prefix\n\u251c\u2500\u2500 a1b2c3d4_book.epub\n\u251c\u2500\u2500 e5f6g7h8_document.txt\n\noutputs/     # Completed translations\n\u251c\u2500\u2500 book_bilingual_job123.epub\n\u251c\u2500\u2500 document_bilingual_job456.txt\n\ntemp/        # Working files and checkpoints\n\u251c\u2500\u2500 job123/\n\u2502   \u251c\u2500\u2500 .book.temp.bin\n</code></pre> <p>Cleanup Strategy: - TTL-based expiration (configurable, default 24 hours) - Periodic cleanup task - Manual cleanup endpoint - Automatic on shutdown</p>"},{"location":"api_docs/API_DOCUMENTATION/#configuration-management","title":"Configuration Management","text":"<p>Environment-Based Settings:</p> <pre><code>ENVIRONMENT=development  # development, staging, production\n\u251c\u2500\u2500 Different CORS origins\n\u251c\u2500\u2500 Different security settings\n\u251c\u2500\u2500 Different logging levels\n\u2514\u2500\u2500 Different resource limits\n</code></pre> <p>Override Hierarchy: 1. Environment variables (highest priority) 2. .env file 3. Default values in code (lowest priority)</p>"},{"location":"api_docs/API_DOCUMENTATION/#6-common-issues-and-debugging","title":"6. Common Issues and Debugging","text":""},{"location":"api_docs/API_DOCUMENTATION/#instance-reference-problem","title":"Instance Reference Problem","text":"<p>Symptom: Progress updates not reaching API despite being logged Cause: Different object instances between registration and update Solution: Use singleton pattern with global instance</p> <pre><code># WRONG - Creates new instance\nprogress_tracker = AsyncProgressTracker()\n\n# CORRECT - Uses global singleton\nfrom .progress_monitor import global_progress_tracker\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#threading-issues","title":"Threading Issues","text":"<p>Common Problems: 1. Deadlocks: Always use timeout on locks 2. Race Conditions: Protected by RLock 3. Resource Leaks: Ensure cleanup in finally blocks</p> <p>Debugging Approach:</p> <pre><code># Add extensive logging\nlogger.warning(f\"DEBUG: Thread {threading.current_thread().name}\")\nlogger.warning(f\"DEBUG: Lock acquired: {self._lock}\")\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#file-path-issues","title":"File Path Issues","text":"<p>Problem: Import errors or file not found Common Causes: - Relative vs absolute paths - Working directory changes - Docker volume mounting</p> <p>Solution:</p> <pre><code># Always use absolute paths\nfrom pathlib import Path\nabsolute_path = Path(__file__).parent.parent / \"uploads\" / filename\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#progress-not-updating","title":"Progress Not Updating","text":"<p>Debugging Checklist: 1. Check callback registration:    <code>python    logger.warning(f\"Registered callbacks: {list(self._callbacks.keys())}\")</code></p> <ol> <li> <p>Verify job_id consistency:    <code>python    logger.warning(f\"Job ID in tracker: {self.job_id}\")    logger.warning(f\"Job ID in update: {job_id}\")</code></p> </li> <li> <p>Confirm patch is active:    <code>python    logger.warning(f\"TqdmInterceptor active: {isinstance(tqdm.tqdm, TqdmInterceptor)}\")</code></p> </li> <li> <p>Monitor update frequency:    <code>python    logger.warning(f\"Update throttled: {not should_update}\")</code></p> </li> </ol>"},{"location":"api_docs/API_DOCUMENTATION/#memory-leaks","title":"Memory Leaks","text":"<p>Potential Sources: - Uncleaned job records - Unremoved callbacks - Temporary files not deleted</p> <p>Prevention:</p> <pre><code># Always clean up in finally blocks\ntry:\n    # Processing\nfinally:\n    self._callbacks.pop(job_id, None)\n    self._active_jobs.pop(job_id, None)\n    # Remove temp files\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#translation-model-errors","title":"Translation Model Errors","text":"<p>Common Issues: 1. API Key Invalid: Check key format and permissions 2. Rate Limiting: Implement backoff and retry 3. Network Timeouts: Configure appropriate timeouts 4. Model Unavailable: Fallback to alternative models</p> <p>Error Handling Pattern:</p> <pre><code>try:\n    result = model.translate(text)\nexcept RateLimitError:\n    time.sleep(2 ** retry_count)\n    return self.retry_translation()\nexcept AuthenticationError:\n    logger.error(\"Invalid API key\")\n    job.mark_failed(\"Authentication failed\")\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#7-code-examples","title":"7. Code Examples","text":""},{"location":"api_docs/API_DOCUMENTATION/#adding-a-new-endpoint","title":"Adding a New Endpoint","text":"<pre><code># In main.py\n\n@app.post(\"/translate-batch\")\nasync def batch_translation(\n    files: List[UploadFile] = File(...),\n    model: TranslationModel = Form(...),\n    key: str = Form(...)\n):\n    \"\"\"Start batch translation of multiple files\"\"\"\n    job_ids = []\n\n    for file in files:\n        # Validate each file\n        if not file.filename.endswith(('.epub', '.txt', '.srt', '.md')):\n            continue\n\n        # Save file\n        upload_path = job_manager.get_upload_path(file.filename)\n        with open(upload_path, \"wb\") as f:\n            content = await file.read()\n            f.write(content)\n\n        # Start translation\n        try:\n            job_id = async_translator.start_translation(\n                file_path=str(upload_path),\n                model=model,\n                key=key,\n                language=\"zh-cn\"\n            )\n            job_ids.append(job_id)\n        except Exception as e:\n            logger.error(f\"Failed to start translation for {file.filename}: {e}\")\n\n    return {\n        \"message\": f\"Started {len(job_ids)} translation jobs\",\n        \"job_ids\": job_ids\n    }\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#modifying-progress-tracking","title":"Modifying Progress Tracking","text":"<pre><code># Add custom progress metrics\n\nclass ExtendedProgressUpdate(ProgressUpdate):\n    \"\"\"Extended progress with additional metrics\"\"\"\n    words_per_minute: float = 0.0\n    estimated_completion: Optional[datetime] = None\n    quality_score: float = 0.0\n\n# In progress_monitor.py\ndef update_progress_with_metrics(\n    self,\n    job_id: str,\n    current: int,\n    total: int,\n    start_time: datetime\n):\n    # Calculate words per minute\n    elapsed = (datetime.now() - start_time).total_seconds() / 60\n    wpm = (current * 50) / elapsed if elapsed &gt; 0 else 0  # Assume 50 words per paragraph\n\n    # Estimate completion\n    if current &gt; 0:\n        rate = current / elapsed\n        remaining = (total - current) / rate if rate &gt; 0 else 0\n        estimated = datetime.now() + timedelta(minutes=remaining)\n    else:\n        estimated = None\n\n    # Create extended update\n    update = ExtendedProgressUpdate(\n        job_id=job_id,\n        current=current,\n        total=total,\n        percentage=(current / total * 100) if total &gt; 0 else 0,\n        timestamp=datetime.now(),\n        words_per_minute=wpm,\n        estimated_completion=estimated\n    )\n\n    # Call callback\n    callback = self._callbacks.get(job_id)\n    if callback:\n        callback(update)\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#adding-a-new-file-format-loader","title":"Adding a New File Format Loader","text":"<pre><code># Create new loader in book_maker/loader/pdf_loader.py\n\nfrom .base_loader import BaseBookLoader\nimport PyPDF2\n\nclass PDFBookLoader(BaseBookLoader):\n    def __init__(self, pdf_name, model, key, **kwargs):\n        self.pdf_name = pdf_name\n        self.translate_model = model(key, **kwargs)\n        self.pages_to_save = []\n\n    def make_bilingual_book(self):\n        \"\"\"Main translation method for PDF files\"\"\"\n        # Read PDF\n        with open(self.pdf_name, 'rb') as file:\n            pdf_reader = PyPDF2.PdfReader(file)\n            pdf_writer = PyPDF2.PdfWriter()\n\n            total_pages = len(pdf_reader.pages)\n\n            # Process each page\n            for i, page in enumerate(tqdm(pdf_reader.pages, desc=\"Translating PDF\")):\n                # Extract text\n                text = page.extract_text()\n\n                # Translate\n                translated = self.translate_model.translate(text)\n\n                # Create new page with translation\n                # (This is simplified - real implementation would be more complex)\n                new_page = self._create_bilingual_page(text, translated)\n                pdf_writer.add_page(new_page)\n\n                # Update progress if job_id exists\n                if hasattr(self, 'progress_tracker') and self.job_id:\n                    self.progress_tracker.monitor.update_progress(\n                        self.job_id, i + 1, total_pages\n                    )\n\n            # Save output\n            output_name = self.pdf_name.replace('.pdf', '_bilingual.pdf')\n            with open(output_name, 'wb') as output:\n                pdf_writer.write(output)\n\n    def _create_bilingual_page(self, original, translated):\n        \"\"\"Create a page with both original and translated text\"\"\"\n        # Implementation would depend on PDF library capabilities\n        pass\n\n    def load_state(self):\n        \"\"\"Load saved state for resume\"\"\"\n        # Implement pickle-based state loading\n        pass\n\n    def _save_progress(self):\n        \"\"\"Save current progress\"\"\"\n        # Implement checkpoint saving\n        pass\n\n    def _make_new_book(self, book):\n        \"\"\"Create new PDF structure\"\"\"\n        return PyPDF2.PdfWriter()\n\n# Register in BOOK_LOADER_DICT\nfrom book_maker.loader import BOOK_LOADER_DICT\nBOOK_LOADER_DICT['pdf'] = PDFBookLoader\n\n# Update supported formats in async_translator.py\nsupported_formats = ['.epub', '.txt', '.srt', '.md', '.pdf']\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#debugging-progress-issues","title":"Debugging Progress Issues","text":"<pre><code># Add debug middleware to track progress flow\n\nclass ProgressDebugMiddleware:\n    \"\"\"Middleware to debug progress tracking issues\"\"\"\n\n    def __init__(self):\n        self.events = []\n\n    def log_event(self, event_type: str, job_id: str, data: dict):\n        \"\"\"Log a progress-related event\"\"\"\n        self.events.append({\n            'timestamp': datetime.now(),\n            'event_type': event_type,\n            'job_id': job_id,\n            'thread': threading.current_thread().name,\n            'data': data\n        })\n\n    def get_job_timeline(self, job_id: str):\n        \"\"\"Get timeline of events for a specific job\"\"\"\n        return [e for e in self.events if e['job_id'] == job_id]\n\n    def print_timeline(self, job_id: str):\n        \"\"\"Print formatted timeline\"\"\"\n        timeline = self.get_job_timeline(job_id)\n        for event in timeline:\n            print(f\"{event['timestamp']} [{event['thread']}] {event['event_type']}: {event['data']}\")\n\n# Use in progress_monitor.py\ndebug_middleware = ProgressDebugMiddleware()\n\ndef update_progress(self, job_id: str, current: int, total: int):\n    debug_middleware.log_event('progress_update', job_id, {\n        'current': current,\n        'total': total,\n        'callbacks_registered': list(self._callbacks.keys())\n    })\n    # ... rest of the method\n\n# Access debug info via endpoint\n@app.get(\"/debug/progress/{job_id}\")\nasync def get_progress_debug(job_id: str):\n    return {\n        \"timeline\": debug_middleware.get_job_timeline(job_id),\n        \"current_callbacks\": list(global_progress_tracker.monitor._callbacks.keys()),\n        \"active_jobs\": list(global_progress_tracker.monitor._active_jobs.keys())\n    }\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#custom-translation-model-integration","title":"Custom Translation Model Integration","text":"<pre><code># Add a new translation model\n\n# In book_maker/translator/custom_model.py\nclass CustomTranslator:\n    def __init__(self, key, language, **kwargs):\n        self.api_key = key\n        self.target_language = language\n        self.api_base = kwargs.get('api_base', 'https://api.custom.com')\n\n    def translate(self, text):\n        \"\"\"Translate single text\"\"\"\n        response = requests.post(\n            f\"{self.api_base}/translate\",\n            json={\n                \"text\": text,\n                \"target\": self.target_language,\n                \"source\": \"auto\"\n            },\n            headers={\n                \"Authorization\": f\"Bearer {self.api_key}\"\n            }\n        )\n        return response.json()[\"translation\"]\n\n# Register in async_translator.py\nfrom book_maker.translator import CustomTranslator\n\nMODEL_CLASSES = {\n    # ... existing models\n    TranslationModel.CUSTOM: CustomTranslator\n}\n\n# Add to TranslationModel enum in models.py\nclass TranslationModel(str, Enum):\n    # ... existing models\n    CUSTOM = \"custom\"\n</code></pre>"},{"location":"api_docs/API_DOCUMENTATION/#summary","title":"Summary","text":"<p>The Bilingual Book Maker API Layer is a sophisticated async translation system that:</p> <ol> <li>Provides RESTful API for file translation with job tracking</li> <li>Supports multiple file formats (EPUB, TXT, SRT, MD)</li> <li>Integrates various translation models (ChatGPT, Claude, Gemini, DeepL, Google)</li> <li>Offers real-time progress tracking through tqdm interception</li> <li>Handles concurrent translations via thread pool execution</li> <li>Manages file lifecycle with automatic cleanup</li> <li>Ensures reliability through retry logic and error handling</li> <li>Adapts to environments with configuration-based settings</li> </ol> <p>The architecture emphasizes: - Separation of Concerns: Clear boundaries between API, orchestration, and translation - Thread Safety: Careful synchronization for concurrent operations - Extensibility: Easy addition of new models and formats - Monitoring: Comprehensive progress and status tracking - Resilience: Graceful error handling and recovery</p> <p>This documentation provides both theoretical understanding and practical examples for maintaining, extending, and debugging the system.</p>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/","title":"Local Async EPUB Translation API Implementation Guide","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#executive-summary","title":"Executive Summary","text":"<p>This document provides a comprehensive implementation guide for converting the bilingual_book_maker CLI tool into a local async API service. The implementation focuses on creating a robust foundation for asynchronous EPUB translation processing that will eventually migrate to AWS Fargate. This Phase 1 concentrates on local development with in-memory job tracking, async processing, and a clean architecture that enables seamless cloud migration.</p> <p>Key Objectives: - Transform synchronous CLI tool to async API service - Implement non-blocking translation requests with job tracking - Create foundation for AWS Fargate migration - Support 10-1000 translations/month volume - Ensure 99.9% reliability for local development</p>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Current State Analysis</li> <li>Technical Design</li> <li>Implementation Strategy</li> <li>Code Structure</li> <li>Development Workflow</li> <li>Testing Strategy</li> <li>Migration Path to AWS</li> <li>Performance Considerations</li> <li>Security &amp; Error Handling</li> </ol>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#architecture-overview","title":"Architecture Overview","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#high-level-system-design","title":"High-Level System Design","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client App    \u2502\u2500\u2500\u2500\u2500\u2502   FastAPI App    \u2502\u2500\u2500\u2500\u2500\u2502  Job Manager    \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502   (In-Memory)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                        \u2502\n                                \u2502                        \u2502\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502 Translation     \u2502    \u2502   Progress        \u2502\n                       \u2502 Service         \u2502    \u2502   Reporter        \u2502\n                       \u2502 (Async)         \u2502    \u2502   (AsyncIO)       \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502  File Storage   \u2502\n                       \u2502   (Local FS)    \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#core-components","title":"Core Components","text":"<ol> <li>FastAPI Application: Web API framework with async support</li> <li>Job Manager: In-memory job tracking with status updates</li> <li>Translation Service: Async wrapper around existing translation logic</li> <li>Progress Reporter: Real-time progress updates via asyncio</li> <li>File Storage: Local filesystem with cleanup policies</li> <li>Worker Pool: Async task execution with concurrency control</li> </ol>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#design-principles","title":"Design Principles","text":"<ul> <li>Async-First: All I/O operations are asynchronous</li> <li>Non-Blocking: API responses immediate with job tracking</li> <li>Stateless: Job state persisted for horizontal scaling preparation</li> <li>Modular: Clean separation for AWS migration</li> <li>Resilient: Comprehensive error handling and recovery</li> </ul>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#current-state-analysis","title":"Current State Analysis","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#existing-cli-architecture","title":"Existing CLI Architecture","text":"<p>The current implementation is a synchronous CLI tool with the following structure:</p> <pre><code># Current Flow (Synchronous)\ncli.py \u2192 EPUBBookLoader \u2192 Translator \u2192 Output File\n</code></pre> <p>Key Components: - <code>/book_maker/cli.py</code>: Command-line interface with argument parsing - <code>/book_maker/loader/epub_loader.py</code>: EPUB file processing - <code>/book_maker/translator/</code>: Various translation service implementations - <code>/book_maker/utils.py</code>: Shared utilities and language mappings</p> <p>Limitations for API Use: - Synchronous execution blocks request thread - No job tracking or progress reporting - CLI-only interface without HTTP endpoints - No concurrent processing capabilities - Limited error handling for API scenarios</p>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#existing-api-layer-basic","title":"Existing API Layer (Basic)","text":"<p>The current <code>/api_layer/api/main.py</code> provides a basic synchronous endpoint:</p> <pre><code>@app.post(\"/translate\")\nasync def translate_epub(file, target_language, model, ...):\n    # Current implementation is synchronous despite async def\n    output_path = await translator.translate_epub(...)  # Blocking call\n    return FileResponse(output_path)\n</code></pre> <p>Issues with Current Implementation: - Marked as <code>async</code> but performs blocking operations - No job management or progress tracking - Direct file response without proper cleanup - No timeout handling or cancellation support</p>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#technical-design","title":"Technical Design","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#1-async-processing-model","title":"1. Async Processing Model","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#threading-vs-asyncio-decision","title":"Threading vs AsyncIO Decision","text":"<p>Selected Approach: Hybrid AsyncIO + ThreadPoolExecutor</p> <pre><code>import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\nfrom typing import Optional, Dict, Any\n\nclass AsyncTranslationService:\n    def __init__(self):\n        self.executor = ThreadPoolExecutor(max_workers=4)\n        self.active_jobs: Dict[str, asyncio.Task] = {}\n\n    async def translate_epub_async(\n        self,\n        job_id: str,\n        input_path: str,\n        **kwargs\n    ) -&gt; str:\n        \"\"\"Async wrapper for translation with progress reporting\"\"\"\n        loop = asyncio.get_event_loop()\n\n        # Run translation in thread pool to avoid blocking\n        task = loop.run_in_executor(\n            self.executor,\n            self._translate_with_progress,\n            job_id,\n            input_path,\n            kwargs\n        )\n\n        self.active_jobs[job_id] = task\n        try:\n            result = await task\n            return result\n        finally:\n            self.active_jobs.pop(job_id, None)\n</code></pre> <p>Rationale: - AsyncIO: For HTTP handling, job management, progress updates - ThreadPoolExecutor: For CPU-intensive translation work - Benefits: Non-blocking API, proper resource management, cancellation support</p>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#job-lifecycle-management","title":"Job Lifecycle Management","text":"<pre><code>from enum import Enum\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Optional\nimport asyncio\n\nclass JobStatus(Enum):\n    PENDING = \"pending\"\n    PROCESSING = \"processing\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\"\n\nclass JobManager:\n    def __init__(self):\n        self.jobs: Dict[str, TranslationJob] = {}\n        self.cleanup_task: Optional[asyncio.Task] = None\n\n    async def create_job(self, job_data: Dict[str, Any]) -&gt; str:\n        \"\"\"Create new translation job\"\"\"\n        job = TranslationJob(\n            job_id=str(uuid.uuid4()),\n            status=JobStatus.PENDING,\n            created_at=datetime.utcnow(),\n            **job_data\n        )\n        self.jobs[job.job_id] = job\n\n        # Start cleanup task if not running\n        if not self.cleanup_task:\n            self.cleanup_task = asyncio.create_task(self._cleanup_loop())\n\n        return job.job_id\n\n    async def _cleanup_loop(self):\n        \"\"\"Background cleanup of expired jobs\"\"\"\n        while True:\n            try:\n                await asyncio.sleep(300)  # Check every 5 minutes\n                await self._cleanup_expired_jobs()\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                logger.error(f\"Cleanup error: {e}\")\n\n    async def _cleanup_expired_jobs(self):\n        \"\"\"Remove jobs older than 3 hours\"\"\"\n        cutoff_time = datetime.utcnow() - timedelta(hours=3)\n        expired_jobs = [\n            job_id for job_id, job in self.jobs.items()\n            if job.completed_at and job.completed_at &lt; cutoff_time\n        ]\n\n        for job_id in expired_jobs:\n            await self._cleanup_job_files(job_id)\n            del self.jobs[job_id]\n\n        if expired_jobs:\n            logger.info(f\"Cleaned up {len(expired_jobs)} expired jobs\")\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#2-progress-reporting-system","title":"2. Progress Reporting System","text":"<pre><code>import asyncio\nfrom typing import Callable, Optional\n\nclass ProgressReporter:\n    def __init__(self, job_id: str, job_manager: JobManager):\n        self.job_id = job_id\n        self.job_manager = job_manager\n        self.current_progress = 0\n\n    async def update_progress(self, percentage: int, message: str = None):\n        \"\"\"Update job progress (called every 10% completion)\"\"\"\n        if percentage &gt; self.current_progress:\n            self.current_progress = percentage\n            await self.job_manager.update_job_progress(\n                self.job_id,\n                percentage,\n                message\n            )\n            logger.info(f\"Job {self.job_id}: {percentage}% - {message}\")\n\n    async def set_status(self, status: JobStatus, error_message: str = None):\n        \"\"\"Update job status\"\"\"\n        await self.job_manager.update_job_status(\n            self.job_id,\n            status,\n            error_message\n        )\n\n# Integration with existing translation logic\nclass AsyncEPUBTranslator:\n    def __init__(self, progress_reporter: ProgressReporter):\n        self.progress_reporter = progress_reporter\n\n    async def translate_paragraphs(self, paragraphs: List[str]) -&gt; List[str]:\n        \"\"\"Translate paragraphs with progress reporting\"\"\"\n        total = len(paragraphs)\n        translated = []\n\n        for i, paragraph in enumerate(paragraphs):\n            result = await self._translate_single(paragraph)\n            translated.append(result)\n\n            # Report progress every 10%\n            progress = int((i + 1) / total * 100)\n            if progress % 10 == 0:\n                await self.progress_reporter.update_progress(\n                    progress,\n                    f\"Translated {i + 1}/{total} paragraphs\"\n                )\n\n        return translated\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#3-api-endpoint-design","title":"3. API Endpoint Design","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#core-endpoints","title":"Core Endpoints","text":"<pre><code>from fastapi import FastAPI, UploadFile, Form, HTTPException\nfrom typing import Optional\n\napp = FastAPI(title=\"EPUB Translator API\", version=\"1.0.0\")\n\n@app.post(\"/translate\", response_model=TranslationResponse)\nasync def start_translation(\n    file: UploadFile,\n    target_language: str = Form(...),\n    model: TranslationModel = Form(TranslationModel.CHATGPT),\n    # ... other parameters\n) -&gt; TranslationResponse:\n    \"\"\"Start async translation job - returns immediately with job_id\"\"\"\n\n    # Validate input\n    if not file.filename.endswith('.epub'):\n        raise HTTPException(400, \"Only EPUB files supported\")\n\n    # Create job\n    job_id = await job_manager.create_job({\n        'filename': file.filename,\n        'target_language': target_language,\n        'model': model,\n        # ... other parameters\n    })\n\n    # Save uploaded file\n    input_path = await file_storage.save_upload(job_id, file)\n\n    # Start async translation (non-blocking)\n    asyncio.create_task(translation_service.process_job(job_id, input_path))\n\n    return TranslationResponse(\n        job_id=job_id,\n        status=JobStatus.PENDING,\n        message=\"Translation job started\",\n        estimated_duration_minutes=5  # Based on file size\n    )\n\n@app.get(\"/status/{job_id}\", response_model=JobStatusResponse)\nasync def get_job_status(job_id: str) -&gt; JobStatusResponse:\n    \"\"\"Get current job status and progress\"\"\"\n    job = await job_manager.get_job(job_id)\n    if not job:\n        raise HTTPException(404, \"Job not found\")\n\n    return JobStatusResponse(\n        job_id=job.job_id,\n        status=job.status,\n        progress=job.progress,\n        filename=job.filename,\n        created_at=job.created_at,\n        completed_at=job.completed_at,\n        duration_seconds=job.duration_seconds,\n        error_message=job.error_message,\n        download_url=job.download_url\n    )\n\n@app.get(\"/download/{job_id}\")\nasync def download_result(job_id: str):\n    \"\"\"Download completed translation\"\"\"\n    job = await job_manager.get_job(job_id)\n    if not job:\n        raise HTTPException(404, \"Job not found\")\n\n    if job.status != JobStatus.COMPLETED:\n        raise HTTPException(400, f\"Job not completed (status: {job.status})\")\n\n    file_path = await file_storage.get_result_path(job_id)\n    if not os.path.exists(file_path):\n        raise HTTPException(404, \"Result file not found\")\n\n    return FileResponse(\n        file_path,\n        filename=job.output_filename,\n        media_type='application/epub+zip'\n    )\n\n@app.delete(\"/jobs/{job_id}\")\nasync def cancel_job(job_id: str):\n    \"\"\"Cancel running translation job\"\"\"\n    success = await job_manager.cancel_job(job_id)\n    if not success:\n        raise HTTPException(404, \"Job not found or cannot be cancelled\")\n\n    return {\"message\": \"Job cancelled successfully\"}\n\n@app.get(\"/models\")\nasync def list_models():\n    \"\"\"List available translation models\"\"\"\n    return {\n        \"models\": [model.value for model in TranslationModel],\n        \"descriptions\": {\n            \"chatgptapi\": \"OpenAI GPT-3.5 Turbo\",\n            \"gpt4\": \"OpenAI GPT-4\",\n            \"claude\": \"Anthropic Claude\",\n            \"gemini\": \"Google Gemini\",\n            # ... other models\n        }\n    }\n\n@app.get(\"/languages\")\nasync def list_languages():\n    \"\"\"List supported target languages\"\"\"\n    return {\n        \"languages\": {\n            \"zh\": \"Chinese (Simplified)\",\n            \"zh-hant\": \"Chinese (Traditional)\",\n            \"en\": \"English\",\n            \"ja\": \"Japanese\",\n            \"ko\": \"Korean\",\n            \"es\": \"Spanish\",\n            \"fr\": \"French\",\n            \"de\": \"German\",\n            # ... other languages\n        }\n    }\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-1-local-async-foundation-weeks-1-2","title":"Phase 1: Local Async Foundation (Weeks 1-2)","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#week-1-core-infrastructure","title":"Week 1: Core Infrastructure","text":"<pre><code># Task breakdown\n1. Job Management System (2 days)\n   - In-memory job storage with TTL\n   - Job lifecycle management\n   - Background cleanup tasks\n\n2. Async Translation Service (2 days)\n   - ThreadPoolExecutor integration\n   - Progress reporting hooks\n   - Error handling and retry logic\n\n3. Updated API Endpoints (1 day)\n   - Non-blocking /translate endpoint\n   - Status and download endpoints\n   - Job cancellation support\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#week-2-integration-testing","title":"Week 2: Integration &amp; Testing","text":"<pre><code>4. File Storage Abstraction (1 day)\n   - Local filesystem implementation\n   - AWS S3 interface preparation\n   - Cleanup policies\n\n5. Progress Integration (2 days)\n   - Modify existing loaders for progress reporting\n   - Real-time status updates\n   - Error propagation\n\n6. End-to-End Testing (2 days)\n   - Integration tests\n   - Load testing with multiple concurrent jobs\n   - Error scenario testing\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-2-docker-production-readiness-week-3","title":"Phase 2: Docker &amp; Production Readiness (Week 3)","text":"<pre><code># Dockerfile for local development\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:8000/health || exit 1\n\nCMD [\"uvicorn\", \"api_layer.api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <pre><code># docker-compose.yml for development\nversion: '3.8'\nservices:\n  epub-translator:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - LOG_LEVEL=INFO\n      - STORAGE_MODE=local\n      - MAX_CONCURRENT_JOBS=4\n    volumes:\n      - ./temp:/app/temp\n      - ./logs:/app/logs\n    restart: unless-stopped\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-3-aws-migration-preparation-week-4","title":"Phase 3: AWS Migration Preparation (Week 4)","text":"<pre><code># Abstract interfaces for AWS migration\nfrom abc import ABC, abstractmethod\n\nclass StorageInterface(ABC):\n    @abstractmethod\n    async def save_upload(self, job_id: str, file: UploadFile) -&gt; str:\n        pass\n\n    @abstractmethod\n    async def save_result(self, job_id: str, file_path: str) -&gt; str:\n        pass\n\n    @abstractmethod\n    async def get_download_url(self, job_id: str) -&gt; str:\n        pass\n\nclass JobStoreInterface(ABC):\n    @abstractmethod\n    async def save_job(self, job: TranslationJob):\n        pass\n\n    @abstractmethod\n    async def get_job(self, job_id: str) -&gt; Optional[TranslationJob]:\n        pass\n\n    @abstractmethod\n    async def update_job_status(self, job_id: str, status: JobStatus):\n        pass\n\n# Local implementations\nclass LocalFileStorage(StorageInterface):\n    def __init__(self, base_path: str = \"./temp\"):\n        self.base_path = Path(base_path)\n        self.base_path.mkdir(exist_ok=True)\n\nclass InMemoryJobStore(JobStoreInterface):\n    def __init__(self):\n        self.jobs: Dict[str, TranslationJob] = {}\n\n# Future AWS implementations\nclass S3Storage(StorageInterface):\n    pass\n\nclass DynamoDBJobStore(JobStoreInterface):\n    pass\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#code-structure","title":"Code Structure","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#directory-organization","title":"Directory Organization","text":"<pre><code>bilingual_book_maker/\n\u251c\u2500\u2500 api_layer/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 main.py              # FastAPI app and endpoints\n\u2502   \u2502   \u251c\u2500\u2500 models.py            # Pydantic models\n\u2502   \u2502   \u251c\u2500\u2500 config.py            # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 dependencies.py      # FastAPI dependencies\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u251c\u2500\u2500 job_manager.py   # Job lifecycle management\n\u2502   \u2502       \u251c\u2500\u2500 translation.py   # Async translation service\n\u2502   \u2502       \u251c\u2500\u2500 storage.py       # File storage abstraction\n\u2502   \u2502       \u2514\u2500\u2500 progress.py      # Progress reporting\n\u2502   \u251c\u2500\u2500 tests/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 test_api.py          # API endpoint tests\n\u2502   \u2502   \u251c\u2500\u2500 test_integration.py  # End-to-end tests\n\u2502   \u2502   \u2514\u2500\u2500 conftest.py          # Test configuration\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 run_dev.py           # Development server\n\u2502   \u2502   \u2514\u2500\u2500 cleanup.py           # Manual cleanup utilities\n\u2502   \u2514\u2500\u2500 requirements.txt         # API-specific dependencies\n\u251c\u2500\u2500 book_maker/                  # Existing CLI code (enhanced)\n\u2502   \u251c\u2500\u2500 async_adapters/          # New: Async wrappers\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 epub_async.py        # Async EPUB processing\n\u2502   \u2502   \u2514\u2500\u2500 translator_async.py  # Async translator wrapper\n\u2502   \u2514\u2500\u2500 ... (existing structure)\n\u251c\u2500\u2500 docker/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u2514\u2500\u2500 docker-compose.prod.yml\n\u2514\u2500\u2500 docs/\n    \u251c\u2500\u2500 api_reference.md\n    \u251c\u2500\u2500 deployment_guide.md\n    \u2514\u2500\u2500 migration_aws.md\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#key-files-implementation","title":"Key Files Implementation","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#api_layerapiservicesjob_managerpy","title":"<code>/api_layer/api/services/job_manager.py</code>","text":"<pre><code>import asyncio\nimport uuid\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Optional, List\nfrom enum import Enum\nimport logging\n\nfrom ..models import TranslationJob, JobStatus\n\nlogger = logging.getLogger(__name__)\n\nclass JobManager:\n    \"\"\"Manages translation job lifecycle and status tracking\"\"\"\n\n    def __init__(self, cleanup_interval_minutes: int = 5, job_ttl_hours: int = 3):\n        self.jobs: Dict[str, TranslationJob] = {}\n        self.cleanup_interval = cleanup_interval_minutes * 60\n        self.job_ttl = timedelta(hours=job_ttl_hours)\n        self.cleanup_task: Optional[asyncio.Task] = None\n        self._lock = asyncio.Lock()\n\n    async def start(self):\n        \"\"\"Start background cleanup task\"\"\"\n        if not self.cleanup_task:\n            self.cleanup_task = asyncio.create_task(self._cleanup_loop())\n            logger.info(\"Job manager started with cleanup interval: %d minutes\",\n                       self.cleanup_interval // 60)\n\n    async def stop(self):\n        \"\"\"Stop background tasks\"\"\"\n        if self.cleanup_task:\n            self.cleanup_task.cancel()\n            try:\n                await self.cleanup_task\n            except asyncio.CancelledError:\n                pass\n            logger.info(\"Job manager stopped\")\n\n    async def create_job(self, job_data: Dict) -&gt; str:\n        \"\"\"Create new translation job\"\"\"\n        job_id = str(uuid.uuid4())\n\n        job = TranslationJob(\n            job_id=job_id,\n            status=JobStatus.PENDING,\n            created_at=datetime.utcnow(),\n            progress=0,\n            **job_data\n        )\n\n        async with self._lock:\n            self.jobs[job_id] = job\n\n        logger.info(f\"Created job {job_id} for file {job_data.get('filename')}\")\n        return job_id\n\n    async def get_job(self, job_id: str) -&gt; Optional[TranslationJob]:\n        \"\"\"Get job by ID\"\"\"\n        async with self._lock:\n            return self.jobs.get(job_id)\n\n    async def update_job_progress(self, job_id: str, progress: int, message: str = None):\n        \"\"\"Update job progress\"\"\"\n        async with self._lock:\n            if job_id in self.jobs:\n                self.jobs[job_id].progress = progress\n                if message:\n                    self.jobs[job_id].current_message = message\n                logger.debug(f\"Job {job_id}: {progress}% - {message}\")\n\n    async def update_job_status(\n        self,\n        job_id: str,\n        status: JobStatus,\n        error_message: str = None,\n        download_url: str = None\n    ):\n        \"\"\"Update job status\"\"\"\n        async with self._lock:\n            if job_id in self.jobs:\n                job = self.jobs[job_id]\n                job.status = status\n\n                if status in [JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED]:\n                    job.completed_at = datetime.utcnow()\n                    if job.created_at:\n                        job.duration_seconds = int(\n                            (job.completed_at - job.created_at).total_seconds()\n                        )\n\n                if error_message:\n                    job.error_message = error_message\n\n                if download_url:\n                    job.download_url = download_url\n\n                logger.info(f\"Job {job_id} status updated to {status.value}\")\n\n    async def cancel_job(self, job_id: str) -&gt; bool:\n        \"\"\"Cancel running job\"\"\"\n        async with self._lock:\n            if job_id in self.jobs:\n                job = self.jobs[job_id]\n                if job.status in [JobStatus.PENDING, JobStatus.PROCESSING]:\n                    job.status = JobStatus.CANCELLED\n                    job.completed_at = datetime.utcnow()\n                    logger.info(f\"Job {job_id} cancelled\")\n                    return True\n        return False\n\n    async def list_active_jobs(self) -&gt; List[TranslationJob]:\n        \"\"\"List all active (non-completed) jobs\"\"\"\n        async with self._lock:\n            return [\n                job for job in self.jobs.values()\n                if job.status in [JobStatus.PENDING, JobStatus.PROCESSING]\n            ]\n\n    async def _cleanup_loop(self):\n        \"\"\"Background cleanup of expired jobs\"\"\"\n        while True:\n            try:\n                await asyncio.sleep(self.cleanup_interval)\n                await self._cleanup_expired_jobs()\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                logger.error(f\"Cleanup error: {e}\")\n\n    async def _cleanup_expired_jobs(self):\n        \"\"\"Remove jobs older than TTL\"\"\"\n        cutoff_time = datetime.utcnow() - self.job_ttl\n        expired_jobs = []\n\n        async with self._lock:\n            for job_id, job in list(self.jobs.items()):\n                if (job.completed_at and job.completed_at &lt; cutoff_time) or \\\n                   (not job.completed_at and job.created_at &lt; cutoff_time):\n                    expired_jobs.append(job_id)\n                    del self.jobs[job_id]\n\n        if expired_jobs:\n            logger.info(f\"Cleaned up {len(expired_jobs)} expired jobs\")\n            # TODO: Cleanup associated files\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#api_layerapiservicestranslationpy","title":"<code>/api_layer/api/services/translation.py</code>","text":"<pre><code>import asyncio\nimport os\nimport tempfile\nimport shutil\nfrom concurrent.futures import ThreadPoolExecutor\nfrom typing import Dict, Any, Optional\nimport logging\n\nfrom book_maker.loader import BOOK_LOADER_DICT\nfrom book_maker.translator import MODEL_DICT\nfrom ..models import TranslationModel, JobStatus\nfrom .job_manager import JobManager\nfrom .progress import ProgressReporter\n\nlogger = logging.getLogger(__name__)\n\nclass TranslationService:\n    \"\"\"Async translation service using ThreadPoolExecutor\"\"\"\n\n    def __init__(self, max_workers: int = 4, timeout_minutes: int = 30):\n        self.executor = ThreadPoolExecutor(max_workers=max_workers)\n        self.timeout_seconds = timeout_minutes * 60\n        self.active_jobs: Dict[str, asyncio.Task] = {}\n\n    async def process_job(\n        self,\n        job_id: str,\n        input_path: str,\n        job_manager: JobManager,\n        **kwargs\n    ):\n        \"\"\"Process translation job asynchronously\"\"\"\n\n        progress_reporter = ProgressReporter(job_id, job_manager)\n\n        try:\n            # Update status to processing\n            await job_manager.update_job_status(job_id, JobStatus.PROCESSING)\n\n            # Start translation with timeout\n            task = asyncio.create_task(\n                self._translate_with_timeout(\n                    job_id, input_path, progress_reporter, **kwargs\n                )\n            )\n            self.active_jobs[job_id] = task\n\n            # Wait for completion or timeout\n            output_path = await asyncio.wait_for(task, timeout=self.timeout_seconds)\n\n            # Generate download URL (local file path for now)\n            download_url = f\"/download/{job_id}\"\n\n            await job_manager.update_job_status(\n                job_id,\n                JobStatus.COMPLETED,\n                download_url=download_url\n            )\n\n            logger.info(f\"Job {job_id} completed successfully\")\n\n        except asyncio.TimeoutError:\n            await job_manager.update_job_status(\n                job_id,\n                JobStatus.FAILED,\n                error_message=f\"Translation timeout after {self.timeout_seconds // 60} minutes\"\n            )\n            logger.error(f\"Job {job_id} timed out\")\n\n        except Exception as e:\n            await job_manager.update_job_status(\n                job_id,\n                JobStatus.FAILED,\n                error_message=str(e)\n            )\n            logger.error(f\"Job {job_id} failed: {e}\")\n\n        finally:\n            self.active_jobs.pop(job_id, None)\n\n    async def _translate_with_timeout(\n        self,\n        job_id: str,\n        input_path: str,\n        progress_reporter: ProgressReporter,\n        **kwargs\n    ) -&gt; str:\n        \"\"\"Execute translation in thread pool with progress reporting\"\"\"\n\n        loop = asyncio.get_event_loop()\n\n        # Run translation in executor to avoid blocking\n        output_path = await loop.run_in_executor(\n            self.executor,\n            self._translate_sync,\n            job_id,\n            input_path,\n            progress_reporter,\n            kwargs\n        )\n\n        return output_path\n\n    def _translate_sync(\n        self,\n        job_id: str,\n        input_path: str,\n        progress_reporter: ProgressReporter,\n        kwargs: Dict[str, Any]\n    ) -&gt; str:\n        \"\"\"Synchronous translation with progress callbacks\"\"\"\n\n        try:\n            # Extract parameters\n            target_language = kwargs['target_language']\n            model = kwargs['model']\n            api_keys = kwargs.get('api_keys', {})\n            single_translate = kwargs.get('single_translate', False)\n            test_mode = kwargs.get('test_mode', False)\n            test_num = kwargs.get('test_num', 10)\n            temperature = kwargs.get('temperature', 1.0)\n\n            # Get translator class\n            translate_model_class = MODEL_DICT.get(model.value)\n            if not translate_model_class:\n                raise ValueError(f\"Unsupported model: {model}\")\n\n            # Get API key for model\n            api_key = self._get_api_key_for_model(model, api_keys)\n\n            # Create translator instance\n            translator = translate_model_class(\n                api_key,\n                target_language,\n                temperature=temperature\n            )\n\n            # Get book loader\n            file_ext = os.path.splitext(input_path)[1][1:]  # Remove dot\n            loader_class = BOOK_LOADER_DICT.get(file_ext)\n            if not loader_class:\n                raise ValueError(f\"Unsupported file type: {file_ext}\")\n\n            # Create enhanced loader with progress reporting\n            loader = loader_class(\n                input_path,\n                translator,\n                api_key,\n                resume=False,\n                language=target_language,\n                is_test=test_mode,\n                test_num=test_num,\n                single_translate=single_translate\n            )\n\n            # Monkey patch progress reporting\n            original_translate = loader.translate_model.translate\n\n            def translate_with_progress(text, *args, **kwargs):\n                # This is a simplified progress hook\n                # In practice, you'd need to modify the loaders more extensively\n                result = original_translate(text, *args, **kwargs)\n                # Progress reporting would happen here based on loader state\n                return result\n\n            loader.translate_model.translate = translate_with_progress\n\n            # Report initial progress\n            asyncio.run_coroutine_threadsafe(\n                progress_reporter.update_progress(10, \"Starting translation\"),\n                asyncio.get_event_loop()\n            )\n\n            # Perform translation\n            loader.make_bilingual_book()\n\n            # Report completion\n            asyncio.run_coroutine_threadsafe(\n                progress_reporter.update_progress(100, \"Translation completed\"),\n                asyncio.get_event_loop()\n            )\n\n            # Generate output path\n            base_name = os.path.splitext(os.path.basename(input_path))[0]\n            if single_translate:\n                output_filename = f\"{base_name}_{target_language}.epub\"\n            else:\n                output_filename = f\"{base_name}_bilingual.epub\"\n\n            # The loader should have created the output file\n            # This is a simplification - actual implementation would need\n            # to be coordinated with the existing loader code\n            output_dir = os.path.dirname(input_path)\n            output_path = os.path.join(output_dir, output_filename)\n\n            if not os.path.exists(output_path):\n                raise RuntimeError(\"Translation completed but output file not found\")\n\n            return output_path\n\n        except Exception as e:\n            # Report error through progress reporter\n            asyncio.run_coroutine_threadsafe(\n                progress_reporter.set_status(JobStatus.FAILED, str(e)),\n                asyncio.get_event_loop()\n            )\n            raise\n\n    def _get_api_key_for_model(self, model: TranslationModel, api_keys: Dict[str, str]) -&gt; str:\n        \"\"\"Get appropriate API key for the specified model\"\"\"\n\n        key_mapping = {\n            'chatgptapi': 'openai_key',\n            'gpt4': 'openai_key',\n            'gpt4omini': 'openai_key',\n            'gpt4o': 'openai_key',\n            'claude': 'claude_key',\n            'claude-3-opus': 'claude_key',\n            'claude-3-sonnet': 'claude_key',\n            'claude-3-haiku': 'claude_key',\n            'gemini': 'gemini_key',\n            'geminipro': 'gemini_key',\n            'deepl': 'deepl_key',\n            'groq': 'groq_key',\n            'xai': 'xai_key',\n            'qwen': 'qwen_key'\n        }\n\n        key_name = key_mapping.get(model.value)\n        if not key_name:\n            raise ValueError(f\"No API key mapping for model: {model}\")\n\n        api_key = api_keys.get(key_name)\n        if not api_key:\n            # Try environment variables\n            env_key = f\"BBM_{key_name.upper()}\"\n            api_key = os.environ.get(env_key)\n\n        if not api_key:\n            raise ValueError(f\"API key required for model {model}: {key_name}\")\n\n        return api_key\n\n    async def cancel_job(self, job_id: str) -&gt; bool:\n        \"\"\"Cancel active translation job\"\"\"\n        task = self.active_jobs.get(job_id)\n        if task and not task.done():\n            task.cancel()\n            try:\n                await task\n            except asyncio.CancelledError:\n                pass\n            logger.info(f\"Cancelled job {job_id}\")\n            return True\n        return False\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#development-workflow","title":"Development Workflow","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#local-development-setup","title":"Local Development Setup","text":"<pre><code># 1. Environment Setup\ncd bilingual_book_maker\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\npip install -r api_layer/requirements.txt\n\n# 2. Configuration\nexport BBM_OPENAI_API_KEY=\"your-openai-key\"\nexport BBM_CLAUDE_API_KEY=\"your-claude-key\"\nexport LOG_LEVEL=\"DEBUG\"\nexport STORAGE_MODE=\"local\"\n\n# 3. Start Development Server\ncd api_layer\npython -m uvicorn api.main:app --reload --host 127.0.0.1 --port 8000\n\n# 4. Test API\ncurl -X GET http://localhost:8000/health\ncurl -X GET http://localhost:8000/models\ncurl -X GET http://localhost:8000/languages\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#development-testing-workflow","title":"Development Testing Workflow","text":"<pre><code># Unit Tests\npython -m pytest api_layer/tests/test_services.py -v\n\n# Integration Tests\npython -m pytest api_layer/tests/test_integration.py -v\n\n# Load Testing (with small files)\npython api_layer/scripts/load_test.py --concurrent-jobs 5 --test-file test_books/small.epub\n\n# Manual API Testing\npython api_layer/scripts/test_api.py\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#test-api-script-example","title":"Test API Script Example","text":"<pre><code># api_layer/scripts/test_api.py\nimport asyncio\nimport aiohttp\nimport time\n\nasync def test_translation_flow():\n    \"\"\"Test complete translation workflow\"\"\"\n\n    async with aiohttp.ClientSession() as session:\n        # 1. Upload file and start translation\n        with open('test_books/small.epub', 'rb') as f:\n            data = aiohttp.FormData()\n            data.add_field('file', f, filename='test.epub')\n            data.add_field('target_language', 'zh')\n            data.add_field('model', 'chatgptapi')\n            data.add_field('test_mode', 'true')\n\n            async with session.post(\n                'http://localhost:8000/translate',\n                data=data\n            ) as resp:\n                result = await resp.json()\n                job_id = result['job_id']\n                print(f\"Started job: {job_id}\")\n\n        # 2. Poll for completion\n        while True:\n            async with session.get(f'http://localhost:8000/status/{job_id}') as resp:\n                status = await resp.json()\n                print(f\"Status: {status['status']} ({status['progress']}%)\")\n\n                if status['status'] == 'completed':\n                    break\n                elif status['status'] == 'failed':\n                    print(f\"Job failed: {status['error_message']}\")\n                    return\n\n            await asyncio.sleep(2)\n\n        # 3. Download result\n        async with session.get(f'http://localhost:8000/download/{job_id}') as resp:\n            if resp.status == 200:\n                with open('output.epub', 'wb') as f:\n                    f.write(await resp.read())\n                print(\"Downloaded translated file\")\n            else:\n                print(f\"Download failed: {resp.status}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test_translation_flow())\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#testing-strategy","title":"Testing Strategy","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#test-categories","title":"Test Categories","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#1-unit-tests","title":"1. Unit Tests","text":"<pre><code># api_layer/tests/test_job_manager.py\nimport pytest\nimport asyncio\nfrom datetime import datetime, timedelta\n\nfrom api.services.job_manager import JobManager\nfrom api.models import JobStatus\n\n@pytest.mark.asyncio\nasync def test_job_creation():\n    \"\"\"Test basic job creation and retrieval\"\"\"\n    manager = JobManager()\n\n    job_id = await manager.create_job({\n        'filename': 'test.epub',\n        'target_language': 'zh',\n        'model': 'chatgptapi'\n    })\n\n    assert job_id is not None\n\n    job = await manager.get_job(job_id)\n    assert job is not None\n    assert job.filename == 'test.epub'\n    assert job.status == JobStatus.PENDING\n\n@pytest.mark.asyncio\nasync def test_progress_updates():\n    \"\"\"Test progress reporting\"\"\"\n    manager = JobManager()\n    job_id = await manager.create_job({'filename': 'test.epub'})\n\n    await manager.update_job_progress(job_id, 50, \"Half complete\")\n\n    job = await manager.get_job(job_id)\n    assert job.progress == 50\n\n@pytest.mark.asyncio\nasync def test_job_cleanup():\n    \"\"\"Test automatic job cleanup\"\"\"\n    manager = JobManager(job_ttl_hours=0.001)  # 3.6 seconds TTL\n\n    job_id = await manager.create_job({'filename': 'test.epub'})\n    await manager.update_job_status(job_id, JobStatus.COMPLETED)\n\n    # Manually trigger cleanup\n    await manager._cleanup_expired_jobs()\n\n    job = await manager.get_job(job_id)\n    assert job is None\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#2-integration-tests","title":"2. Integration Tests","text":"<pre><code># api_layer/tests/test_integration.py\nimport pytest\nimport asyncio\nfrom httpx import AsyncClient\nfrom fastapi.testclient import TestClient\n\nfrom api.main import app\n\n@pytest.mark.asyncio\nasync def test_full_translation_workflow():\n    \"\"\"Test complete translation workflow\"\"\"\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        # Test file upload\n        with open('test_books/small.epub', 'rb') as f:\n            response = await client.post(\n                '/translate',\n                files={'file': ('test.epub', f, 'application/epub+zip')},\n                data={\n                    'target_language': 'zh',\n                    'model': 'chatgptapi',\n                    'test_mode': True\n                }\n            )\n\n        assert response.status_code == 200\n        result = response.json()\n        job_id = result['job_id']\n\n        # Poll for completion (with timeout)\n        max_wait = 60  # seconds\n        start_time = time.time()\n\n        while time.time() - start_time &lt; max_wait:\n            response = await client.get(f'/status/{job_id}')\n            status = response.json()\n\n            if status['status'] == 'completed':\n                break\n            elif status['status'] == 'failed':\n                pytest.fail(f\"Translation failed: {status['error_message']}\")\n\n            await asyncio.sleep(1)\n        else:\n            pytest.fail(\"Translation timed out\")\n\n        # Test download\n        response = await client.get(f'/download/{job_id}')\n        assert response.status_code == 200\n        assert len(response.content) &gt; 0\n\n@pytest.mark.asyncio\nasync def test_concurrent_translations():\n    \"\"\"Test multiple concurrent translations\"\"\"\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        jobs = []\n\n        # Start 3 concurrent jobs\n        for i in range(3):\n            with open('test_books/small.epub', 'rb') as f:\n                response = await client.post(\n                    '/translate',\n                    files={'file': (f'test_{i}.epub', f, 'application/epub+zip')},\n                    data={\n                        'target_language': 'zh',\n                        'model': 'chatgptapi',\n                        'test_mode': True\n                    }\n                )\n            jobs.append(response.json()['job_id'])\n\n        # Wait for all to complete\n        completed = 0\n        max_wait = 120\n        start_time = time.time()\n\n        while completed &lt; 3 and time.time() - start_time &lt; max_wait:\n            for job_id in jobs:\n                response = await client.get(f'/status/{job_id}')\n                status = response.json()\n                if status['status'] == 'completed':\n                    completed += 1\n\n            await asyncio.sleep(2)\n\n        assert completed == 3, f\"Only {completed}/3 jobs completed\"\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#3-load-tests","title":"3. Load Tests","text":"<pre><code># api_layer/scripts/load_test.py\nimport asyncio\nimport aiohttp\nimport time\nimport argparse\nfrom typing import List\n\nclass LoadTester:\n    def __init__(self, base_url: str = \"http://localhost:8000\"):\n        self.base_url = base_url\n        self.results = []\n\n    async def single_translation_test(self, session: aiohttp.ClientSession, test_id: int):\n        \"\"\"Run single translation and measure time\"\"\"\n        start_time = time.time()\n\n        try:\n            # Upload file\n            with open('test_books/small.epub', 'rb') as f:\n                data = aiohttp.FormData()\n                data.add_field('file', f, filename=f'test_{test_id}.epub')\n                data.add_field('target_language', 'zh')\n                data.add_field('model', 'chatgptapi')\n                data.add_field('test_mode', 'true')\n\n                async with session.post(f'{self.base_url}/translate', data=data) as resp:\n                    if resp.status != 200:\n                        raise Exception(f\"Upload failed: {resp.status}\")\n                    result = await resp.json()\n                    job_id = result['job_id']\n\n            # Poll for completion\n            while True:\n                async with session.get(f'{self.base_url}/status/{job_id}') as resp:\n                    status = await resp.json()\n                    if status['status'] == 'completed':\n                        break\n                    elif status['status'] == 'failed':\n                        raise Exception(f\"Translation failed: {status['error_message']}\")\n                await asyncio.sleep(1)\n\n            duration = time.time() - start_time\n            self.results.append({\n                'test_id': test_id,\n                'duration': duration,\n                'status': 'success'\n            })\n\n        except Exception as e:\n            duration = time.time() - start_time\n            self.results.append({\n                'test_id': test_id,\n                'duration': duration,\n                'status': 'failed',\n                'error': str(e)\n            })\n\n    async def run_load_test(self, concurrent_jobs: int = 5, total_jobs: int = 20):\n        \"\"\"Run load test with specified parameters\"\"\"\n        print(f\"Starting load test: {concurrent_jobs} concurrent, {total_jobs} total\")\n\n        connector = aiohttp.TCPConnector(limit=concurrent_jobs * 2)\n        timeout = aiohttp.ClientTimeout(total=300)  # 5 minute timeout\n\n        async with aiohttp.ClientSession(\n            connector=connector,\n            timeout=timeout\n        ) as session:\n\n            # Create semaphore to limit concurrency\n            semaphore = asyncio.Semaphore(concurrent_jobs)\n\n            async def run_with_semaphore(test_id):\n                async with semaphore:\n                    await self.single_translation_test(session, test_id)\n\n            # Run all tests\n            tasks = [run_with_semaphore(i) for i in range(total_jobs)]\n            await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Print results\n        self.print_results()\n\n    def print_results(self):\n        \"\"\"Print load test results\"\"\"\n        successful = [r for r in self.results if r['status'] == 'success']\n        failed = [r for r in self.results if r['status'] == 'failed']\n\n        print(f\"\\n{'='*50}\")\n        print(f\"LOAD TEST RESULTS\")\n        print(f\"{'='*50}\")\n        print(f\"Total jobs: {len(self.results)}\")\n        print(f\"Successful: {len(successful)}\")\n        print(f\"Failed: {len(failed)}\")\n        print(f\"Success rate: {len(successful)/len(self.results)*100:.1f}%\")\n\n        if successful:\n            durations = [r['duration'] for r in successful]\n            print(f\"\\nTiming Statistics:\")\n            print(f\"  Average: {sum(durations)/len(durations):.2f}s\")\n            print(f\"  Min: {min(durations):.2f}s\")\n            print(f\"  Max: {max(durations):.2f}s\")\n\n        if failed:\n            print(f\"\\nFailures:\")\n            for fail in failed:\n                print(f\"  Job {fail['test_id']}: {fail['error']}\")\n\nasync def main():\n    parser = argparse.ArgumentParser(description='Load test the translation API')\n    parser.add_argument('--concurrent-jobs', type=int, default=5,\n                       help='Number of concurrent jobs')\n    parser.add_argument('--total-jobs', type=int, default=20,\n                       help='Total number of jobs to run')\n    parser.add_argument('--base-url', type=str, default='http://localhost:8000',\n                       help='API base URL')\n\n    args = parser.parse_args()\n\n    tester = LoadTester(args.base_url)\n    await tester.run_load_test(args.concurrent_jobs, args.total_jobs)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#migration-path-to-aws","title":"Migration Path to AWS","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#architecture-evolution","title":"Architecture Evolution","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-1-local-async-current-implementation","title":"Phase 1: Local Async (Current Implementation)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   FastAPI   \u2502    \u2502 In-Memory   \u2502    \u2502   Local     \u2502\n\u2502   Server    \u2502\u2500\u2500\u2500\u2500\u2502 Job Store   \u2502\u2500\u2500\u2500\u2500\u2502 File System \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-2-aws-ready-with-local-fallback","title":"Phase 2: AWS-Ready with Local Fallback","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   FastAPI   \u2502    \u2502 Pluggable   \u2502    \u2502 Pluggable   \u2502\n\u2502   Server    \u2502\u2500\u2500\u2500\u2500\u2502 Job Store   \u2502\u2500\u2500\u2500\u2500\u2502 Storage     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502                    \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Memory  \u2502        \u2502   Local   \u2502\n                    \u2502   or    \u2502        \u2502    or     \u2502\n                    \u2502DynamoDB \u2502        \u2502    S3     \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#phase-3-full-aws-fargate-deployment","title":"Phase 3: Full AWS Fargate Deployment","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  ALB/API    \u2502    \u2502   Fargate   \u2502    \u2502  DynamoDB   \u2502    \u2502     S3      \u2502\n\u2502  Gateway    \u2502\u2500\u2500\u2500\u2500\u2502   Service   \u2502\u2500\u2500\u2500\u2500\u2502 Job Store   \u2502\u2500\u2500\u2500\u2500\u2502   Storage   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n                    \u2502 CloudWatch\u2502\n                    \u2502 Monitoring \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#implementation-abstractions","title":"Implementation Abstractions","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#storage-abstraction","title":"Storage Abstraction","text":"<pre><code># api_layer/api/services/storage.py\nfrom abc import ABC, abstractmethod\nfrom typing import Optional\nimport os\nimport boto3\nfrom fastapi import UploadFile\n\nclass StorageInterface(ABC):\n    @abstractmethod\n    async def save_upload(self, job_id: str, file: UploadFile) -&gt; str:\n        \"\"\"Save uploaded file and return local path\"\"\"\n        pass\n\n    @abstractmethod\n    async def save_result(self, job_id: str, file_path: str) -&gt; str:\n        \"\"\"Save result file and return storage path\"\"\"\n        pass\n\n    @abstractmethod\n    async def get_download_url(self, job_id: str) -&gt; Optional[str]:\n        \"\"\"Get download URL for result file\"\"\"\n        pass\n\n    @abstractmethod\n    async def cleanup_job_files(self, job_id: str):\n        \"\"\"Cleanup all files for a job\"\"\"\n        pass\n\nclass LocalFileStorage(StorageInterface):\n    def __init__(self, base_path: str = \"./temp\"):\n        self.base_path = Path(base_path)\n        self.base_path.mkdir(exist_ok=True)\n\n    async def save_upload(self, job_id: str, file: UploadFile) -&gt; str:\n        job_dir = self.base_path / job_id\n        job_dir.mkdir(exist_ok=True)\n\n        file_path = job_dir / file.filename\n        with open(file_path, 'wb') as f:\n            content = await file.read()\n            f.write(content)\n\n        return str(file_path)\n\n    async def save_result(self, job_id: str, file_path: str) -&gt; str:\n        # For local storage, file is already in the right place\n        return file_path\n\n    async def get_download_url(self, job_id: str) -&gt; Optional[str]:\n        # Return API endpoint for local download\n        return f\"/download/{job_id}\"\n\n    async def cleanup_job_files(self, job_id: str):\n        job_dir = self.base_path / job_id\n        if job_dir.exists():\n            shutil.rmtree(job_dir)\n\nclass S3Storage(StorageInterface):\n    def __init__(self, bucket_name: str, region: str = \"us-east-1\"):\n        self.bucket_name = bucket_name\n        self.s3_client = boto3.client('s3', region_name=region)\n\n    async def save_upload(self, job_id: str, file: UploadFile) -&gt; str:\n        # Save to local temp first for processing\n        temp_path = f\"/tmp/{job_id}_{file.filename}\"\n        with open(temp_path, 'wb') as f:\n            content = await file.read()\n            f.write(content)\n\n        # Also upload to S3 for backup\n        s3_key = f\"uploads/{job_id}/{file.filename}\"\n        self.s3_client.upload_file(temp_path, self.bucket_name, s3_key)\n\n        return temp_path\n\n    async def save_result(self, job_id: str, file_path: str) -&gt; str:\n        filename = os.path.basename(file_path)\n        s3_key = f\"results/{job_id}/{filename}\"\n\n        self.s3_client.upload_file(file_path, self.bucket_name, s3_key)\n        return s3_key\n\n    async def get_download_url(self, job_id: str) -&gt; Optional[str]:\n        # Generate presigned URL for S3 download\n        s3_key = f\"results/{job_id}/\"\n\n        # Find the result file in S3\n        response = self.s3_client.list_objects_v2(\n            Bucket=self.bucket_name,\n            Prefix=s3_key\n        )\n\n        if 'Contents' not in response:\n            return None\n\n        # Get first result file\n        file_key = response['Contents'][0]['Key']\n\n        return self.s3_client.generate_presigned_url(\n            'get_object',\n            Params={'Bucket': self.bucket_name, 'Key': file_key},\n            ExpiresIn=3600  # 1 hour\n        )\n\n    async def cleanup_job_files(self, job_id: str):\n        # Delete all files for this job\n        prefixes = [f\"uploads/{job_id}/\", f\"results/{job_id}/\"]\n\n        for prefix in prefixes:\n            response = self.s3_client.list_objects_v2(\n                Bucket=self.bucket_name,\n                Prefix=prefix\n            )\n\n            if 'Contents' in response:\n                objects = [{'Key': obj['Key']} for obj in response['Contents']]\n                self.s3_client.delete_objects(\n                    Bucket=self.bucket_name,\n                    Delete={'Objects': objects}\n                )\n\nclass StorageFactory:\n    @staticmethod\n    def get_storage() -&gt; StorageInterface:\n        storage_mode = os.environ.get('STORAGE_MODE', 'local')\n\n        if storage_mode == 'local':\n            return LocalFileStorage()\n        elif storage_mode == 's3':\n            bucket_name = os.environ.get('S3_BUCKET_NAME')\n            if not bucket_name:\n                raise ValueError(\"S3_BUCKET_NAME required for S3 storage\")\n            return S3Storage(bucket_name)\n        else:\n            raise ValueError(f\"Unknown storage mode: {storage_mode}\")\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#job-store-abstraction","title":"Job Store Abstraction","text":"<pre><code># api_layer/api/services/job_store.py\nfrom abc import ABC, abstractmethod\nfrom typing import Dict, List, Optional\nimport json\nimport boto3\nfrom datetime import datetime\n\nfrom ..models import TranslationJob, JobStatus\n\nclass JobStoreInterface(ABC):\n    @abstractmethod\n    async def save_job(self, job: TranslationJob):\n        pass\n\n    @abstractmethod\n    async def get_job(self, job_id: str) -&gt; Optional[TranslationJob]:\n        pass\n\n    @abstractmethod\n    async def update_job_status(\n        self,\n        job_id: str,\n        status: JobStatus,\n        **kwargs\n    ):\n        pass\n\n    @abstractmethod\n    async def list_active_jobs(self) -&gt; List[TranslationJob]:\n        pass\n\n    @abstractmethod\n    async def delete_job(self, job_id: str):\n        pass\n\nclass InMemoryJobStore(JobStoreInterface):\n    def __init__(self):\n        self.jobs: Dict[str, TranslationJob] = {}\n\n    async def save_job(self, job: TranslationJob):\n        self.jobs[job.job_id] = job\n\n    async def get_job(self, job_id: str) -&gt; Optional[TranslationJob]:\n        return self.jobs.get(job_id)\n\n    async def update_job_status(self, job_id: str, status: JobStatus, **kwargs):\n        if job_id in self.jobs:\n            job = self.jobs[job_id]\n            job.status = status\n            for key, value in kwargs.items():\n                if hasattr(job, key):\n                    setattr(job, key, value)\n\n    async def list_active_jobs(self) -&gt; List[TranslationJob]:\n        return [\n            job for job in self.jobs.values()\n            if job.status in [JobStatus.PENDING, JobStatus.PROCESSING]\n        ]\n\n    async def delete_job(self, job_id: str):\n        self.jobs.pop(job_id, None)\n\nclass DynamoDBJobStore(JobStoreInterface):\n    def __init__(self, table_name: str, region: str = \"us-east-1\"):\n        self.table_name = table_name\n        self.dynamodb = boto3.resource('dynamodb', region_name=region)\n        self.table = self.dynamodb.Table(table_name)\n\n    async def save_job(self, job: TranslationJob):\n        item = job.dict()\n        # Convert datetime to ISO string\n        for field in ['created_at', 'completed_at']:\n            if item.get(field):\n                item[field] = item[field].isoformat()\n\n        self.table.put_item(Item=item)\n\n    async def get_job(self, job_id: str) -&gt; Optional[TranslationJob]:\n        response = self.table.get_item(Key={'job_id': job_id})\n\n        if 'Item' not in response:\n            return None\n\n        item = response['Item']\n\n        # Convert ISO strings back to datetime\n        for field in ['created_at', 'completed_at']:\n            if item.get(field):\n                item[field] = datetime.fromisoformat(item[field])\n\n        return TranslationJob(**item)\n\n    async def update_job_status(self, job_id: str, status: JobStatus, **kwargs):\n        update_expression = \"SET job_status = :status\"\n        expression_values = {':status': status.value}\n\n        # Add other fields to update\n        for key, value in kwargs.items():\n            if key in ['progress', 'error_message', 'download_url', 'completed_at']:\n                update_expression += f\", {key} = :{key}\"\n                if isinstance(value, datetime):\n                    value = value.isoformat()\n                expression_values[f':{key}'] = value\n\n        self.table.update_item(\n            Key={'job_id': job_id},\n            UpdateExpression=update_expression,\n            ExpressionAttributeValues=expression_values\n        )\n\n    async def list_active_jobs(self) -&gt; List[TranslationJob]:\n        # This would require a GSI on status in production\n        response = self.table.scan(\n            FilterExpression='job_status IN (:pending, :processing)',\n            ExpressionAttributeValues={\n                ':pending': JobStatus.PENDING.value,\n                ':processing': JobStatus.PROCESSING.value\n            }\n        )\n\n        jobs = []\n        for item in response['Items']:\n            # Convert ISO strings back to datetime\n            for field in ['created_at', 'completed_at']:\n                if item.get(field):\n                    item[field] = datetime.fromisoformat(item[field])\n            jobs.append(TranslationJob(**item))\n\n        return jobs\n\n    async def delete_job(self, job_id: str):\n        self.table.delete_item(Key={'job_id': job_id})\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#aws-fargate-deployment-configuration","title":"AWS Fargate Deployment Configuration","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#terraform-infrastructure","title":"Terraform Infrastructure","text":"<pre><code># terraform/main.tf\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# VPC and Networking\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = \"epub-translator-vpc\"\n  }\n}\n\nresource \"aws_subnet\" \"private\" {\n  count             = 2\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = \"10.0.${count.index + 1}.0/24\"\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n\n  tags = {\n    Name = \"epub-translator-private-${count.index + 1}\"\n  }\n}\n\nresource \"aws_subnet\" \"public\" {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = \"10.0.${count.index + 10}.0/24\"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"epub-translator-public-${count.index + 1}\"\n  }\n}\n\n# ECS Cluster\nresource \"aws_ecs_cluster\" \"main\" {\n  name = \"epub-translator\"\n\n  setting {\n    name  = \"containerInsights\"\n    value = \"enabled\"\n  }\n}\n\n# ECS Task Definition\nresource \"aws_ecs_task_definition\" \"app\" {\n  family                   = \"epub-translator\"\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  cpu                      = 1024\n  memory                   = 2048\n  execution_role_arn       = aws_iam_role.ecs_execution_role.arn\n  task_role_arn           = aws_iam_role.ecs_task_role.arn\n\n  container_definitions = jsonencode([\n    {\n      name  = \"epub-translator\"\n      image = \"${aws_ecr_repository.app.repository_url}:latest\"\n\n      environment = [\n        {\n          name  = \"STORAGE_MODE\"\n          value = \"s3\"\n        },\n        {\n          name  = \"S3_BUCKET_NAME\"\n          value = aws_s3_bucket.main.id\n        },\n        {\n          name  = \"DYNAMODB_TABLE_NAME\"\n          value = aws_dynamodb_table.jobs.name\n        },\n        {\n          name  = \"AWS_REGION\"\n          value = var.aws_region\n        }\n      ]\n\n      secrets = [\n        {\n          name      = \"BBM_OPENAI_API_KEY\"\n          valueFrom = aws_ssm_parameter.openai_key.arn\n        },\n        {\n          name      = \"BBM_CLAUDE_API_KEY\"\n          valueFrom = aws_ssm_parameter.claude_key.arn\n        }\n      ]\n\n      portMappings = [\n        {\n          containerPort = 8000\n          protocol      = \"tcp\"\n        }\n      ]\n\n      logConfiguration = {\n        logDriver = \"awslogs\"\n        options = {\n          awslogs-group         = aws_cloudwatch_log_group.app.name\n          awslogs-region        = var.aws_region\n          awslogs-stream-prefix = \"ecs\"\n        }\n      }\n\n      healthCheck = {\n        command = [\"CMD-SHELL\", \"curl -f http://localhost:8000/health || exit 1\"]\n        interval = 30\n        timeout = 5\n        retries = 3\n      }\n    }\n  ])\n}\n\n# ECS Service\nresource \"aws_ecs_service\" \"main\" {\n  name            = \"epub-translator\"\n  cluster         = aws_ecs_cluster.main.id\n  task_definition = aws_ecs_task_definition.app.arn\n  desired_count   = 2\n  launch_type     = \"FARGATE\"\n\n  network_configuration {\n    security_groups  = [aws_security_group.ecs_tasks.id]\n    subnets         = aws_subnet.private[*].id\n    assign_public_ip = false\n  }\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.app.arn\n    container_name   = \"epub-translator\"\n    container_port   = 8000\n  }\n\n  depends_on = [aws_lb_listener.app]\n}\n\n# S3 Bucket for file storage\nresource \"aws_s3_bucket\" \"main\" {\n  bucket = \"epub-translator-${random_string.bucket_suffix.result}\"\n}\n\nresource \"aws_s3_bucket_lifecycle_configuration\" \"main\" {\n  bucket = aws_s3_bucket.main.id\n\n  rule {\n    id     = \"cleanup_old_files\"\n    status = \"Enabled\"\n\n    expiration {\n      days = 7  # Delete files after 7 days\n    }\n  }\n}\n\n# DynamoDB table for job storage\nresource \"aws_dynamodb_table\" \"jobs\" {\n  name           = \"epub-translator-jobs\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"job_id\"\n\n  attribute {\n    name = \"job_id\"\n    type = \"S\"\n  }\n\n  attribute {\n    name = \"status\"\n    type = \"S\"\n  }\n\n  global_secondary_index {\n    name     = \"status-index\"\n    hash_key = \"status\"\n  }\n\n  ttl {\n    attribute_name = \"ttl\"\n    enabled        = true\n  }\n\n  tags = {\n    Name = \"epub-translator-jobs\"\n  }\n}\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#migration-steps","title":"Migration Steps","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#step-1-environment-based-configuration","title":"Step 1: Environment-Based Configuration","text":"<pre><code># api_layer/api/config.py (Enhanced)\nimport os\nfrom typing import List, Optional\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    # Basic settings\n    api_host: str = \"0.0.0.0\"\n    api_port: int = 8000\n    log_level: str = \"INFO\"\n\n    # Storage configuration\n    storage_mode: str = \"local\"  # local, s3\n    local_storage_path: str = \"./temp\"\n    s3_bucket_name: Optional[str] = None\n    aws_region: str = \"us-east-1\"\n\n    # Job store configuration\n    job_store_mode: str = \"memory\"  # memory, dynamodb\n    dynamodb_table_name: Optional[str] = None\n    job_ttl_hours: int = 3\n\n    # Processing configuration\n    max_workers: int = 4\n    translation_timeout_minutes: int = 30\n    max_file_size_mb: int = 100\n    max_concurrent_jobs: int = 10\n\n    # AWS-specific settings\n    ecs_cluster_name: Optional[str] = None\n    cloudwatch_log_group: Optional[str] = None\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n\n    def is_aws_environment(self) -&gt; bool:\n        \"\"\"Check if running in AWS environment\"\"\"\n        return self.storage_mode == \"s3\" or self.job_store_mode == \"dynamodb\"\n\n    def get_storage_config(self) -&gt; dict:\n        \"\"\"Get storage configuration based on mode\"\"\"\n        if self.storage_mode == \"local\":\n            return {\"base_path\": self.local_storage_path}\n        elif self.storage_mode == \"s3\":\n            return {\n                \"bucket_name\": self.s3_bucket_name,\n                \"region\": self.aws_region\n            }\n        else:\n            raise ValueError(f\"Unknown storage mode: {self.storage_mode}\")\n\n    def get_job_store_config(self) -&gt; dict:\n        \"\"\"Get job store configuration based on mode\"\"\"\n        if self.job_store_mode == \"memory\":\n            return {}\n        elif self.job_store_mode == \"dynamodb\":\n            return {\n                \"table_name\": self.dynamodb_table_name,\n                \"region\": self.aws_region\n            }\n        else:\n            raise ValueError(f\"Unknown job store mode: {self.job_store_mode}\")\n\nsettings = Settings()\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#step-2-factory-pattern-for-services","title":"Step 2: Factory Pattern for Services","text":"<pre><code># api_layer/api/dependencies.py\nfrom functools import lru_cache\nfrom .config import settings\nfrom .services.storage import StorageInterface, LocalFileStorage, S3Storage\nfrom .services.job_store import JobStoreInterface, InMemoryJobStore, DynamoDBJobStore\n\n@lru_cache()\ndef get_storage() -&gt; StorageInterface:\n    \"\"\"Get storage implementation based on configuration\"\"\"\n    if settings.storage_mode == \"local\":\n        return LocalFileStorage(**settings.get_storage_config())\n    elif settings.storage_mode == \"s3\":\n        return S3Storage(**settings.get_storage_config())\n    else:\n        raise ValueError(f\"Unknown storage mode: {settings.storage_mode}\")\n\n@lru_cache()\ndef get_job_store() -&gt; JobStoreInterface:\n    \"\"\"Get job store implementation based on configuration\"\"\"\n    if settings.job_store_mode == \"memory\":\n        return InMemoryJobStore(**settings.get_job_store_config())\n    elif settings.job_store_mode == \"dynamodb\":\n        return DynamoDBJobStore(**settings.get_job_store_config())\n    else:\n        raise ValueError(f\"Unknown job store mode: {settings.job_store_mode}\")\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#step-3-environment-configuration-files","title":"Step 3: Environment Configuration Files","text":"<pre><code># .env.local (Local development)\nSTORAGE_MODE=local\nJOB_STORE_MODE=memory\nLOCAL_STORAGE_PATH=./temp\nLOG_LEVEL=DEBUG\nMAX_WORKERS=2\n</code></pre> <pre><code># .env.aws (AWS Fargate)\nSTORAGE_MODE=s3\nJOB_STORE_MODE=dynamodb\nS3_BUCKET_NAME=epub-translator-production\nDYNAMODB_TABLE_NAME=epub-translator-jobs\nAWS_REGION=us-east-1\nLOG_LEVEL=INFO\nMAX_WORKERS=4\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#step-4-deployment-pipeline","title":"Step 4: Deployment Pipeline","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to AWS\n\non:\n  push:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-east-1\n\n    - name: Login to Amazon ECR\n      id: login-ecr\n      uses: aws-actions/amazon-ecr-login@v1\n\n    - name: Build and push Docker image\n      env:\n        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n        ECR_REPOSITORY: epub-translator\n        IMAGE_TAG: ${{ github.sha }}\n      run: |\n        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest\n        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest\n\n    - name: Deploy to ECS\n      run: |\n        aws ecs update-service \\\n          --cluster epub-translator \\\n          --service epub-translator \\\n          --force-new-deployment\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#capacity-planning","title":"Capacity Planning","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#local-development-capacity","title":"Local Development Capacity","text":"<ul> <li>Target: 5-10 concurrent translations</li> <li>Hardware: 8GB RAM, 4 CPU cores</li> <li>File Size: Up to 50MB EPUBs</li> <li>Translation Time: 2-10 minutes per book</li> </ul>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#production-aws-capacity","title":"Production AWS Capacity","text":"<ul> <li>Target: 10-1000 translations/month (1-3 concurrent peak)</li> <li>Fargate: 1-2 tasks, 1 vCPU, 2GB RAM each</li> <li>Auto-scaling: Based on queue depth and CPU utilization</li> <li>Storage: S3 with lifecycle policies</li> </ul>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#memory-management","title":"Memory Management","text":"<pre><code># Memory optimization for translation processing\nimport gc\nimport psutil\nfrom typing import Generator\n\nclass MemoryOptimizedTranslator:\n    def __init__(self, max_memory_mb: int = 1024):\n        self.max_memory_mb = max_memory_mb\n\n    def check_memory_usage(self):\n        \"\"\"Check current memory usage\"\"\"\n        process = psutil.Process()\n        memory_mb = process.memory_info().rss / 1024 / 1024\n\n        if memory_mb &gt; self.max_memory_mb:\n            logger.warning(f\"High memory usage: {memory_mb:.1f}MB\")\n            gc.collect()  # Force garbage collection\n\n    def process_in_chunks(self, paragraphs: List[str], chunk_size: int = 50) -&gt; Generator:\n        \"\"\"Process paragraphs in chunks to manage memory\"\"\"\n        for i in range(0, len(paragraphs), chunk_size):\n            chunk = paragraphs[i:i + chunk_size]\n            yield chunk\n\n            # Check memory after each chunk\n            self.check_memory_usage()\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#file-size-optimization","title":"File Size Optimization","text":"<pre><code># File size limits and streaming\nfrom fastapi import HTTPException\nimport aiofiles\n\nclass FileSizeValidator:\n    def __init__(self, max_size_mb: int = 100):\n        self.max_size_bytes = max_size_mb * 1024 * 1024\n\n    async def validate_upload(self, file: UploadFile) -&gt; bool:\n        \"\"\"Validate file size without loading entire file\"\"\"\n\n        # Check content-length header first\n        if hasattr(file, 'size') and file.size:\n            if file.size &gt; self.max_size_bytes:\n                raise HTTPException(\n                    status_code=413,\n                    detail=f\"File too large: {file.size / 1024 / 1024:.1f}MB &gt; {self.max_size_bytes / 1024 / 1024}MB\"\n                )\n\n        # Stream and count bytes if no size header\n        total_bytes = 0\n        async for chunk in file.stream():\n            total_bytes += len(chunk)\n            if total_bytes &gt; self.max_size_bytes:\n                raise HTTPException(\n                    status_code=413,\n                    detail=\"File too large\"\n                )\n\n        # Reset file position for actual processing\n        await file.seek(0)\n        return True\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Translation caching for common phrases\nimport hashlib\nimport json\nfrom typing import Dict, Optional\nimport aioredis\n\nclass TranslationCache:\n    def __init__(self, redis_url: Optional[str] = None):\n        self.redis_url = redis_url\n        self.redis = None\n        self.local_cache: Dict[str, str] = {}\n        self.max_local_cache = 1000\n\n    async def initialize(self):\n        \"\"\"Initialize Redis connection if available\"\"\"\n        if self.redis_url:\n            self.redis = await aioredis.from_url(self.redis_url)\n\n    def _get_cache_key(self, text: str, target_lang: str, model: str) -&gt; str:\n        \"\"\"Generate cache key for translation\"\"\"\n        content = f\"{text}|{target_lang}|{model}\"\n        return hashlib.md5(content.encode()).hexdigest()\n\n    async def get_translation(\n        self,\n        text: str,\n        target_lang: str,\n        model: str\n    ) -&gt; Optional[str]:\n        \"\"\"Get cached translation if available\"\"\"\n        key = self._get_cache_key(text, target_lang, model)\n\n        # Check local cache first\n        if key in self.local_cache:\n            return self.local_cache[key]\n\n        # Check Redis cache\n        if self.redis:\n            cached = await self.redis.get(key)\n            if cached:\n                translation = cached.decode()\n                # Store in local cache for faster access\n                self.local_cache[key] = translation\n                return translation\n\n        return None\n\n    async def cache_translation(\n        self,\n        text: str,\n        target_lang: str,\n        model: str,\n        translation: str\n    ):\n        \"\"\"Cache translation result\"\"\"\n        key = self._get_cache_key(text, target_lang, model)\n\n        # Store in local cache\n        if len(self.local_cache) &gt;= self.max_local_cache:\n            # Remove oldest entry (simple FIFO)\n            oldest_key = next(iter(self.local_cache))\n            del self.local_cache[oldest_key]\n\n        self.local_cache[key] = translation\n\n        # Store in Redis with TTL\n        if self.redis:\n            await self.redis.setex(key, 3600 * 24 * 7, translation)  # 7 days TTL\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#security-error-handling","title":"Security &amp; Error Handling","text":""},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#api-security","title":"API Security","text":"<pre><code># Security middleware and validation\nfrom fastapi import HTTPException, Security, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nimport jwt\nfrom datetime import datetime, timedelta\n\nsecurity = HTTPBearer()\n\nclass SecurityManager:\n    def __init__(self, secret_key: str):\n        self.secret_key = secret_key\n\n    def create_api_token(self, user_id: str, expires_hours: int = 24) -&gt; str:\n        \"\"\"Create JWT token for API access\"\"\"\n        payload = {\n            'user_id': user_id,\n            'exp': datetime.utcnow() + timedelta(hours=expires_hours),\n            'iat': datetime.utcnow()\n        }\n        return jwt.encode(payload, self.secret_key, algorithm='HS256')\n\n    def verify_token(self, token: str) -&gt; str:\n        \"\"\"Verify JWT token and return user_id\"\"\"\n        try:\n            payload = jwt.decode(token, self.secret_key, algorithms=['HS256'])\n            return payload['user_id']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail=\"Token expired\")\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n    \"\"\"Dependency to get current user from JWT token\"\"\"\n    if not settings.require_auth:\n        return \"anonymous\"\n\n    security_manager = SecurityManager(settings.jwt_secret)\n    return security_manager.verify_token(credentials.credentials)\n\n# Rate limiting\nfrom collections import defaultdict\nimport time\n\nclass RateLimiter:\n    def __init__(self, max_requests: int = 10, window_minutes: int = 1):\n        self.max_requests = max_requests\n        self.window_seconds = window_minutes * 60\n        self.requests = defaultdict(list)\n\n    def is_allowed(self, client_id: str) -&gt; bool:\n        \"\"\"Check if request is allowed for client\"\"\"\n        now = time.time()\n        client_requests = self.requests[client_id]\n\n        # Remove old requests outside window\n        client_requests[:] = [req_time for req_time in client_requests\n                            if now - req_time &lt; self.window_seconds]\n\n        # Check if under limit\n        if len(client_requests) &gt;= self.max_requests:\n            return False\n\n        # Add current request\n        client_requests.append(now)\n        return True\n\nrate_limiter = RateLimiter()\n\nasync def check_rate_limit(request):\n    \"\"\"Rate limiting middleware\"\"\"\n    client_ip = request.client.host\n\n    if not rate_limiter.is_allowed(client_ip):\n        raise HTTPException(\n            status_code=429,\n            detail=\"Rate limit exceeded. Try again later.\"\n        )\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#error-handling-monitoring","title":"Error Handling &amp; Monitoring","text":"<pre><code># Comprehensive error handling\nimport traceback\nimport logging\nfrom enum import Enum\nfrom dataclasses import dataclass\nfrom typing import Optional, Dict, Any\n\nclass ErrorCode(Enum):\n    VALIDATION_ERROR = \"VALIDATION_ERROR\"\n    TRANSLATION_FAILED = \"TRANSLATION_FAILED\"\n    FILE_TOO_LARGE = \"FILE_TOO_LARGE\"\n    UNSUPPORTED_FORMAT = \"UNSUPPORTED_FORMAT\"\n    API_KEY_INVALID = \"API_KEY_INVALID\"\n    TIMEOUT_ERROR = \"TIMEOUT_ERROR\"\n    STORAGE_ERROR = \"STORAGE_ERROR\"\n    RATE_LIMIT_EXCEEDED = \"RATE_LIMIT_EXCEEDED\"\n    INTERNAL_ERROR = \"INTERNAL_ERROR\"\n\n@dataclass\nclass ErrorInfo:\n    code: ErrorCode\n    message: str\n    details: Optional[Dict[str, Any]] = None\n    recoverable: bool = False\n\nclass ErrorHandler:\n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n\n    def handle_translation_error(self, error: Exception, job_id: str) -&gt; ErrorInfo:\n        \"\"\"Handle translation-specific errors\"\"\"\n\n        error_str = str(error).lower()\n\n        if \"timeout\" in error_str:\n            return ErrorInfo(\n                code=ErrorCode.TIMEOUT_ERROR,\n                message=\"Translation timed out. Try with a smaller file or contact support.\",\n                recoverable=True\n            )\n        elif \"api key\" in error_str or \"unauthorized\" in error_str:\n            return ErrorInfo(\n                code=ErrorCode.API_KEY_INVALID,\n                message=\"Invalid API key for the selected translation model.\",\n                recoverable=False\n            )\n        elif \"rate limit\" in error_str or \"quota\" in error_str:\n            return ErrorInfo(\n                code=ErrorCode.RATE_LIMIT_EXCEEDED,\n                message=\"Translation service rate limit exceeded. Please try again later.\",\n                recoverable=True\n            )\n        else:\n            # Log full error for debugging\n            self.logger.error(\n                f\"Translation failed for job {job_id}: {error}\",\n                extra={'job_id': job_id, 'error_type': type(error).__name__},\n                exc_info=True\n            )\n\n            return ErrorInfo(\n                code=ErrorCode.TRANSLATION_FAILED,\n                message=\"Translation failed due to an internal error. Please try again or contact support.\",\n                details={'error_type': type(error).__name__},\n                recoverable=True\n            )\n\n    def format_user_error(self, error_info: ErrorInfo) -&gt; Dict[str, Any]:\n        \"\"\"Format error for user-facing API response\"\"\"\n        return {\n            'error_code': error_info.code.value,\n            'message': error_info.message,\n            'recoverable': error_info.recoverable,\n            'timestamp': datetime.utcnow().isoformat()\n        }\n\n# Monitoring and alerting\nimport boto3\nfrom typing import Dict, Any\n\nclass MonitoringService:\n    def __init__(self):\n        self.cloudwatch = None\n        if settings.is_aws_environment():\n            self.cloudwatch = boto3.client('cloudwatch', region_name=settings.aws_region)\n\n    async def record_translation_metrics(\n        self,\n        job_id: str,\n        duration_seconds: float,\n        success: bool,\n        model: str\n    ):\n        \"\"\"Record translation metrics\"\"\"\n\n        metrics = [\n            {\n                'MetricName': 'TranslationDuration',\n                'Value': duration_seconds,\n                'Unit': 'Seconds',\n                'Dimensions': [\n                    {'Name': 'Model', 'Value': model},\n                    {'Name': 'Success', 'Value': str(success)}\n                ]\n            },\n            {\n                'MetricName': 'TranslationCount',\n                'Value': 1,\n                'Unit': 'Count',\n                'Dimensions': [\n                    {'Name': 'Model', 'Value': model},\n                    {'Name': 'Success', 'Value': str(success)}\n                ]\n            }\n        ]\n\n        if self.cloudwatch:\n            try:\n                self.cloudwatch.put_metric_data(\n                    Namespace='EpubTranslator',\n                    MetricData=metrics\n                )\n            except Exception as e:\n                logger.error(f\"Failed to send metrics: {e}\")\n        else:\n            # Log metrics locally for development\n            logger.info(f\"Metrics: {metrics}\")\n\n    async def send_alert(self, message: str, severity: str = \"WARNING\"):\n        \"\"\"Send alert for critical issues\"\"\"\n\n        if severity == \"CRITICAL\" and settings.is_aws_environment():\n            # Send SNS notification in production\n            sns = boto3.client('sns', region_name=settings.aws_region)\n            try:\n                sns.publish(\n                    TopicArn=settings.alerts_topic_arn,\n                    Message=message,\n                    Subject=f\"EpubTranslator Alert - {severity}\"\n                )\n            except Exception as e:\n                logger.error(f\"Failed to send alert: {e}\")\n\n        # Always log alerts\n        logger.error(f\"ALERT [{severity}]: {message}\")\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Health check and system monitoring\nfrom dataclasses import dataclass\nfrom typing import Dict, List\nimport psutil\nimport asyncio\n\n@dataclass\nclass HealthStatus:\n    healthy: bool\n    issues: List[str]\n    metrics: Dict[str, Any]\n\nclass HealthChecker:\n    def __init__(self):\n        self.checks = [\n            self._check_memory,\n            self._check_disk_space,\n            self._check_active_jobs,\n            self._check_storage,\n            self._check_translation_service\n        ]\n\n    async def get_health_status(self) -&gt; HealthStatus:\n        \"\"\"Get comprehensive health status\"\"\"\n        issues = []\n        metrics = {}\n\n        for check in self.checks:\n            try:\n                check_result = await check()\n                if check_result.get('issues'):\n                    issues.extend(check_result['issues'])\n                metrics.update(check_result.get('metrics', {}))\n            except Exception as e:\n                issues.append(f\"Health check failed: {e}\")\n\n        return HealthStatus(\n            healthy=len(issues) == 0,\n            issues=issues,\n            metrics=metrics\n        )\n\n    async def _check_memory(self) -&gt; Dict[str, Any]:\n        \"\"\"Check memory usage\"\"\"\n        memory = psutil.virtual_memory()\n        memory_percent = memory.percent\n\n        issues = []\n        if memory_percent &gt; 90:\n            issues.append(f\"High memory usage: {memory_percent:.1f}%\")\n        elif memory_percent &gt; 80:\n            issues.append(f\"Warning: memory usage at {memory_percent:.1f}%\")\n\n        return {\n            'issues': issues,\n            'metrics': {\n                'memory_usage_percent': memory_percent,\n                'memory_available_mb': memory.available / 1024 / 1024\n            }\n        }\n\n    async def _check_disk_space(self) -&gt; Dict[str, Any]:\n        \"\"\"Check disk space\"\"\"\n        disk = psutil.disk_usage('/')\n        disk_percent = (disk.used / disk.total) * 100\n\n        issues = []\n        if disk_percent &gt; 90:\n            issues.append(f\"Low disk space: {disk_percent:.1f}% used\")\n\n        return {\n            'issues': issues,\n            'metrics': {\n                'disk_usage_percent': disk_percent,\n                'disk_free_gb': disk.free / 1024 / 1024 / 1024\n            }\n        }\n\n    async def _check_active_jobs(self) -&gt; Dict[str, Any]:\n        \"\"\"Check active job count\"\"\"\n        # This would check with the job manager\n        active_jobs = 0  # Placeholder\n\n        issues = []\n        if active_jobs &gt; settings.max_concurrent_jobs:\n            issues.append(f\"Too many active jobs: {active_jobs}\")\n\n        return {\n            'issues': issues,\n            'metrics': {\n                'active_jobs': active_jobs,\n                'max_concurrent_jobs': settings.max_concurrent_jobs\n            }\n        }\n\n    async def _check_storage(self) -&gt; Dict[str, Any]:\n        \"\"\"Check storage connectivity\"\"\"\n        issues = []\n        metrics = {}\n\n        try:\n            storage = get_storage()\n            # Test storage connectivity\n            if hasattr(storage, 'health_check'):\n                await storage.health_check()\n            metrics['storage_mode'] = settings.storage_mode\n        except Exception as e:\n            issues.append(f\"Storage connectivity issue: {e}\")\n\n        return {'issues': issues, 'metrics': metrics}\n\n    async def _check_translation_service(self) -&gt; Dict[str, Any]:\n        \"\"\"Check translation service health\"\"\"\n        issues = []\n        metrics = {}\n\n        # Check if translation service can initialize\n        try:\n            service = TranslationService()\n            metrics['max_workers'] = service.executor._max_workers\n        except Exception as e:\n            issues.append(f\"Translation service issue: {e}\")\n\n        return {'issues': issues, 'metrics': metrics}\n\n# Enhanced health endpoint\n@app.get(\"/health/detailed\")\nasync def detailed_health_check():\n    \"\"\"Detailed health check for monitoring\"\"\"\n    checker = HealthChecker()\n    status = await checker.get_health_status()\n\n    return {\n        'healthy': status.healthy,\n        'timestamp': datetime.utcnow(),\n        'issues': status.issues,\n        'metrics': status.metrics,\n        'version': '1.0.0'\n    }\n</code></pre>"},{"location":"api_docs/LOCAL_ASYNC_IMPLEMENTATION_GUIDE/#implementation-conclusion","title":"Implementation Conclusion","text":"<p>This comprehensive implementation guide provides a complete roadmap for converting the bilingual_book_maker CLI tool into a robust async API service. The design emphasizes:</p> <ol> <li>Immediate Value: Local async processing that works out of the box</li> <li>Cloud-Ready Architecture: Clean abstractions for seamless AWS migration</li> <li>Production Quality: Comprehensive error handling, monitoring, and testing</li> <li>Scalable Foundation: Supports growth from 10 to 1000+ translations/month</li> </ol> <p>The implementation can be developed incrementally, with each phase building on the previous foundation while maintaining backward compatibility and enabling smooth migration to AWS Fargate when ready.</p> <p>Next Steps: 1. Start with Phase 1 local async implementation (2 weeks) 2. Add Docker and production testing (1 week) 3. Prepare AWS abstractions and deployment pipeline (1 week) 4. Migrate to AWS Fargate when volume justifies it</p> <p>This approach ensures that you have a working, valuable system quickly while building the foundation for future cloud scalability.</p>"},{"location":"api_docs/api-layer/","title":"Api layer","text":""},{"location":"api_docs/api-layer/#api-layers","title":"API Layers","text":""},{"location":"api_docs/api-specification/","title":"EPUB Translation Service API Documentation","text":""},{"location":"api_docs/api-specification/#overview","title":"Overview","text":"<p>The EPUB Translation Service is a FastAPI-based web service that wraps the <code>bilingual_book_maker</code> CLI tool to provide RESTful translation capabilities for EPUB files. The service supports both local development and production deployment with AWS S3 integration.</p>"},{"location":"api_docs/api-specification/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Client Applications\"\n        FE[Frontend App]\n        CLI[CLI Tools]\n        API[Third-party APIs]\n    end\n\n    subgraph \"FastAPI Service\"\n        Router[API Router]\n        Validator[Request Validator]\n        Processor[Translation Processor]\n        Storage[Storage Handler]\n    end\n\n    subgraph \"Translation Engine\"\n        BBM[bilingual_book_maker]\n        Models[Translation Models]\n    end\n\n    subgraph \"Storage Layer\"\n        Local[Local FileSystem]\n        S3[AWS S3]\n    end\n\n    FE --&gt; Router\n    CLI --&gt; Router\n    API --&gt; Router\n\n    Router --&gt; Validator\n    Validator --&gt; Processor\n    Processor --&gt; Storage\n    Processor --&gt; BBM\n    BBM --&gt; Models\n\n    Storage --&gt; Local\n    Storage --&gt; S3\n</code></pre>"},{"location":"api_docs/api-specification/#base-configuration","title":"Base Configuration","text":"<p>Base URL: - Local Development: <code>http://localhost:8000</code> - Production: <code>https://your-domain.com</code></p> <p>API Version: <code>v1</code></p>"},{"location":"api_docs/api-specification/#environment-configuration","title":"Environment Configuration","text":"<p>The service behavior adapts based on the <code>STORAGE_MODE</code> environment variable:</p> <ul> <li><code>STORAGE_MODE=local</code>: Local filesystem storage</li> <li><code>STORAGE_MODE=s3</code>: AWS S3 storage for production</li> </ul>"},{"location":"api_docs/api-specification/#authentication","title":"Authentication","text":"<p>Currently, the API does not implement authentication. In production, consider adding: - API key authentication - JWT token validation - Rate limiting per client</p>"},{"location":"api_docs/api-specification/#core-api-endpoints","title":"Core API Endpoints","text":""},{"location":"api_docs/api-specification/#1-post-translate","title":"1. POST /translate","text":"<p>Uploads and translates an EPUB file. Behavior varies by environment.</p>"},{"location":"api_docs/api-specification/#request","title":"Request","text":"<p>Endpoint: <code>POST /translate</code></p> <p>Content-Type: <code>multipart/form-data</code></p> <p>Parameters:</p> Field Type Required Description Default <code>file</code> File Yes EPUB file to translate - <code>target_language</code> String Yes Target language code - <code>model</code> String Yes Translation model to use - <code>openai_key</code> String Conditional OpenAI API key (if using OpenAI models) - <code>claude_key</code> String Conditional Claude API key (if using Claude models) - <code>gemini_key</code> String Conditional Gemini API key (if using Gemini models) - <code>groq_key</code> String Conditional Groq API key (if using Groq models) - <code>xai_key</code> String Conditional xAI API key (if using xAI models) - <code>qwen_key</code> String Conditional Qwen API key (if using Qwen models) - <code>caiyun_key</code> String Conditional Caiyun API key (if using Caiyun) - <code>deepl_key</code> String Conditional DeepL API key (if using DeepL) - <code>custom_api</code> String Conditional Custom API endpoint (if using custom model) - <code>temperature</code> Float No Model temperature (0.0-2.0) 1.0 <code>test</code> Boolean No Test mode (translate only first 10 paragraphs) false <code>test_num</code> Integer No Number of paragraphs for testing 10 <code>single_translate</code> Boolean No Output only translated text (no bilingual) false <code>proxy</code> String No HTTP proxy URL - <code>api_base</code> String No Custom API base URL - <code>batch_size</code> Integer No Lines per translation batch - <code>temperature</code> Float No Model creativity (0.0-2.0) 1.0 <code>source_lang</code> String No Source language (auto-detect if not specified) \"auto\""},{"location":"api_docs/api-specification/#response","title":"Response","text":""},{"location":"api_docs/api-specification/#todo-local-development-mode-response-is-incorrect-we-shouldnt-return-the-file-in-binary-because-when-it-succeed-the-files-will-be-saved-in-some-local-directory-im-thinking-maybe-its-better-we-return-a-job-id-and-make-the-translate-async","title":"TODO: Local development mode response is incorrect, we shouldn't return the file in binary, because when it succeed, the files will be saved in some local directory. I'm thinking maybe it's better we return a job id and make the translate async.","text":"<p>I also not sure how sync process should work in prod, we need to discuss this. I think it's better the post api should return 200 if the translate request is successfully received and started. As for how to track the progress and download the completed translation, let's discuss this.</p> <p>GPT suggest\uff1a \u73b0\u5728\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e FastAPI \u7684\u7ffb\u8bd1\u670d\u52a1\u9879\u76ee\uff08\u662f\u4ece bilingual_book_maker \u4fee\u6539\u6765\u7684\uff09\u3002 \u8bf7\u4f60\u5148\u5e2e\u6211\u786e\u8ba4\u73b0\u6709\u4ee3\u7801\u662f\u5426\u6709\u4ee5\u4e0b\u80fd\u529b\uff1a</p> <p>\u7ffb\u8bd1\u903b\u8f91\uff1a</p> <p>\u76ee\u524d\u7684\u7ffb\u8bd1\u6838\u5fc3\u4ee3\u7801\u662f\u4e0d\u662f\u4e00\u6b21\u6027\u7ffb\u8bd1\u6574\u672c ePub\uff0c\u800c\u4e0d\u662f\u5206\u7247\u7ffb\u8bd1\uff1f</p> <p>\u6709\u6ca1\u6709\u529e\u6cd5\u5728\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u9010\u6b65\u8fd4\u56de\u8fdb\u5ea6\uff08\u6bd4\u5982 20%\u300150%\u300180%\uff09\uff0c\u8fd8\u662f\u53ea\u80fd\u5728\u5b8c\u6210\u540e\u4e00\u6b21\u6027\u8f93\u51fa\uff1f</p> <p>API \u5c42\uff1a</p> <p>\u73b0\u6709\u7684 POST /translate \u662f\u4e0d\u662f\u963b\u585e\u5f0f\u6267\u884c\uff1f- \u6211\u786e\u8ba4\u8fc7\uff0c\u662f\u672c\u5730sync\u6267\u884c\u7684\uff0c\u6ca1\u6709\u5f02\u6b65\u5316\u3002</p> <p>\u9879\u76ee\u91cc\u6709\u6ca1\u6709 GET /status/{job_id} \u8fd9\u6837\u7684\u63a5\u53e3\uff1f- \u5e94\u8be5\u662f\u6ca1\u6709\u7684</p> <p>\u5982\u679c\u6211\u73b0\u5728\u52a0\u4e00\u4e2a GET /status/{job_id}\uff0c\u5b83\u80fd\u4e0d\u80fd\u6b63\u786e\u8fd4\u56de\u4efb\u52a1\u7684\u72b6\u6001\uff1f\u8fd8\u662f\u76ee\u524d\u4ee3\u7801\u7ed3\u6784\u91cc\u6ca1\u6709\u5408\u9002\u7684\u4efb\u52a1\u72b6\u6001\u7ba1\u7406\u673a\u5236\uff1f</p> <p>\u72b6\u6001\u7ba1\u7406\uff1a</p> <p>\u9879\u76ee\u91cc\u6709\u6ca1\u6709\u5730\u65b9\u7ef4\u62a4\u4efb\u52a1\u72b6\u6001\uff08\u6bd4\u5982 pending/running/done/failed\uff09\uff1f</p> <p>\u5982\u679c\u6ca1\u6709\uff0c\u662f\u5426\u9700\u8981\u65b0\u589e\u4e00\u4e2a\u4efb\u52a1\u5b57\u5178\uff08\u6216\u5b58\u50a8\uff09\u6765\u652f\u6301 GET /status/{job_id} \u67e5\u8be2\uff1f</p> <p>\u8bf7\u4f60\u4e0d\u8981\u76f4\u63a5\u4fee\u6539\u4ee3\u7801\uff0c\u5148\u786e\u8ba4\u4ee5\u4e0a\u51e0\u70b9\uff0c\u544a\u8bc9\u6211\u73b0\u5728\u7684\u4ee3\u7801\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff0c\u54ea\u4e9b\u5730\u65b9\u5df2\u7ecf\u652f\u6301\uff0c\u54ea\u4e9b\u5730\u65b9\u8fd8\u9700\u8981\u6539\u9020\u3002</p> <p>Local Development Mode:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/epub+zip\nContent-Disposition: attachment; filename=\"translated_book.epub\"\n\n[Binary EPUB file data]\n</code></pre> <p>Production Mode (S3):</p> <pre><code>{\n  \"status\": \"success\",\n  \"job_id\": \"uuid-4-format-job-id\",\n  \"download_url\": \"https://your-bucket.s3.amazonaws.com/downloads/translated_book.epub?signed-params\",\n  \"filename\": \"original_filename_translated.epub\",\n  \"expiry\": \"2024-01-15T12:00:00Z\",\n  \"message\": \"Translation completed successfully\"\n}\n</code></pre>"},{"location":"api_docs/api-specification/#error-responses","title":"Error Responses","text":"<pre><code>{\n  \"error\": \"validation_error\",\n  \"message\": \"Missing required API key for model 'chatgptapi'\",\n  \"details\": {\n    \"field\": \"openai_key\",\n    \"required_for_models\": [\"chatgptapi\", \"gpt4\", \"gpt4omini\", \"gpt4o\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"translation_error\",\n  \"message\": \"Translation failed due to API rate limit\",\n  \"details\": {\n    \"provider\": \"openai\",\n    \"error_code\": \"rate_limit_exceeded\",\n    \"retry_after\": 60\n  }\n}\n</code></pre> <pre><code>{\n  \"error\": \"file_error\",\n  \"message\": \"Invalid EPUB file format\",\n  \"details\": {\n    \"file_type_detected\": \"application/pdf\",\n    \"expected\": \"application/epub+zip\"\n  }\n}\n</code></pre>"},{"location":"api_docs/api-specification/#2-get-models","title":"2. GET /models","text":"<p>Returns list of available translation models with metadata.</p>"},{"location":"api_docs/api-specification/#request_1","title":"Request","text":"<p>Endpoint: <code>GET /models</code></p>"},{"location":"api_docs/api-specification/#response_1","title":"Response","text":"<pre><code>{\n  \"models\": [\n    {\n      \"id\": \"chatgptapi\",\n      \"name\": \"GPT-3.5 Turbo\",\n      \"provider\": \"openai\",\n      \"requires_api_key\": true,\n      \"api_key_field\": \"openai_key\",\n      \"pricing\": \"paid\",\n      \"description\": \"OpenAI's GPT-3.5 Turbo model\",\n      \"supports_batch\": true\n    },\n    {\n      \"id\": \"gpt4\",\n      \"name\": \"GPT-4\",\n      \"provider\": \"openai\",\n      \"requires_api_key\": true,\n      \"api_key_field\": \"openai_key\",\n      \"pricing\": \"paid\",\n      \"description\": \"OpenAI's GPT-4 model\"\n    },\n    {\n      \"id\": \"claude\",\n      \"name\": \"Claude 3\",\n      \"provider\": \"anthropic\",\n      \"requires_api_key\": true,\n      \"api_key_field\": \"claude_key\",\n      \"pricing\": \"paid\",\n      \"description\": \"Anthropic's Claude 3 model\"\n    },\n    {\n      \"id\": \"gemini\",\n      \"name\": \"Google Gemini\",\n      \"provider\": \"google\",\n      \"requires_api_key\": true,\n      \"api_key_field\": \"gemini_key\",\n      \"pricing\": \"freemium\",\n      \"description\": \"Google's Gemini model\"\n    },\n    {\n      \"id\": \"groq\",\n      \"name\": \"Groq\",\n      \"provider\": \"groq\",\n      \"requires_api_key\": true,\n      \"api_key_field\": \"groq_key\",\n      \"pricing\": \"freemium\",\n      \"description\": \"Groq's fast inference models\"\n    },\n    {\n      \"id\": \"google\",\n      \"name\": \"Google Translate\",\n      \"provider\": \"google\",\n      \"requires_api_key\": false,\n      \"pricing\": \"free\",\n      \"description\": \"Google Translate (free)\"\n    },\n    {\n      \"id\": \"deepl_free\",\n      \"name\": \"DeepL Free\",\n      \"provider\": \"deepl\",\n      \"requires_api_key\": false,\n      \"pricing\": \"free\",\n      \"description\": \"DeepL free translation service\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api_docs/api-specification/#3-get-languages","title":"3. GET /languages","text":"<p>Returns list of supported target languages.</p>"},{"location":"api_docs/api-specification/#request_2","title":"Request","text":"<p>Endpoint: <code>GET /languages</code></p>"},{"location":"api_docs/api-specification/#response_2","title":"Response","text":"<pre><code>{\n  \"languages\": [\n    {\n      \"code\": \"zh-hans\",\n      \"name\": \"Chinese (Simplified)\",\n      \"native_name\": \"\u7b80\u4f53\u4e2d\u6587\"\n    },\n    {\n      \"code\": \"zh-hant\",\n      \"name\": \"Chinese (Traditional)\",\n      \"native_name\": \"\u7e41\u9ad4\u4e2d\u6587\"\n    },\n    {\n      \"code\": \"en\",\n      \"name\": \"English\",\n      \"native_name\": \"English\"\n    },\n    {\n      \"code\": \"es\",\n      \"name\": \"Spanish\",\n      \"native_name\": \"Espa\u00f1ol\"\n    },\n    {\n      \"code\": \"fr\",\n      \"name\": \"French\",\n      \"native_name\": \"Fran\u00e7ais\"\n    },\n    {\n      \"code\": \"de\",\n      \"name\": \"German\",\n      \"native_name\": \"Deutsch\"\n    },\n    {\n      \"code\": \"ja\",\n      \"name\": \"Japanese\",\n      \"native_name\": \"\u65e5\u672c\u8a9e\"\n    },\n    {\n      \"code\": \"ko\",\n      \"name\": \"Korean\",\n      \"native_name\": \"\ud55c\uad6d\uc5b4\"\n    },\n    {\n      \"code\": \"ru\",\n      \"name\": \"Russian\",\n      \"native_name\": \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"\n    },\n    {\n      \"code\": \"pt\",\n      \"name\": \"Portuguese\",\n      \"native_name\": \"Portugu\u00eas\"\n    },\n    {\n      \"code\": \"it\",\n      \"name\": \"Italian\",\n      \"native_name\": \"Italiano\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api_docs/api-specification/#4-get-downloadjob_id","title":"4. GET /download/{job_id}","text":"<p>S3 Mode Only: Downloads translated file by job ID.</p>"},{"location":"api_docs/api-specification/#request_3","title":"Request","text":"<p>Endpoint: <code>GET /download/{job_id}</code></p> <p>Path Parameters: - <code>job_id</code> (string): Unique job identifier returned from translation request</p>"},{"location":"api_docs/api-specification/#response_3","title":"Response","text":"<p>Success (Direct Download):</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/epub+zip\nContent-Disposition: attachment; filename=\"translated_book.epub\"\n\n[Binary EPUB file data]\n</code></pre> <p>Success (S3 Redirect):</p> <pre><code>HTTP/1.1 302 Found\nLocation: https://your-bucket.s3.amazonaws.com/downloads/job-id/translated_book.epub?signed-params\n</code></pre> <p>Not Found:</p> <pre><code>{\n  \"error\": \"not_found\",\n  \"message\": \"Job ID not found or file has expired\",\n  \"job_id\": \"requested-job-id\"\n}\n</code></pre>"},{"location":"api_docs/api-specification/#5-get-health","title":"5. GET /health","text":"<p>Service health check and configuration information.</p>"},{"location":"api_docs/api-specification/#request_4","title":"Request","text":"<p>Endpoint: <code>GET /health</code></p>"},{"location":"api_docs/api-specification/#response_4","title":"Response","text":"<pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"version\": \"1.0.0\",\n  \"environment\": \"production\",\n  \"storage_mode\": \"s3\",\n  \"configuration\": {\n    \"max_file_size_mb\": 100,\n    \"supported_formats\": [\"epub\"],\n    \"available_models\": 12,\n    \"supported_languages\": 50\n  },\n  \"dependencies\": {\n    \"bilingual_book_maker\": \"1.5.0\",\n    \"fastapi\": \"0.104.1\",\n    \"boto3\": \"1.29.0\"\n  }\n}\n</code></pre>"},{"location":"api_docs/api-specification/#error-handling","title":"Error Handling","text":""},{"location":"api_docs/api-specification/#error-response-format","title":"Error Response Format","text":"<p>All errors follow a consistent format:</p> <pre><code>{\n  \"error\": \"error_type\",\n  \"message\": \"Human-readable error message\",\n  \"details\": {\n    \"additional\": \"context-specific information\"\n  },\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"request_id\": \"uuid-for-debugging\"\n}\n</code></pre>"},{"location":"api_docs/api-specification/#common-error-types","title":"Common Error Types","text":"Error Type HTTP Status Description <code>validation_error</code> 400 Invalid request parameters <code>file_error</code> 400 Invalid or corrupted file <code>authentication_error</code> 401 Missing or invalid API keys <code>translation_error</code> 422 Translation service failure <code>storage_error</code> 500 File storage/retrieval failure <code>rate_limit_error</code> 429 Too many requests <code>internal_error</code> 500 Unexpected server error"},{"location":"api_docs/api-specification/#retry-logic","title":"Retry Logic","text":"<p>For transient errors (rate limits, temporary API failures):</p> <ol> <li>Rate Limit Errors: Check <code>retry_after</code> header/field</li> <li>API Timeouts: Exponential backoff: 1s, 2s, 4s, 8s</li> <li>Storage Errors: Linear retry: 1s, 2s, 3s</li> </ol>"},{"location":"api_docs/api-specification/#configuration-options","title":"Configuration Options","text":""},{"location":"api_docs/api-specification/#environment-variables","title":"Environment Variables","text":""},{"location":"api_docs/api-specification/#required","title":"Required","text":"<ul> <li><code>STORAGE_MODE</code>: <code>local</code> or <code>s3</code></li> </ul>"},{"location":"api_docs/api-specification/#aws-s3-configuration-when-storage_modes3","title":"AWS S3 Configuration (when STORAGE_MODE=s3)","text":"<ul> <li><code>AWS_ACCESS_KEY_ID</code>: AWS access key</li> <li><code>AWS_SECRET_ACCESS_KEY</code>: AWS secret key</li> <li><code>AWS_REGION</code>: AWS region (e.g., <code>us-east-1</code>)</li> <li><code>S3_BUCKET_NAME</code>: S3 bucket for file storage</li> <li><code>S3_PRESIGNED_URL_EXPIRY</code>: URL expiry in seconds (default: 3600)</li> </ul>"},{"location":"api_docs/api-specification/#optional-api-configuration","title":"Optional API Configuration","text":"<ul> <li><code>MAX_FILE_SIZE_MB</code>: Maximum upload size in MB (default: 100)</li> <li><code>TRANSLATION_TIMEOUT</code>: Translation timeout in seconds (default: 300)</li> <li><code>TEMP_DIR</code>: Temporary file directory (default: <code>/tmp</code>)</li> <li><code>LOG_LEVEL</code>: Logging level (default: <code>INFO</code>)</li> </ul>"},{"location":"api_docs/api-specification/#file-size-limits","title":"File Size Limits","text":"<ul> <li>Maximum file size: 100MB (configurable)</li> <li>Supported formats: <code>.epub</code> only</li> <li>Processing timeout: 300 seconds (configurable)</li> </ul>"},{"location":"api_docs/api-specification/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"api_docs/api-specification/#local-development","title":"Local Development","text":"<p>docker-compose.yml:</p> <pre><code>version: '3.8'\nservices:\n  epub-translator:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - STORAGE_MODE=local\n      - MAX_FILE_SIZE_MB=50\n      - LOG_LEVEL=DEBUG\n    volumes:\n      - ./temp:/tmp\n      - ./downloads:/app/downloads\n</code></pre>"},{"location":"api_docs/api-specification/#production-deployment","title":"Production Deployment","text":""},{"location":"api_docs/api-specification/#aws-ecsfargate","title":"AWS ECS/Fargate","text":"<p>Task Definition:</p> <pre><code>{\n  \"family\": \"epub-translator\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"1024\",\n  \"memory\": \"2048\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"epub-translator\",\n      \"image\": \"your-account.dkr.ecr.region.amazonaws.com/epub-translator:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\"name\": \"STORAGE_MODE\", \"value\": \"s3\"},\n        {\"name\": \"AWS_REGION\", \"value\": \"us-east-1\"},\n        {\"name\": \"S3_BUCKET_NAME\", \"value\": \"your-epub-storage-bucket\"},\n        {\"name\": \"MAX_FILE_SIZE_MB\", \"value\": \"100\"}\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/epub-translator\",\n          \"awslogs-region\": \"us-east-1\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api_docs/api-specification/#iam-permissions","title":"IAM Permissions","text":"<p>S3 Policy:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::your-epub-storage-bucket/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": \"arn:aws:s3:::your-epub-storage-bucket\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api_docs/api-specification/#load-balancer-configuration","title":"Load Balancer Configuration","text":"<p>Application Load Balancer (ALB): - Health check path: <code>/health</code> - Health check interval: 30 seconds - Healthy threshold: 2 - Unhealthy threshold: 3 - Timeout: 5 seconds</p>"},{"location":"api_docs/api-specification/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"api_docs/api-specification/#cloudwatch-metrics","title":"CloudWatch Metrics","text":"<ul> <li>Request count per endpoint</li> <li>Average response time</li> <li>Error rate by error type</li> <li>File processing duration</li> <li>S3 upload/download latency</li> </ul>"},{"location":"api_docs/api-specification/#log-structure","title":"Log Structure","text":"<pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"level\": \"INFO\",\n  \"message\": \"Translation completed\",\n  \"request_id\": \"uuid\",\n  \"file_name\": \"book.epub\",\n  \"model\": \"chatgptapi\",\n  \"language\": \"zh-hans\",\n  \"duration_seconds\": 45.2,\n  \"file_size_mb\": 2.5\n}\n</code></pre>"},{"location":"api_docs/api-specification/#rate-limiting-performance","title":"Rate Limiting &amp; Performance","text":""},{"location":"api_docs/api-specification/#recommended-limits","title":"Recommended Limits","text":"<ul> <li>Requests per minute per IP: 10</li> <li>Concurrent translations: 5</li> <li>File uploads per hour: 50</li> </ul>"},{"location":"api_docs/api-specification/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Small EPUB (&lt; 1MB): 30-60 seconds</li> <li>Medium EPUB (1-5MB): 1-3 minutes</li> <li>Large EPUB (5-20MB): 3-10 minutes</li> </ul>"},{"location":"api_docs/api-specification/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>CPU-bound: Translation processing</li> <li>Memory usage: ~500MB per active translation</li> <li>I/O patterns: Burst read/write during file processing</li> <li>Network: API calls to translation services</li> </ul>"},{"location":"api_docs/api-specification/#security-considerations","title":"Security Considerations","text":""},{"location":"api_docs/api-specification/#input-validation","title":"Input Validation","text":"<ul> <li>File type verification (magic number checking)</li> <li>File size limits</li> <li>EPUB structure validation</li> <li>Parameter sanitization</li> </ul>"},{"location":"api_docs/api-specification/#api-key-handling","title":"API Key Handling","text":"<ul> <li>Never log API keys</li> <li>Validate key format before use</li> <li>Rotate keys regularly</li> <li>Use environment variables only</li> </ul>"},{"location":"api_docs/api-specification/#file-handling","title":"File Handling","text":"<ul> <li>Sandboxed processing directory</li> <li>Automatic cleanup of temporary files</li> <li>Virus scanning (recommended for production)</li> <li>Content filtering for sensitive material</li> </ul>"},{"location":"api_docs/api-specification/#client-integration-examples","title":"Client Integration Examples","text":""},{"location":"api_docs/api-specification/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>interface TranslationRequest {\n  file: File;\n  target_language: string;\n  model: string;\n  openai_key?: string;\n  // ... other optional parameters\n}\n\nasync function translateEpub(request: TranslationRequest): Promise&lt;Blob | {download_url: string}&gt; {\n  const formData = new FormData();\n  formData.append('file', request.file);\n  formData.append('target_language', request.target_language);\n  formData.append('model', request.model);\n\n  if (request.openai_key) {\n    formData.append('openai_key', request.openai_key);\n  }\n\n  const response = await fetch('/translate', {\n    method: 'POST',\n    body: formData\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message);\n  }\n\n  // Local mode returns file directly\n  if (response.headers.get('content-type')?.includes('epub')) {\n    return await response.blob();\n  }\n\n  // S3 mode returns JSON with download URL\n  return await response.json();\n}\n</code></pre>"},{"location":"api_docs/api-specification/#python","title":"Python","text":"<pre><code>import requests\nfrom typing import Union, Dict, Any\n\ndef translate_epub(\n    file_path: str,\n    target_language: str,\n    model: str,\n    api_key: str = None,\n    base_url: str = \"http://localhost:8000\"\n) -&gt; Union[bytes, Dict[str, Any]]:\n\n    with open(file_path, 'rb') as f:\n        files = {'file': f}\n        data = {\n            'target_language': target_language,\n            'model': model\n        }\n\n        if api_key:\n            data['openai_key'] = api_key\n\n        response = requests.post(\n            f\"{base_url}/translate\",\n            files=files,\n            data=data\n        )\n\n    response.raise_for_status()\n\n    # Check if response is binary (local mode)\n    if response.headers.get('content-type', '').startswith('application/epub'):\n        return response.content\n\n    # JSON response (S3 mode)\n    return response.json()\n</code></pre>"},{"location":"api_docs/api-specification/#curl-examples","title":"cURL Examples","text":"<p>Basic Translation:</p> <pre><code>curl -X POST \"http://localhost:8000/translate\" \\\n  -F \"file=@book.epub\" \\\n  -F \"target_language=zh-hans\" \\\n  -F \"model=chatgptapi\" \\\n  -F \"openai_key=sk-...\" \\\n  --output translated_book.epub\n</code></pre> <p>With Advanced Options:</p> <pre><code>curl -X POST \"http://localhost:8000/translate\" \\\n  -F \"file=@book.epub\" \\\n  -F \"target_language=zh-hans\" \\\n  -F \"model=chatgptapi\" \\\n  -F \"openai_key=sk-...\" \\\n  -F \"temperature=0.7\" \\\n  -F \"test=true\" \\\n  -F \"test_num=5\" \\\n  --output translated_book.epub\n</code></pre> <p>Get Available Models:</p> <pre><code>curl \"http://localhost:8000/models\" | jq .\n</code></pre> <p>Health Check:</p> <pre><code>curl \"http://localhost:8000/health\" | jq .\n</code></pre> <p>This comprehensive API documentation covers all the essential aspects needed for both frontend developers consuming the API and DevOps engineers deploying the service. The documentation includes practical examples, error handling strategies, and production-ready deployment configurations.</p>"},{"location":"api_docs/aws-architecture-document/","title":"AWS Architecture Document: EPUB Translation Service (Ultra-Cost-Optimized)","text":""},{"location":"api_docs/aws-architecture-document/#executive-summary","title":"Executive Summary","text":"<p>This document outlines a lean, ultra-cost-optimized AWS architecture for deploying the EPUB Translation Service, specifically designed for very low initial usage (~10 translations/month) with ability to scale to ~1000/month at high growth.</p> <p>Key Optimizations: - 67% cost reduction: $55/month vs $166/month traditional architecture - Scale-to-zero compute: ECS tasks run only when needed (~2 hours/month) - Single AZ deployment: 50% savings on NAT Gateway costs - Aggressive lifecycle policies: 3-7 day file retention for Kindle email feature - Simplified monitoring: Basic logging sufficient for low usage patterns</p> <p>The service provides synchronous translation of EPUB files via a FastAPI-based REST API, supporting multiple translation models (OpenAI, Claude, Gemini, DeepL) with secure API key management in AWS Secrets Manager and temporary file storage optimized for the upcoming premium Kindle email delivery feature.</p>"},{"location":"api_docs/aws-architecture-document/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Service Components</li> <li>Network Architecture</li> <li>Security Design</li> <li>Cost Optimization</li> <li>Deployment Strategy</li> <li>Monitoring &amp; Observability</li> <li>Disaster Recovery</li> <li>Terraform Implementation</li> </ol>"},{"location":"api_docs/aws-architecture-document/#architecture-overview","title":"Architecture Overview","text":""},{"location":"api_docs/aws-architecture-document/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Internet                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                CloudFront CDN                                   \u2502\n\u2502          (Optional - for file downloads)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Application Load Balancer                          \u2502\n\u2502                    (ALB)                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    VPC                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502              Public Subnets                             \u2502    \u2502\n\u2502  \u2502         (Multi-AZ: us-west-2a, us-west-2b)            \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                        \u2502                                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502             Private Subnets                             \u2502    \u2502\n\u2502  \u2502         (Multi-AZ: us-west-2a, us-west-2b)            \u2502    \u2502\n\u2502  \u2502                                                         \u2502    \u2502\n\u2502  \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502    \u2502\n\u2502  \u2502   \u2502 ECS Fargate  \u2502    \u2502 ECS Fargate  \u2502                \u2502    \u2502\n\u2502  \u2502   \u2502   Task 1     \u2502    \u2502   Task 2     \u2502                \u2502    \u2502\n\u2502  \u2502   \u2502              \u2502    \u2502              \u2502                \u2502    \u2502\n\u2502  \u2502   \u2502 EPUB Trans.  \u2502    \u2502 EPUB Trans.  \u2502                \u2502    \u2502\n\u2502  \u2502   \u2502   Service    \u2502    \u2502   Service    \u2502                \u2502    \u2502\n\u2502  \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502    \u2502\n\u2502  \u2502                                                         \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    S3 Storage                                   \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502    Uploads      \u2502  \u2502    Results      \u2502  \u2502    Backups      \u2502  \u2502\n\u2502  \u2502   Bucket        \u2502  \u2502   Bucket        \u2502  \u2502   Bucket        \u2502  \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502\n\u2502  \u2502 Lifecycle: 7d   \u2502  \u2502 Lifecycle: 30d  \u2502  \u2502 Lifecycle: 1y   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Supporting Services                              \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502 AWS Secrets \u2502  \u2502 CloudWatch  \u2502  \u2502  Parameter  \u2502            \u2502\n\u2502  \u2502  Manager    \u2502  \u2502   Logs      \u2502  \u2502   Store     \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#architecture-decisions","title":"Architecture Decisions","text":"<p>Compute Choice: ECS Fargate - Selected: ECS Fargate over EC2/Lambda - Rationale:   - Synchronous processing (1-10 minutes) exceeds Lambda timeout limits   - No server management overhead compared to EC2   - Pay-per-use model for sporadic workloads   - Easy auto-scaling and container orchestration   - Cost-effective for variable workloads</p> <p>Storage Strategy: S3 with Intelligent Tiering - Multi-bucket approach for lifecycle management - Presigned URLs for secure file access - CloudFront integration for global distribution</p>"},{"location":"api_docs/aws-architecture-document/#updated-requirements-analysis","title":"Updated Requirements Analysis","text":""},{"location":"api_docs/aws-architecture-document/#usage-pattern-optimization","title":"Usage Pattern Optimization","text":"<ul> <li>Initial Usage: ~10 translations/month (ultra-low volume)</li> <li>Growth Target: ~1000 translations/month (high growth scenario)</li> <li>Activity Pattern: Sporadic usage with long idle periods</li> <li>Cost Sensitivity: High priority on cost optimization</li> </ul>"},{"location":"api_docs/aws-architecture-document/#kindle-email-integration-premium-feature","title":"Kindle Email Integration (Premium Feature)","text":"<ul> <li>File Retention: 3-7 days for email delivery</li> <li>Storage Requirements: Temporary storage for processed EPUBs</li> <li>Email Service: Future integration with SES for automated delivery</li> <li>Premium Users: Charged for advanced translation models</li> </ul>"},{"location":"api_docs/aws-architecture-document/#regional-deployment","title":"Regional Deployment","text":"<ul> <li>Primary Region: us-west-2 (user preference)</li> <li>Availability: Single AZ sufficient (cost optimization)</li> <li>Backup Strategy: Code in Git, no data replication needed</li> </ul>"},{"location":"api_docs/aws-architecture-document/#service-components","title":"Service Components","text":""},{"location":"api_docs/aws-architecture-document/#1-compute-layer-ecs-fargate","title":"1. Compute Layer - ECS Fargate","text":"<p>ECS Cluster Configuration:</p> <pre><code>Service: epub-translator-service\nCluster: epub-translator-cluster\nLaunch Type: Fargate\nPlatform Version: 1.4.0\n\nTask Definition:\n  CPU: 512 (0.5 vCPU)  # Right-sized for low usage\n  Memory: 1024 MB (1 GB)\n  Network Mode: awsvpc\n\nContainer Configuration:\n  Image: {account-id}.dkr.ecr.us-west-2.amazonaws.com/epub-translator:latest\n  Port: 8000\n  Environment Variables:\n    - STORAGE_MODE=s3\n    - S3_BUCKET=epub-translator-files\n    - AWS_REGION=us-west-2\n    - LOG_LEVEL=INFO\n    - KINDLE_EMAIL_ENABLED=true\n    - FILE_RETENTION_DAYS=7\n</code></pre> <p>Auto Scaling Configuration:</p> <pre><code>Target Tracking Scaling:\n  - Metric: CPU Utilization\n    Target: 70%\n    Scale Out Cooldown: 300s\n    Scale In Cooldown: 300s\n\n  - Metric: Memory Utilization\n    Target: 80%\n    Scale Out Cooldown: 300s\n    Scale In Cooldown: 300s\n\nCapacity:\n  Minimum: 1 task\n  Maximum: 10 tasks\n  Desired: 2 tasks\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-storage-layer-amazon-s3","title":"2. Storage Layer - Amazon S3","text":"<p>Bucket Strategy:</p> <pre><code>Primary Storage Bucket: epub-translator-files\n\u251c\u2500\u2500 uploads/{job_id}/\n\u2502   \u2514\u2500\u2500 original.epub\n\u251c\u2500\u2500 results/{job_id}/\n\u2502   \u2514\u2500\u2500 translated.epub\n\u2514\u2500\u2500 temp/{job_id}/\n    \u2514\u2500\u2500 processing files\n\nBackup Bucket: epub-translator-backups\n\u251c\u2500\u2500 daily-snapshots/\n\u2514\u2500\u2500 configuration-backups/\n\nLifecycle Policies:\n  uploads/: Delete after 7 days\n  results/: Transition to IA after 30 days, Glacier after 90 days\n  temp/: Delete after 1 day\n</code></pre> <p>S3 Security Configuration:</p> <pre><code>Bucket Policy:\n  - Allow ECS Task Role read/write access\n  - Deny public access\n  - Enable versioning for results bucket\n  - Enable server-side encryption (AES-256)\n\nCORS Configuration:\n  - Allow Origins: Application domains\n  - Allow Methods: GET, POST, PUT\n  - Allow Headers: Content-Type, Authorization\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-load-balancing-application-load-balancer","title":"3. Load Balancing - Application Load Balancer","text":"<p>ALB Configuration:</p> <pre><code>Load Balancer: epub-translator-alb\nType: Application Load Balancer\nScheme: Internet-facing\nSecurity Groups:\n  - Allow HTTP/HTTPS from 0.0.0.0/0\n  - Allow outbound to ECS security group\n\nTarget Group:\n  Protocol: HTTP\n  Port: 8000\n  Health Check:\n    Path: /health\n    Interval: 30s\n    Timeout: 10s\n    Healthy Threshold: 3\n    Unhealthy Threshold: 2\n\nListeners:\n  - Port 80: Redirect to HTTPS\n  - Port 443: Forward to target group\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#4-container-registry-amazon-ecr","title":"4. Container Registry - Amazon ECR","text":"<p>ECR Repository:</p> <pre><code>Repository: epub-translator\nLifecycle Policy:\n  - Keep last 10 images\n  - Delete untagged images after 1 day\n  - Keep production tags indefinitely\n\nImage Scanning:\n  - Scan on push: Enabled\n  - Enhanced scanning: Enabled for vulnerabilities\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#network-architecture","title":"Network Architecture","text":""},{"location":"api_docs/aws-architecture-document/#vpc-design","title":"VPC Design","text":"<pre><code>VPC Configuration:\n  CIDR: 10.0.0.0/16\n\nSubnets:\n  Public Subnets:\n    - 10.0.1.0/24 (us-west-2a) - ALB\n    - 10.0.2.0/24 (us-west-2b) - ALB\n\n  Private Subnets:\n    - 10.0.10.0/24 (us-west-2a) - ECS Tasks\n    - 10.0.20.0/24 (us-west-2b) - ECS Tasks\n\nNAT Gateway:\n  - 1 NAT Gateway per AZ for high availability\n  - Placed in public subnets\n\nInternet Gateway:\n  - Single IGW for public subnet internet access\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#security-groups","title":"Security Groups","text":"<pre><code>ALB Security Group:\n  Inbound:\n    - Port 80: 0.0.0.0/0 (HTTP)\n    - Port 443: 0.0.0.0/0 (HTTPS)\n  Outbound:\n    - Port 8000: ECS Security Group\n\nECS Security Group:\n  Inbound:\n    - Port 8000: ALB Security Group\n  Outbound:\n    - Port 443: 0.0.0.0/0 (HTTPS for external APIs)\n    - Port 80: 0.0.0.0/0 (HTTP)\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#security-design","title":"Security Design","text":""},{"location":"api_docs/aws-architecture-document/#1-identity-and-access-management-iam","title":"1. Identity and Access Management (IAM)","text":"<p>ECS Task Role:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::epub-translator-files/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::epub-translator-files\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetSecretValue\"\n      ],\n      \"Resource\": [\n        \"arn:aws:secretsmanager:us-west-2:*:secret:epub-translator/*\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> <p>ECS Execution Role:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:BatchGetImage\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-secrets-management","title":"2. Secrets Management","text":"<p>AWS Secrets Manager Configuration:</p> <pre><code>Secrets:\n  epub-translator/openai-key:\n    Type: String\n    Encryption: KMS\n    Rotation: Manual\n\n  epub-translator/claude-key:\n    Type: String\n    Encryption: KMS\n    Rotation: Manual\n\n  epub-translator/gemini-key:\n    Type: String\n    Encryption: KMS\n    Rotation: Manual\n\n  epub-translator/deepl-key:\n    Type: String\n    Encryption: KMS\n    Rotation: Manual\n\nAccess Pattern:\n  - ECS tasks retrieve secrets at runtime\n  - No hardcoded API keys in container images\n  - Automatic secret rotation capability\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-data-encryption","title":"3. Data Encryption","text":"<pre><code>Encryption at Rest:\n  S3: AES-256 server-side encryption\n  ECS Logs: CloudWatch Logs encryption with KMS\n  Secrets Manager: AWS KMS encryption\n\nEncryption in Transit:\n  ALB: TLS 1.2+ with AWS Certificate Manager\n  S3: HTTPS-only bucket policy\n  External APIs: TLS 1.2+ for translation services\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#4-network-security","title":"4. Network Security","text":"<pre><code>Network ACLs:\n  - Default VPC NACLs (allow all)\n  - Security groups provide granular control\n\nVPC Flow Logs:\n  - Enabled for all VPC traffic\n  - Stored in CloudWatch Logs\n  - Retention: 30 days\n\nAWS WAF (Optional):\n  - Rate limiting: 1000 requests/5 minutes per IP\n  - SQL injection protection\n  - XSS protection\n  - IP whitelist/blacklist capability\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#cost-optimization","title":"Cost Optimization","text":""},{"location":"api_docs/aws-architecture-document/#1-compute-cost-optimization","title":"1. Compute Cost Optimization","text":"<p>ECS Fargate Optimization:</p> <pre><code>Spot Capacity Providers:\n  - 70% On-Demand capacity\n  - 30% Spot capacity for cost savings\n  - Spot allocation strategy: diversified\n\nRight-sizing Strategy:\n  Production: 1 vCPU, 2GB RAM\n  Development: 0.5 vCPU, 1GB RAM\n\nAuto-scaling:\n  - Scale to zero during low usage periods\n  - Target tracking based on CPU/Memory\n  - Predictive scaling for known patterns\n</code></pre> <p>Monthly Cost Estimate (Production):</p> <pre><code>ECS Fargate (Average 2 tasks):\n  - 2 tasks \u00d7 1 vCPU \u00d7 $0.04048/hour \u00d7 730 hours = $59.10\n  - 2 tasks \u00d7 2GB \u00d7 $0.004445/hour \u00d7 730 hours = $6.49\n\nALB:\n  - $0.0225/hour \u00d7 730 hours = $16.43\n  - $0.008/LCU \u00d7 estimated 5 LCUs = $0.04\n\nNAT Gateway (2 AZs):\n  - 2 \u00d7 $0.045/hour \u00d7 730 hours = $65.70\n  - Data processing: ~$0.045/GB \u00d7 estimated 100GB = $4.50\n\nTotal Compute: ~$152/month\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-storage-cost-optimization","title":"2. Storage Cost Optimization","text":"<p>S3 Cost Strategy:</p> <pre><code>Intelligent Tiering:\n  - Automatic transition to IA after 30 days\n  - Archive to Glacier after 90 days\n  - Delete uploads after 7 days\n\nTransfer Optimization:\n  - S3 Transfer Acceleration for global users\n  - CloudFront for frequently accessed files\n  - Multipart uploads for large files\n\nMonthly Storage Estimate:\n  - Standard: 100GB \u00d7 $0.023 = $2.30\n  - IA: 50GB \u00d7 $0.0125 = $0.63\n  - Requests: 10,000 \u00d7 $0.0004 = $4.00\n\nTotal Storage: ~$7/month\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-cost-monitoring-and-alerts","title":"3. Cost Monitoring and Alerts","text":"<pre><code>CloudWatch Billing Alerts (Adjusted for Low Usage):\n  - Alert when monthly cost &gt; $70\n  - Alert when daily cost &gt; $3\n  - Budget tracking with $55/month baseline\n\nCost Allocation Tags:\n  - Environment: production/development\n  - Project: epub-translator\n  - Owner: team-name\n  - CostCenter: department\n\nAWS Cost Explorer:\n  - Monthly cost reviews (reduced frequency)\n  - Basic resource utilization analysis\n  - Focus on NAT Gateway and ALB optimization\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#cost-comparison-traditional-vs-optimized-architecture","title":"Cost Comparison: Traditional vs Optimized Architecture","text":"Component Traditional Optimized Savings ECS Compute $65.59 $0.59 99.1% NAT Gateway $70.20 $33.08 52.9% S3 Storage $3.45 $1.04 69.9% Monitoring $2.50 $0.50 80.0% Total Monthly $165.61 $55.05 66.8% <p>Key Optimization Strategies Applied: 1. Scale-to-Zero: ECS tasks run only ~2 hours/month vs 730 hours 2. Single AZ: Eliminated second NAT Gateway and reduced complexity 3. Aggressive Lifecycle: Files deleted after 1-7 days vs 30-90 days 4. Basic Monitoring: Essential alerts only, reduced log retention</p>"},{"location":"api_docs/aws-architecture-document/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"api_docs/aws-architecture-document/#1-cicd-pipeline","title":"1. CI/CD Pipeline","text":"<p>GitHub Actions Workflow:</p> <pre><code>name: Deploy EPUB Translator\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run tests\n        run: |\n          python -m pytest tests/\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Login to Amazon ECR\n        uses: aws-actions/amazon-ecr-login@v1\n\n      - name: Build and push Docker image\n        run: |\n          docker build -t epub-translator .\n          docker tag epub-translator:latest $ECR_REPOSITORY:latest\n          docker tag epub-translator:latest $ECR_REPOSITORY:$GITHUB_SHA\n          docker push $ECR_REPOSITORY:latest\n          docker push $ECR_REPOSITORY:$GITHUB_SHA\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: Deploy to ECS\n        run: |\n          aws ecs update-service \\\n            --cluster epub-translator-cluster \\\n            --service epub-translator-service \\\n            --force-new-deployment\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-blue-green-deployment","title":"2. Blue-Green Deployment","text":"<pre><code>Deployment Strategy:\n  Type: Rolling update\n  Maximum percent: 200%\n  Minimum healthy percent: 50%\n\nHealth Checks:\n  - ALB health checks on /health endpoint\n  - ECS service health validation\n  - CloudWatch alarm-based rollback\n\nRollback Strategy:\n  - Automatic rollback on health check failures\n  - Manual rollback capability via AWS CLI\n  - Previous task definition retention\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-environment-management","title":"3. Environment Management","text":"<pre><code>Environments:\n  Development:\n    - Local deployment\n    - File storage mode for testing\n    - No AWS costs during development\n\n  Staging:\n    - Single AZ deployment (cost optimization)\n    - Minimal scale (0-1 tasks)\n    - Basic S3 setup\n\n  Production:\n    - Single AZ deployment (optimized for low usage)\n    - Scale-to-zero capability\n    - Full S3 lifecycle management\n    - Kindle email integration enabled\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#kindle-email-integration-architecture","title":"Kindle Email Integration Architecture","text":""},{"location":"api_docs/aws-architecture-document/#premium-feature-overview","title":"Premium Feature Overview","text":"<p>The Kindle email delivery feature allows premium users to automatically receive translated EPUBs via email, directly to their Kindle devices. This requires temporary file storage and future integration with Amazon SES.</p>"},{"location":"api_docs/aws-architecture-document/#file-retention-strategy","title":"File Retention Strategy","text":"<pre><code>Storage Buckets for Kindle Integration:\n  epub-translator-files/kindle/{job_id}/\n    - Translated EPUB files\n    - User metadata for email delivery\n    - Retention: 7 days maximum\n    - Lifecycle: Auto-delete after delivery window\n\nFile Access Patterns:\n  - Upload: Immediate after translation completion\n  - Access: Within 24-48 hours for email delivery\n  - Cleanup: Automatic after 7 days\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#email-delivery-workflow-future-implementation","title":"Email Delivery Workflow (Future Implementation)","text":"<pre><code>SES Integration (Phase 2):\n  1. Translation completed \u2192 Store in kindle/ prefix\n  2. Queue email delivery job\n  3. SES sends EPUB attachment to user's Kindle email\n  4. Delivery confirmation \u2192 File cleanup triggered\n  5. Failed delivery \u2192 Retry logic with exponential backoff\n\nEmail Template:\n  - Subject: \"Your translated EPUB is ready\"\n  - Attachment: translated.epub\n  - Body: Simple HTML with download link backup\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#security-considerations","title":"Security Considerations","text":"<pre><code>User Data Protection:\n  - No email addresses stored in S3 bucket names\n  - Temporary file access via presigned URLs only\n  - Email delivery logs in CloudWatch (retention: 7 days)\n  - GDPR compliance: Files auto-deleted after retention period\n\nPremium User Management:\n  - API key validation for premium features\n  - Usage tracking for billing purposes\n  - Rate limiting for premium endpoints\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#cost-impact-of-kindle-feature","title":"Cost Impact of Kindle Feature","text":"<pre><code>Additional Monthly Costs:\n  SES Email Delivery: $0.10 per 1000 emails (~$0.001/month for 10 emails)\n  Extra S3 Storage: Minimal (files deleted after 7 days)\n  CloudWatch Logs: Included in basic logging budget\n\nTotal Impact: &lt;$1/month additional cost\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"api_docs/aws-architecture-document/#1-cloudwatch-metrics","title":"1. CloudWatch Metrics","text":"<p>Application Metrics:</p> <pre><code>Custom Metrics:\n  - epub_translations_total (Counter)\n  - epub_translation_duration_seconds (Histogram)\n  - epub_translation_file_size_bytes (Histogram)\n  - epub_translation_errors_total (Counter)\n  - active_translation_jobs (Gauge)\n\nECS Metrics:\n  - CPUUtilization\n  - MemoryUtilization\n  - RunningTaskCount\n  - PendingTaskCount\n\nALB Metrics:\n  - RequestCount\n  - TargetResponseTime\n  - HTTPCode_Target_2XX_Count\n  - HTTPCode_Target_5XX_Count\n</code></pre> <p>CloudWatch Dashboards:</p> <pre><code>Operational Dashboard:\n  - Service health overview\n  - Request volume and latency\n  - Error rates\n  - Infrastructure utilization\n\nBusiness Dashboard:\n  - Translation job metrics\n  - File size distribution\n  - Popular translation models\n  - Geographic usage patterns\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-logging-strategy","title":"2. Logging Strategy","text":"<pre><code>Log Groups:\n  /aws/ecs/epub-translator:\n    Retention: 30 days\n    Encryption: Enabled\n\nLog Structure:\n  Level: INFO, WARNING, ERROR\n  Format: JSON\n  Fields:\n    - timestamp\n    - level\n    - message\n    - job_id\n    - user_id (if applicable)\n    - model_used\n    - file_size\n    - duration\n    - error_details\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-alerting","title":"3. Alerting","text":"<pre><code>Critical Alerts:\n  - Service down (all tasks unhealthy)\n  - Error rate &gt; 5%\n  - Response time &gt; 30 seconds\n  - No successful translations in 1 hour\n\nWarning Alerts:\n  - CPU utilization &gt; 80%\n  - Memory utilization &gt; 85%\n  - Error rate &gt; 2%\n  - Response time &gt; 15 seconds\n\nCost Alerts:\n  - Daily spend &gt; $10\n  - Monthly spend &gt; $250\n  - Unexpected cost spikes\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#4-distributed-tracing","title":"4. Distributed Tracing","text":"<pre><code>AWS X-Ray Integration:\n  - Trace translation requests end-to-end\n  - Monitor external API calls\n  - Identify performance bottlenecks\n  - Track error propagation\n\nImplementation:\n  - X-Ray SDK in FastAPI application\n  - Automatic subsegment creation\n  - Custom annotations for business metrics\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"api_docs/aws-architecture-document/#1-backup-strategy","title":"1. Backup Strategy","text":"<pre><code>S3 Cross-Region Replication:\n  Source: us-west-2\n  Destination: us-west-2\n  Objects: All results and critical uploads\n\nECS Configuration Backup:\n  - Task definitions in version control\n  - Service configurations in Terraform\n  - Parameter Store values backed up daily\n\nDatabase Backup (Future):\n  - RDS automated backups (7 days retention)\n  - Cross-region backup replication\n  - Point-in-time recovery capability\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#2-multi-region-architecture","title":"2. Multi-Region Architecture","text":"<pre><code>Primary Region: us-west-2\nSecondary Region: us-west-2\n\nFailover Strategy:\n  - Route 53 health checks on ALB\n  - Automatic DNS failover to secondary region\n  - Manual service activation in secondary region\n\nRecovery Time Objective (RTO): 15 minutes\nRecovery Point Objective (RPO): 5 minutes\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#3-business-continuity","title":"3. Business Continuity","text":"<pre><code>Service Dependencies:\n  - External translation APIs (OpenAI, Claude, etc.)\n  - AWS services availability\n  - DNS resolution\n\nContingency Plans:\n  - Multi-model fallback for translation APIs\n  - Rate limiting to prevent service exhaustion\n  - Graceful degradation for non-critical features\n  - Status page for user communication\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#terraform-implementation","title":"Terraform Implementation","text":""},{"location":"api_docs/aws-architecture-document/#infrastructure-as-code-structure","title":"Infrastructure as Code Structure","text":"<pre><code>terraform/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 vpc/\n\u2502   \u251c\u2500\u2500 ecs/\n\u2502   \u251c\u2500\u2500 alb/\n\u2502   \u251c\u2500\u2500 s3/\n\u2502   \u251c\u2500\u2500 iam/\n\u2502   \u2514\u2500\u2500 monitoring/\n\u251c\u2500\u2500 backend.tf\n\u251c\u2500\u2500 variables.tf\n\u2514\u2500\u2500 outputs.tf\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#core-terraform-modules","title":"Core Terraform Modules","text":"<p>VPC Module (<code>modules/vpc/main.tf</code>):</p> <pre><code>resource \"aws_vpc\" \"main\" {\n  cidr_block           = var.vpc_cidr\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"${var.project_name}-vpc\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_subnet\" \"public\" {\n  count             = length(var.availability_zones)\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = var.public_subnet_cidrs[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"${var.project_name}-public-${count.index + 1}\"\n    Type = \"Public\"\n  }\n}\n\nresource \"aws_subnet\" \"private\" {\n  count             = length(var.availability_zones)\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = var.private_subnet_cidrs[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  tags = {\n    Name = \"${var.project_name}-private-${count.index + 1}\"\n    Type = \"Private\"\n  }\n}\n</code></pre> <p>ECS Module (<code>modules/ecs/main.tf</code>):</p> <pre><code>resource \"aws_ecs_cluster\" \"main\" {\n  name = \"${var.project_name}-cluster\"\n\n  setting {\n    name  = \"containerInsights\"\n    value = \"enabled\"\n  }\n\n  capacity_providers = [\"FARGATE\", \"FARGATE_SPOT\"]\n\n  default_capacity_provider_strategy {\n    capacity_provider = \"FARGATE\"\n    weight           = 70\n  }\n\n  default_capacity_provider_strategy {\n    capacity_provider = \"FARGATE_SPOT\"\n    weight           = 30\n  }\n}\n\nresource \"aws_ecs_task_definition\" \"app\" {\n  family                   = \"${var.project_name}-app\"\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  cpu                      = var.task_cpu\n  memory                   = var.task_memory\n  execution_role_arn       = aws_iam_role.ecs_execution_role.arn\n  task_role_arn           = aws_iam_role.ecs_task_role.arn\n\n  container_definitions = jsonencode([\n    {\n      name  = \"epub-translator\"\n      image = \"${var.ecr_repository_url}:latest\"\n\n      portMappings = [\n        {\n          containerPort = 8000\n          protocol      = \"tcp\"\n        }\n      ]\n\n      environment = [\n        {\n          name  = \"STORAGE_MODE\"\n          value = \"s3\"\n        },\n        {\n          name  = \"S3_BUCKET\"\n          value = var.s3_bucket_name\n        },\n        {\n          name  = \"AWS_REGION\"\n          value = var.aws_region\n        }\n      ]\n\n      secrets = [\n        {\n          name      = \"OPENAI_API_KEY\"\n          valueFrom = \"${aws_secretsmanager_secret.openai_key.arn}\"\n        }\n      ]\n\n      logConfiguration = {\n        logDriver = \"awslogs\"\n        options = {\n          awslogs-group         = aws_cloudwatch_log_group.app.name\n          awslogs-region        = var.aws_region\n          awslogs-stream-prefix = \"ecs\"\n        }\n      }\n    }\n  ])\n}\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#environment-configuration","title":"Environment Configuration","text":"<p>Production (<code>environments/prod/terraform.tfvars</code>):</p> <pre><code># Project\nproject_name = \"epub-translator\"\nenvironment  = \"prod\"\n\n# VPC\nvpc_cidr = \"10.0.0.0/16\"\navailability_zones = [\"us-west-2a\", \"us-west-2b\"]\npublic_subnet_cidrs = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\nprivate_subnet_cidrs = [\"10.0.10.0/24\", \"10.0.20.0/24\"]\n\n# ECS\ntask_cpu    = 1024\ntask_memory = 2048\ndesired_count = 2\nmax_capacity = 10\nmin_capacity = 1\n\n# ALB\ncertificate_arn = \"arn:aws:acm:us-west-2:123456789012:certificate/abc123\"\n\n# S3\nenable_s3_lifecycle = true\nupload_expiration_days = 7\nresult_transition_days = 30\n\n# Monitoring\nlog_retention_days = 30\nenable_detailed_monitoring = true\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#state-management","title":"State Management","text":"<p>Backend Configuration (<code>backend.tf</code>):</p> <pre><code>terraform {\n  backend \"s3\" {\n    bucket         = \"epub-translator-terraform-state\"\n    key            = \"epub-translator/terraform.tfstate\"\n    region         = \"us-west-2\"\n    encrypt        = true\n    dynamodb_table = \"epub-translator-terraform-locks\"\n  }\n}\n</code></pre>"},{"location":"api_docs/aws-architecture-document/#cost-monitoring","title":"Cost Monitoring","text":"<p>Monthly Cost Breakdown:</p> Service Estimated Monthly Cost ECS Fargate (2 avg tasks) $65.59 Application Load Balancer $16.47 NAT Gateway (2 AZs) $70.20 S3 Storage (150GB) $3.45 CloudWatch Logs $2.50 Data Transfer $5.00 Secrets Manager $2.40 Total ~$165.61 <p>Cost Optimization Opportunities: - Use Spot instances for 30% savings on compute - Implement S3 Intelligent Tiering for storage optimization - Optimize NAT Gateway usage with VPC endpoints - Right-size ECS tasks based on actual usage</p>"},{"location":"api_docs/aws-architecture-document/#operational-runbook","title":"Operational Runbook","text":""},{"location":"api_docs/aws-architecture-document/#1-deployment-checklist","title":"1. Deployment Checklist","text":"<p>Pre-deployment: - [ ] Run integration tests - [ ] Validate Terraform plan - [ ] Check resource quotas - [ ] Backup current configuration - [ ] Notify stakeholders</p> <p>Deployment: - [ ] Apply Terraform changes - [ ] Deploy container image - [ ] Verify health checks - [ ] Test critical endpoints - [ ] Monitor metrics</p> <p>Post-deployment: - [ ] Validate functionality - [ ] Check error rates - [ ] Monitor performance - [ ] Update documentation - [ ] Close deployment ticket</p>"},{"location":"api_docs/aws-architecture-document/#2-incident-response","title":"2. Incident Response","text":"<p>Severity Levels: - Critical: Service completely down - High: Significant functionality impaired - Medium: Minor functionality affected - Low: Cosmetic or documentation issues</p> <p>Response Procedures: 1. Immediate assessment and triage 2. Activate incident response team 3. Implement temporary workarounds 4. Identify root cause 5. Implement permanent fix 6. Post-incident review</p>"},{"location":"api_docs/aws-architecture-document/#3-scaling-operations","title":"3. Scaling Operations","text":"<p>Manual Scaling:</p> <pre><code># Scale ECS service\naws ecs update-service \\\n  --cluster epub-translator-cluster \\\n  --service epub-translator-service \\\n  --desired-count 5\n\n# Monitor scaling\naws ecs describe-services \\\n  --cluster epub-translator-cluster \\\n  --services epub-translator-service\n</code></pre> <p>Performance Tuning: - Monitor CPU/Memory utilization - Adjust task definition resources - Optimize container startup time - Tune auto-scaling parameters</p>"},{"location":"api_docs/aws-architecture-document/#security-compliance","title":"Security Compliance","text":""},{"location":"api_docs/aws-architecture-document/#1-security-controls","title":"1. Security Controls","text":"<p>Data Protection: - Encryption at rest and in transit - Secure API key management - File access controls - Data retention policies</p> <p>Network Security: - VPC isolation - Security group restrictions - WAF protection (optional) - VPC Flow Logs</p> <p>Access Control: - IAM least privilege principle - Role-based access control - MFA for admin access - Audit logging</p>"},{"location":"api_docs/aws-architecture-document/#2-compliance-framework","title":"2. Compliance Framework","text":"<p>SOC 2 Type II Readiness: - Security policy documentation - Access control procedures - Change management process - Incident response plan - Continuous monitoring</p> <p>GDPR Considerations: - Data processing documentation - User consent mechanisms - Data deletion procedures - Data portability features - Privacy by design</p>"},{"location":"api_docs/aws-architecture-document/#conclusion","title":"Conclusion","text":"<p>This architecture provides a robust, scalable, and cost-effective solution for deploying the EPUB Translation Service on AWS. The design emphasizes:</p> <ul> <li>Cost Optimization: Spot instances, right-sizing, and intelligent storage tiering</li> <li>Scalability: Auto-scaling ECS Fargate tasks based on demand</li> <li>Security: Defense in depth with IAM, encryption, and network isolation</li> <li>Reliability: Multi-AZ deployment with automated health checks</li> <li>Observability: Comprehensive monitoring and alerting</li> </ul> <p>The Terraform implementation ensures infrastructure consistency and enables GitOps workflows. With estimated monthly costs of ~$166 for production workloads, this architecture provides excellent value for a translation service with sporadic usage patterns.</p> <p>Next Steps: 1. Review and customize Terraform modules for your specific requirements 2. Set up CI/CD pipeline with your preferred tooling 3. Configure monitoring dashboards and alerts 4. Implement security scanning and compliance controls 5. Conduct load testing to validate scaling behavior</p> <p>This architecture serves as a solid foundation that can evolve with your business requirements while maintaining cost efficiency and operational excellence.</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/","title":"Configuration Management System","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#overview","title":"Overview","text":"<p>The API now uses a centralized configuration management system to eliminate hardcoded values and improve maintainability. All configuration is environment-based with secure defaults.</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/#architecture","title":"Architecture","text":"<pre><code>api/\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 constants.py         # Application constants and magic numbers\n\u2502   \u2514\u2500\u2500 settings.py          # Environment-based configuration\n\u251c\u2500\u2500 main.py                  # Uses settings for CORS, hosts, server config\n\u251c\u2500\u2500 job_manager.py           # Uses settings for workers, TTL, paths\n\u2514\u2500\u2500 .env.example             # Sample environment configuration\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#configuration-classes","title":"Configuration Classes","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#constants-constantspy","title":"<code>Constants</code> (constants.py)","text":"<p>Application constants and magic numbers organized by category: - NetworkConstants: Hosts, ports, protocols - SecurityConstants: HTTP methods, CORS headers - DefaultValues: Default configuration values - DomainConstants: Domain names and URL generation - StorageConstants: File extensions, MIME types - TimeConstants: Time conversion factors - ValidationConstants: Size limits, validation rules</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/#securityconfig-settingspy","title":"<code>SecurityConfig</code> (settings.py)","text":"<p>Environment-specific security configuration using constants: - CORS origins by environment (built from constants) - Trusted hosts by environment (built from constants) - CORS methods by environment (built from constants) - Standard headers (from SecurityConstants)</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/#settings-settingspy","title":"<code>Settings</code> (settings.py)","text":"<p>Main configuration class with environment variables support: - Server settings (host, port, reload) using DefaultValues - Job manager settings (workers, TTL, cleanup) using DefaultValues - Storage paths using DefaultValues - Security overrides - Logging configuration using DefaultValues</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/#environment-variables","title":"Environment Variables","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#core-settings","title":"Core Settings","text":"<pre><code>ENVIRONMENT=development          # development, staging, production\nAPI_HOST=0.0.0.0                # API server host\nAPI_PORT=8000                   # API server port\nDEBUG=true                      # Debug mode\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#job-manager","title":"Job Manager","text":"<pre><code>MAX_WORKERS=4                   # Concurrent translation workers\nJOB_TTL_HOURS=3                # Job time-to-live in hours\nCLEANUP_INTERVAL_MINUTES=30     # Cleanup interval\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#storage","title":"Storage","text":"<pre><code>UPLOAD_DIR=uploads              # Upload directory\nOUTPUT_DIR=outputs              # Output directory\nTEMP_DIR=temp                   # Temporary directory\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#security-overrides-optional","title":"Security Overrides (Optional)","text":"<pre><code>CORS_ORIGINS=https://yourfrontend.com,https://www.yourfrontend.com\nTRUSTED_HOSTS=yourfrontend.com,www.yourfrontend.com\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#environment-specific-defaults","title":"Environment-Specific Defaults","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#development","title":"Development","text":"<pre><code>CORS_ORIGINS = [\"http://localhost:8000\", \"http://127.0.0.1:8000\"]\nTRUSTED_HOSTS = [\"localhost:8000\", \"127.0.0.1:8000\", \"0.0.0.0:8000\"]\nCORS_METHODS = [\"*\"]\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#staging","title":"Staging","text":"<pre><code>CORS_ORIGINS = [\"https://staging.yourdomain.com\", \"http://localhost:8080\"]\nTRUSTED_HOSTS = [\"staging.yourdomain.com\", \"localhost:8000\", \"127.0.0.1:8000\"]\nCORS_METHODS = [\"*\"]\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#production","title":"Production","text":"<pre><code>CORS_ORIGINS = [\"https://yourfrontend.com\", \"https://www.yourfrontend.com\"]\nTRUSTED_HOSTS = [\"yourfrontend.com\", \"www.yourfrontend.com\", \"api.yourfrontend.com\"]\nCORS_METHODS = [\"GET\", \"POST\", \"DELETE\", \"OPTIONS\"]\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#usage-examples","title":"Usage Examples","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#1-development-default","title":"1. Development (Default)","text":"<pre><code># No .env file needed - uses defaults\npython main.py\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#2-custom-development","title":"2. Custom Development","text":"<pre><code># Create .env file\necho \"MAX_WORKERS=8\" &gt; .env\necho \"JOB_TTL_HOURS=6\" &gt;&gt; .env\npython main.py\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#3-production-deployment","title":"3. Production Deployment","text":"<pre><code># Set environment variables\nexport ENVIRONMENT=production\nexport API_HOST=0.0.0.0\nexport API_PORT=8000\nexport MAX_WORKERS=8\nexport JOB_TTL_HOURS=24\nexport DEBUG=false\n\n# Or use .env file\ncp .env.example .env\n# Edit .env with production values\n\nuvicorn api.main:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#4-custom-domain-configuration","title":"4. Custom Domain Configuration","text":"<pre><code># Override security settings for your domain\nexport CORS_ORIGINS=\"https://myapp.com,https://www.myapp.com\"\nexport TRUSTED_HOSTS=\"myapp.com,www.myapp.com,api.myapp.com\"\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#security-benefits","title":"Security Benefits","text":""},{"location":"config_docs/CONFIG_MANAGEMENT/#before-hardcoded-insecure","title":"\u2705 Before (Hardcoded - Insecure)","text":"<pre><code>allow_origins=[\"*\"]                    # CORS bypass vulnerability\nallowed_hosts=[\"*\"]                    # Host header injection\nmax_workers=4                          # Not configurable\nhost=\"0.0.0.0\", port=8000             # Not configurable\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#after-configuration-based-secure","title":"\u2705 After (Configuration-Based - Secure)","text":"<pre><code>allow_origins=settings.get_cors_origins()     # Environment-specific\nallowed_hosts=settings.get_trusted_hosts()    # Environment-specific\nmax_workers=settings.max_workers               # Configurable\nhost=settings.api_host                         # Configurable\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#customizing-for-your-domains","title":"Customizing for Your Domains","text":"<ol> <li>Update SecurityConfig in <code>api/config/settings.py</code>:</li> </ol> <pre><code>PRODUCTION_CORS_ORIGINS = [\n    \"https://yourapp.com\",        # Replace with your domain\n    \"https://www.yourapp.com\",    # Replace with your domain\n]\n\nPRODUCTION_TRUSTED_HOSTS = [\n    \"yourapp.com\",                # Replace with your domain\n    \"www.yourapp.com\",            # Replace with your domain\n    \"api.yourapp.com\"             # Replace with your API domain\n]\n</code></pre> <ol> <li>Or use environment variables (recommended for production):</li> </ol> <pre><code>export CORS_ORIGINS=\"https://yourapp.com,https://www.yourapp.com\"\nexport TRUSTED_HOSTS=\"yourapp.com,www.yourapp.com,api.yourapp.com\"\n</code></pre>"},{"location":"config_docs/CONFIG_MANAGEMENT/#migration-benefits","title":"Migration Benefits","text":"<ol> <li>Security: Eliminates hardcoded wildcards and unsafe defaults</li> <li>Maintainability: Single source of truth for configuration</li> <li>Flexibility: Easy environment-specific customization</li> <li>Deployment: Simple production configuration via environment variables</li> <li>Documentation: Clear understanding of all configurable options</li> </ol>"},{"location":"config_docs/CONFIG_MANAGEMENT/#validation","title":"Validation","text":"<p>The configuration system includes automatic validation: - Type checking for all settings - Environment variable parsing - Default value fallbacks - Error messages for invalid configurations</p>"},{"location":"config_docs/CONFIG_MANAGEMENT/#testing","title":"Testing","text":"<pre><code># Test configuration system\npython -c \"from api.config import settings; print(settings.get_cors_origins())\"\n\n# Test different environments\nENVIRONMENT=production python -c \"from api.config import settings; print(settings.get_cors_origins())\"\n\n# Test custom overrides\nCORS_ORIGINS=\"https://test.com\" python -c \"from api.config import settings; print(settings.get_cors_origins())\"\n</code></pre>"},{"location":"config_docs/CORS_SECURITY/","title":"CORS Security Configuration","text":""},{"location":"config_docs/CORS_SECURITY/#fixed-critical-security-issue","title":"Fixed Critical Security Issue","text":"<p>The CORS bypass vulnerability has been fixed with environment-based configuration.</p>"},{"location":"config_docs/CORS_SECURITY/#environment-settings","title":"Environment Settings","text":""},{"location":"config_docs/CORS_SECURITY/#development-default","title":"Development (Default)","text":"<pre><code>export ENVIRONMENT=development\n# OR\nENVIRONMENT=development python main.py\n</code></pre> <ul> <li>CORS Origins: <code>localhost:3000</code>, <code>localhost:8080</code>, <code>localhost:8000</code>, <code>127.0.0.1:3000</code>, <code>127.0.0.1:8080</code>, <code>127.0.0.1:8000</code></li> <li>CORS Methods: All methods (<code>*</code>)</li> <li>Trusted Hosts: <code>localhost:8000</code>, <code>127.0.0.1:8000</code>, <code>0.0.0.0:8000</code> (strict port 8000 only)</li> </ul>"},{"location":"config_docs/CORS_SECURITY/#staging","title":"Staging","text":"<pre><code>export ENVIRONMENT=staging\n</code></pre> <ul> <li>CORS Origins: <code>staging.yourdomain.com</code>, <code>localhost:3000</code>, <code>localhost:8080</code></li> <li>CORS Methods: All methods (<code>*</code>)</li> <li>Trusted Hosts: <code>staging.yourdomain.com</code>, <code>localhost:8000</code>, <code>127.0.0.1:8000</code></li> </ul>"},{"location":"config_docs/CORS_SECURITY/#production","title":"Production","text":"<pre><code>export ENVIRONMENT=production\n</code></pre> <ul> <li>CORS Origins: <code>yourdomain.com</code>, <code>www.yourdomain.com</code>, <code>api.yourdomain.com</code></li> <li>CORS Methods: <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>OPTIONS</code> only</li> <li>Trusted Hosts: <code>yourdomain.com</code>, <code>www.yourdomain.com</code>, <code>api.yourdomain.com</code></li> </ul>"},{"location":"config_docs/CORS_SECURITY/#customizing-for-your-domain","title":"Customizing for Your Domain","text":"<p>Before deploying to production, update the domain names in <code>api/main.py</code>:</p> <ol> <li>Replace <code>yourdomain.com</code> with your actual domain</li> <li>Update the production origins list with your frontend URLs</li> <li>Ensure HTTPS is used in production</li> </ol>"},{"location":"config_docs/CORS_SECURITY/#testing-cors","title":"Testing CORS","text":""},{"location":"config_docs/CORS_SECURITY/#local-development","title":"Local Development","text":"<pre><code># Test with curl\ncurl -H \"Origin: http://localhost:3000\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -X OPTIONS \\\n     http://localhost:8000/translate\n\n# Should return CORS headers allowing the request\n</code></pre>"},{"location":"config_docs/CORS_SECURITY/#production_1","title":"Production","text":"<pre><code># This should be blocked\ncurl -H \"Origin: http://malicious-site.com\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -X OPTIONS \\\n     https://api.yourdomain.com/translate\n\n# This should be allowed\ncurl -H \"Origin: https://yourdomain.com\" \\\n     -H \"Access-Control-Request-Method: POST\" \\\n     -X OPTIONS \\\n     https://api.yourdomain.com/translate\n</code></pre>"},{"location":"config_docs/CORS_SECURITY/#security-benefits","title":"Security Benefits","text":"<ol> <li>Development: Strict localhost-only access on port 8000 - no wildcard vulnerabilities</li> <li>Staging: Controlled testing environment with specific hosts and ports</li> <li>Production: Strict CORS and trusted host policies preventing unauthorized access</li> </ol>"},{"location":"config_docs/CORS_SECURITY/#protected-against","title":"Protected Against","text":""},{"location":"config_docs/CORS_SECURITY/#cors-attacks","title":"CORS Attacks","text":"<ul> <li>Cross-origin request forgery (CSRF)</li> <li>Data theft from unauthorized domains</li> <li>API abuse from malicious websites</li> </ul>"},{"location":"config_docs/CORS_SECURITY/#host-header-injection-attacks","title":"Host Header Injection Attacks","text":"<ul> <li>Host header injection vulnerabilities</li> <li>Cache poisoning attacks</li> <li>Password reset redirection attacks</li> <li>Web cache deception</li> </ul>"},{"location":"config_docs/CORS_SECURITY/#deployment-commands","title":"Deployment Commands","text":""},{"location":"config_docs/CORS_SECURITY/#development","title":"Development","text":"<pre><code>ENVIRONMENT=development uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload\n</code></pre>"},{"location":"config_docs/CORS_SECURITY/#production_2","title":"Production","text":"<pre><code>ENVIRONMENT=production uvicorn api.main:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"config_docs/CORS_SECURITY/#docker-production","title":"Docker Production","text":"<pre><code>ENV ENVIRONMENT=production\nCMD [\"uvicorn\", \"api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/","title":"Async Translation API - Implementation Summary","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#overview","title":"Overview","text":"<p>I have successfully implemented a comprehensive async wrapper around the bilingual_book_maker library that provides non-blocking translation processing with job tracking and progress monitoring. The implementation is complete and ready for use.</p>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#completed-components","title":"\u2705 Completed Components","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#1-core-async-wrapper-async_translatorpy","title":"1. Core Async Wrapper (<code>async_translator.py</code>)","text":"<ul> <li>AsyncEPUBTranslator: Main wrapper around bilingual_book_maker</li> <li>Non-blocking execution: Uses ThreadPoolExecutor for background processing</li> <li>Model integration: Supports all existing translation models (ChatGPT, Claude, Gemini, etc.)</li> <li>Parameter compatibility: Maintains full compatibility with all bilingual_book_maker parameters</li> <li>Timeout management: 30-minute timeout with graceful handling</li> <li>Retry logic: Configurable retry with exponential backoff</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#2-job-management-system-job_managerpy","title":"2. Job Management System (<code>job_manager.py</code>)","text":"<ul> <li>Thread-safe operations: Full thread safety with RLock</li> <li>Job lifecycle management: PENDING \u2192 PROCESSING \u2192 COMPLETED/FAILED/CANCELLED</li> <li>Automatic cleanup: TTL-based cleanup (3 hours default) every 30 minutes</li> <li>Concurrent execution: Configurable worker pool (4 workers default)</li> <li>File management: Automatic upload/output/temp directory handling</li> <li>Progress tracking: Real-time paragraph count and percentage updates</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#3-progress-monitoring-progress_monitorpy","title":"3. Progress Monitoring (<code>progress_monitor.py</code>)","text":"<ul> <li>tqdm interception: Custom TqdmInterceptor that captures progress from bilingual_book_maker</li> <li>Real-time updates: Progress callbacks with 1-second intervals</li> <li>Percentage calculation: Automatic conversion to 0-100% progress</li> <li>Context management: Clean setup/teardown for job monitoring</li> <li>Thread-safe callbacks: Safe execution of progress callbacks</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#4-enhanced-data-models-modelspy","title":"4. Enhanced Data Models (<code>models.py</code>)","text":"<ul> <li>Pydantic models: Full validation for API requests/responses</li> <li>Job tracking: Comprehensive TranslationJob dataclass</li> <li>Status enumeration: Clear job status workflow</li> <li>Error responses: Structured error handling</li> <li>API documentation: Auto-generated OpenAPI/Swagger docs</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#5-error-handling-timeout-management-error_handlerpy","title":"5. Error Handling &amp; Timeout Management (<code>error_handler.py</code>)","text":"<ul> <li>Error classification: Timeout, Network, API, File, Validation, System errors</li> <li>Retry management: Intelligent retry logic with backoff</li> <li>Timeout handling: Background timeout monitoring with cancellation</li> <li>Error statistics: Tracking and reporting of error patterns</li> <li>Graceful degradation: Proper cleanup on failures</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#6-fastapi-application-mainpy","title":"6. FastAPI Application (<code>main.py</code>)","text":"<ul> <li>RESTful endpoints: Complete API with proper HTTP methods</li> <li>Async support: FastAPI with lifespan management</li> <li>File uploads: Multipart form handling for EPUB files</li> <li>CORS support: Cross-origin request handling</li> <li>Health monitoring: System health and statistics endpoints</li> <li>Documentation: Auto-generated API docs at <code>/docs</code></li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#7-comprehensive-testing-tests","title":"7. Comprehensive Testing (<code>tests/</code>)","text":"<ul> <li>Unit tests: Complete test coverage for all components</li> <li>Mock integration: Proper mocking of external dependencies</li> <li>Thread safety tests: Concurrent operation validation</li> <li>Error scenarios: Comprehensive error condition testing</li> <li>Integration examples: Real-world usage patterns</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#key-features-delivered","title":"\ud83d\ude80 Key Features Delivered","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#async-operation","title":"Async Operation","text":"<ul> <li>\u2705 Non-blocking translation processing</li> <li>\u2705 Background job execution with ThreadPoolExecutor</li> <li>\u2705 Immediate job ID return for tracking</li> <li>\u2705 Concurrent job support (4 workers default)</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#progress-monitoring","title":"Progress Monitoring","text":"<ul> <li>\u2705 Real-time progress updates (every 10% as requested)</li> <li>\u2705 tqdm interception from bilingual_book_maker</li> <li>\u2705 Paragraph count tracking (processed/total)</li> <li>\u2705 Progress percentage calculation</li> <li>\u2705 Last update timestamps</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#job-management","title":"Job Management","text":"<ul> <li>\u2705 Unique job IDs with UUID</li> <li>\u2705 Thread-safe job storage and retrieval</li> <li>\u2705 Automatic TTL cleanup (3 hours)</li> <li>\u2705 Job status lifecycle management</li> <li>\u2705 Cancellation support</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#error-handling","title":"Error Handling","text":"<ul> <li>\u2705 30-minute timeout with cleanup</li> <li>\u2705 Single retry on failure (configurable)</li> <li>\u2705 Comprehensive error classification</li> <li>\u2705 Graceful timeout and cancellation handling</li> <li>\u2705 Error statistics and monitoring</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#file-management","title":"File Management","text":"<ul> <li>\u2705 Automatic upload/output directory creation</li> <li>\u2705 Safe file handling with cleanup</li> <li>\u2705 Proper temp file management</li> <li>\u2705 Download endpoint for completed translations</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#api-endpoints","title":"API Endpoints","text":"<ul> <li>\u2705 <code>POST /translate</code> - Start translation (returns job_id)</li> <li>\u2705 <code>GET /status/{job_id}</code> - Real-time job status and progress</li> <li>\u2705 <code>GET /download/{job_id}</code> - Download completed files</li> <li>\u2705 <code>POST /cancel/{job_id}</code> - Cancel running jobs</li> <li>\u2705 <code>GET /jobs</code> - List jobs with filtering</li> <li>\u2705 <code>GET /health</code> - System health and stats</li> <li>\u2705 <code>DELETE /jobs/{job_id}</code> - Cleanup completed jobs</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#file-structure","title":"\ud83d\udcc1 File Structure","text":"<pre><code>api_layer/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 __init__.py              # Package exports\n\u2502   \u251c\u2500\u2500 async_translator.py     # Main async wrapper\n\u2502   \u251c\u2500\u2500 job_manager.py          # Job lifecycle management\n\u2502   \u251c\u2500\u2500 progress_monitor.py     # Progress interception\n\u2502   \u251c\u2500\u2500 error_handler.py        # Error handling and timeouts\n\u2502   \u251c\u2500\u2500 models.py               # Data models and validation\n\u2502   \u2514\u2500\u2500 main.py                 # FastAPI application\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_job_manager.py     # JobManager tests\n\u2502   \u251c\u2500\u2500 test_progress_monitor.py # Progress monitoring tests\n\u2502   \u2514\u2500\u2500 test_async_translator.py # Async translator tests\n\u251c\u2500\u2500 examples/\n\u2502   \u2514\u2500\u2500 example_usage.py        # Usage examples and client\n\u251c\u2500\u2500 requirements.txt            # API dependencies\n\u251c\u2500\u2500 integration_test.py         # Integration verification\n\u2514\u2500\u2500 README.md                   # Comprehensive documentation\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#usage-examples","title":"\ud83d\udd27 Usage Examples","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#1-start-translation","title":"1. Start Translation","text":"<pre><code>from api.async_translator import async_translator\nfrom api.models import TranslationModel\n\njob_id = async_translator.start_translation(\n    file_path=\"book.epub\",\n    model=TranslationModel.CHATGPT,\n    key=\"your-api-key\",\n    language=\"zh-cn\",\n    is_test=True,  # For testing\n    test_num=5\n)\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#2-monitor-progress","title":"2. Monitor Progress","text":"<pre><code>job = async_translator.get_job_status(job_id)\nprint(f\"Progress: {job.progress}% ({job.processed_paragraphs}/{job.total_paragraphs})\")\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#3-rest-api-usage","title":"3. REST API Usage","text":"<pre><code># Start translation\ncurl -X POST \"http://localhost:8000/translate\" \\\n  -F \"file=@book.epub\" \\\n  -F \"model=chatgpt\" \\\n  -F \"key=your-api-key\" \\\n  -F \"language=zh-cn\"\n\n# Check status\ncurl \"http://localhost:8000/status/{job_id}\"\n\n# Download result\ncurl -O \"http://localhost:8000/download/{job_id}\"\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#architecture-design","title":"\ud83c\udfd7\ufe0f Architecture Design","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#service-boundaries","title":"Service Boundaries","text":"<ul> <li>Translation Service: Async wrapper around bilingual_book_maker</li> <li>Job Management: Lifecycle and state management</li> <li>Progress Monitoring: Real-time progress tracking</li> <li>File Management: Upload/output/cleanup handling</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#data-flow","title":"Data Flow","text":"<ol> <li>Client uploads EPUB \u2192 Creates job \u2192 Returns job_id</li> <li>Background worker processes translation \u2192 Updates progress</li> <li>Client polls status \u2192 Gets real-time progress</li> <li>Translation completes \u2192 File available for download</li> <li>Automatic cleanup after TTL \u2192 Resources freed</li> </ol>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Horizontal: Designed for future AWS migration (SQS/DynamoDB/S3)</li> <li>Vertical: Configurable worker pool and memory management</li> <li>Resource: Automatic cleanup and efficient file handling</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#security-safety","title":"\ud83d\udd12 Security &amp; Safety","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#thread-safety","title":"Thread Safety","text":"<ul> <li>\u2705 RLock for job manager operations</li> <li>\u2705 Thread-safe progress monitoring</li> <li>\u2705 Atomic job state updates</li> <li>\u2705 Safe concurrent file operations</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#input-validation","title":"Input Validation","text":"<ul> <li>\u2705 File type validation (EPUB only)</li> <li>\u2705 Parameter validation with Pydantic</li> <li>\u2705 API key handling (not persisted)</li> <li>\u2705 Rate limiting ready (configurable)</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#resource-management","title":"Resource Management","text":"<ul> <li>\u2705 Automatic file cleanup</li> <li>\u2705 Memory-efficient job storage</li> <li>\u2705 Timeout protection</li> <li>\u2705 Graceful shutdown handling</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#unit-tests","title":"Unit Tests","text":"<ul> <li>\u2705 JobManager: Creation, lifecycle, cleanup, concurrency</li> <li>\u2705 ProgressMonitor: Callbacks, tqdm interception, thread safety</li> <li>\u2705 AsyncTranslator: Translation flow, error handling, retries</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#integration-tests","title":"Integration Tests","text":"<ul> <li>\u2705 End-to-end workflow validation</li> <li>\u2705 Progress monitoring integration</li> <li>\u2705 Error handling verification</li> <li>\u2705 File management testing</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#performance-tests","title":"Performance Tests","text":"<ul> <li>\u2705 Concurrent job handling</li> <li>\u2705 Memory usage patterns</li> <li>\u2705 Progress update frequency</li> <li>\u2705 Cleanup efficiency</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#deployment-ready","title":"\ud83d\ude80 Deployment Ready","text":""},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#development","title":"Development","text":"<pre><code>cd api_layer\npip install -r requirements.txt\npython api/main.py  # Starts on localhost:8000\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#production","title":"Production","text":"<pre><code>pip install uvicorn[standard]\nuvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 4\n</code></pre>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#docker-ready","title":"Docker Ready","text":"<p>The implementation is containerization-ready with proper dependency management.</p>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#future-migration-path","title":"\ud83d\udd2e Future Migration Path","text":"<p>The implementation provides clean interfaces for AWS migration:</p>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#phase-2-cloud-migration","title":"Phase 2: Cloud Migration","text":"<ul> <li>JobManager \u2192 DynamoDB for persistent job storage</li> <li>File Storage \u2192 S3 for scalable file management</li> <li>Progress Updates \u2192 CloudWatch for metrics and monitoring</li> <li>Job Queue \u2192 SQS for distributed job processing</li> <li>API Gateway \u2192 AWS API Gateway for enterprise features</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#clean-migration-interfaces","title":"Clean Migration Interfaces","text":"<ul> <li>Abstract storage layer in JobManager</li> <li>Configurable file storage backends</li> <li>Pluggable progress monitoring</li> <li>Environment-based configuration</li> </ul>"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#requirements-met","title":"\u2705 Requirements Met","text":"Requirement Status Implementation Non-blocking translation \u2705 ThreadPoolExecutor with job tracking Job tracking with unique IDs \u2705 UUID-based job identification Progress monitoring (10% updates) \u2705 tqdm interception with percentage calculation 30-minute timeout \u2705 Background timeout monitoring Single retry on failure \u2705 Configurable retry with exponential backoff Thread-safe operations \u2705 RLock and atomic operations 3-hour TTL cleanup \u2705 Automatic cleanup every 30 minutes No modifications to bilingual_book_maker \u2705 Wrapper pattern with monkey patching Backwards compatibility \u2705 All existing parameters supported Local development focus \u2705 In-memory storage with file-based persistence Clean AWS migration interfaces \u2705 Abstract storage and configurable backends"},{"location":"config_docs/IMPLEMENTATION_SUMMARY/#key-achievements","title":"\ud83c\udfaf Key Achievements","text":"<ol> <li>Complete Async Wrapper: Full async capabilities without modifying original code</li> <li>Real-time Progress: Accurate progress monitoring with tqdm interception</li> <li>Production Ready: Comprehensive error handling, timeouts, and cleanup</li> <li>Developer Friendly: Clean APIs, extensive documentation, and examples</li> <li>Scalable Design: Ready for both local development and cloud migration</li> <li>Robust Testing: Comprehensive test coverage for reliability</li> </ol> <p>The async wrapper is complete, tested, and ready for use. It provides a solid foundation for both local development and future AWS migration while maintaining full compatibility with the existing bilingual_book_maker functionality.</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/","title":"Frontend Design Guide: Bilingual Book Translation Service","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Technology Stack Recommendations</li> <li>Project Structure</li> <li>UI/UX Design Specifications</li> <li>Page Layouts &amp; Wireframes</li> <li>Component Design Specifications</li> <li>User Experience Flows</li> <li>Responsive Design Strategy</li> <li>Integration Architecture</li> <li>Development Workflow</li> </ol>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#technology-stack-recommendations","title":"Technology Stack Recommendations","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#core-framework","title":"Core Framework","text":"<ul> <li>React 18: Latest stable version with concurrent features and improved performance</li> <li>TypeScript: Full type safety for better developer experience and reduced runtime errors</li> <li>Vite: Fast build tool with hot module replacement for optimal development experience</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#state-management","title":"State Management","text":"<ul> <li>Zustand: Lightweight state management for global app state (user auth, translation jobs)</li> <li>React Query (TanStack Query): Server state management for API calls, caching, and synchronization</li> <li>React Hook Form: Performant form handling with minimal re-renders</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#styling-ui","title":"Styling &amp; UI","text":"<ul> <li>Tailwind CSS: Utility-first CSS framework for rapid prototyping and consistent design</li> <li>Headless UI: Unstyled, accessible UI components that integrate seamlessly with Tailwind</li> <li>Framer Motion: Smooth animations and transitions for enhanced user experience</li> <li>React Hot Toast: Clean, customizable toast notifications</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#file-handling","title":"File Handling","text":"<ul> <li>React Dropzone: Drag-and-drop file upload with validation</li> <li>File Type Detection: Client-side validation for EPUB, TXT, SRT, MD files</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#development-tools","title":"Development Tools","text":"<ul> <li>ESLint + Prettier: Code formatting and linting</li> <li>Husky: Git hooks for pre-commit validation</li> <li>Vitest: Fast unit testing framework</li> <li>React Testing Library: Component testing with user-centric approach</li> <li>Storybook: Component development and documentation</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#build-deployment","title":"Build &amp; Deployment","text":"<ul> <li>Vite: Production builds with code splitting and optimization</li> <li>Docker: Containerization for consistent deployment</li> <li>GitHub Actions: CI/CD pipeline for automated testing and deployment</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#project-structure","title":"Project Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2514\u2500\u2500 images/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 ui/                    # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 forms/                 # Form-specific components\n\u2502   \u2502   \u251c\u2500\u2500 layout/                # Layout components\n\u2502   \u2502   \u2514\u2500\u2500 features/              # Feature-specific components\n\u2502   \u251c\u2500\u2500 pages/                     # Page components\n\u2502   \u251c\u2500\u2500 hooks/                     # Custom React hooks\n\u2502   \u251c\u2500\u2500 services/                  # API service functions\n\u2502   \u251c\u2500\u2500 stores/                    # Zustand stores\n\u2502   \u251c\u2500\u2500 types/                     # TypeScript type definitions\n\u2502   \u251c\u2500\u2500 utils/                     # Utility functions\n\u2502   \u251c\u2500\u2500 constants/                 # App constants\n\u2502   \u2514\u2500\u2500 styles/                    # Global styles and Tailwind config\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 components/                # Component documentation\n\u2514\u2500\u2500 .storybook/                    # Storybook configuration\n</code></pre>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#uiux-design-specifications","title":"UI/UX Design Specifications","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#design-language","title":"Design Language","text":"<p>Modern Minimalism with Professional Trust Signals</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#color-palette","title":"Color Palette","text":"<ul> <li>Primary Blue: #2563EB (Professional, trustworthy)</li> <li>Secondary Purple: #7C3AED (Premium feel)</li> <li>Success Green: #059669 (Completion states)</li> <li>Warning Orange: #EA580C (Attention states)</li> <li>Error Red: #DC2626 (Error states)</li> <li>Neutral Grays: #F8FAFC, #E2E8F0, #64748B, #1E293B</li> <li>Background: #FFFFFF with subtle #F8FAFC sections</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#typography","title":"Typography","text":"<ul> <li>Primary Font: Inter (Clean, readable, professional)</li> <li>Headings: Font weights 600-700, sizes 24px-48px</li> <li>Body Text: Font weight 400, size 16px, line height 1.6</li> <li>Small Text: Font weight 400, size 14px</li> <li>Code/File Names: JetBrains Mono (monospace)</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#spacing-system","title":"Spacing System","text":"<ul> <li>Base Unit: 4px</li> <li>Component Spacing: 8px, 16px, 24px, 32px</li> <li>Section Spacing: 48px, 64px, 96px</li> <li>Container Max Width: 1200px with responsive padding</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#visual-elements","title":"Visual Elements","text":"<ul> <li>Border Radius: 8px for cards, 12px for buttons, 6px for inputs</li> <li>Shadows: Subtle elevation with warm gray shadows</li> <li>Borders: 1px solid with neutral colors</li> <li>Focus States: 2px blue outline with 2px offset</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#iconography","title":"Iconography","text":"<ul> <li>Icon Library: Heroicons (consistent with Headless UI)</li> <li>Icon Sizes: 16px, 20px, 24px, 32px</li> <li>Icon Style: Outline for most cases, solid for active states</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#page-layouts-wireframes","title":"Page Layouts &amp; Wireframes","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#landing-page-layout","title":"Landing Page Layout","text":"<p>Header Section - Fixed navigation bar with logo left, auth buttons right - Hero section with large headline, subtitle, and primary CTA - Visual element: Abstract book/translation graphic or animation</p> <p>Features Section - Three-column grid showcasing key features - Icons, headlines, and brief descriptions - Emphasis on speed, accuracy, and ease of use</p> <p>Pricing Tiers Section - Two-column comparison: Free vs Premium - Clear feature differentiation - Prominent upgrade CTA for premium tier</p> <p>Upload Preview Section - Interactive file upload demonstration - Supported file types with icons - File size and format restrictions clearly stated</p> <p>Footer - Links to documentation, support, terms - Social media links and company information</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#dashboard-layout-authenticated-users","title":"Dashboard Layout (Authenticated Users)","text":"<p>Sidebar Navigation - Collapsible sidebar with main navigation items - User profile section at top - Translation history, settings, billing links</p> <p>Main Content Area - Breadcrumb navigation - Page-specific content with consistent spacing - Action buttons aligned to right</p> <p>Status Panel - Real-time job status updates - Progress indicators for active translations - Quick access to recent translations</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#translation-upload-page","title":"Translation Upload Page","text":"<p>Centered Card Layout - Large file drop zone as primary focal point - Step-by-step process indicator at top - Configuration options below upload area - Progress through: Upload \u2192 Configure \u2192 Process \u2192 Download</p> <p>Configuration Panel - Source and target language selectors - Translation model selection (free vs premium) - Additional options for premium users - Clear pricing information for premium features</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#progress-tracking-page","title":"Progress Tracking Page","text":"<p>Real-time Dashboard - Large progress circle or bar showing completion percentage - Estimated time remaining - Current processing step with detailed status - Cancel option with confirmation modal</p> <p>Job Details Card - File information (name, size, type) - Selected languages and model - Start time and estimated completion - Option to navigate away and return later</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#component-design-specifications","title":"Component Design Specifications","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#file-upload-component","title":"File Upload Component","text":"<p>Visual Design - Large dashed border rectangle (300px height minimum) - Drag-and-drop area with hover state animations - Central upload icon (cloud with arrow) - Instructional text below icon - Supported file types listed at bottom - File size limit clearly stated</p> <p>Interaction States - Default: Subtle gray border with upload icon - Hover: Border color shifts to primary blue - Drag Over: Background color changes to light blue - Error: Red border with error message - Success: Green border with file preview</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#language-selector-component","title":"Language Selector Component","text":"<p>Design Pattern - Searchable dropdown with flag icons - Popular languages at top of list - Alphabetical sorting for remaining languages - Clear visual distinction between source and target - Swap languages button between selectors</p> <p>Features - Type-ahead search functionality - Flag icons for visual language identification - Recent language history for quick selection - Validation for same source/target language</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#progress-indicator-component","title":"Progress Indicator Component","text":"<p>Circular Progress Design - Large central circle with percentage text - Animated progress ring in primary color - Background ring in light gray - Processing stage text below circle - Estimated time remaining at bottom</p> <p>Linear Progress Alternative - Multi-step progress bar for complex processes - Current step highlighted in primary color - Completed steps in success green - Future steps in light gray - Step labels below progress bar</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#translation-model-selector","title":"Translation Model Selector","text":"<p>Card-Based Layout - Two distinct cards: Free and Premium - Clear feature comparison - Pricing information for premium - Model quality indicators (speed, accuracy) - User tier badge for current selection</p> <p>Premium Upsell Elements - \"Upgrade\" badge on premium card - Feature comparison tooltips - Quality examples or previews - Clear call-to-action for account creation</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#navigation-header","title":"Navigation Header","text":"<p>Layout Structure - Logo/brand on far left - Main navigation items in center - User account/auth controls on right - Responsive hamburger menu for mobile</p> <p>Authentication States - Anonymous: Sign In and Sign Up buttons - Authenticated: User avatar, dropdown menu - Premium badge for upgraded users - Logout option in user dropdown</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#file-history-table","title":"File History Table","text":"<p>Table Design - Clean table with alternating row colors - Sortable columns (date, file name, status) - Status indicators with color coding - Action buttons for download/retry - Pagination for large lists</p> <p>Status Indicators - Processing: Animated spinner with blue color - Completed: Green checkmark icon - Failed: Red X icon with error tooltip - Cancelled: Gray X icon</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#toast-notification-system","title":"Toast Notification System","text":"<p>Notification Types - Success: Green background with checkmark - Error: Red background with X icon - Warning: Orange background with triangle - Info: Blue background with info icon</p> <p>Behavior - Slide in from top-right corner - Auto-dismiss after 5 seconds (except errors) - Manual dismiss option - Stack multiple notifications - Responsive positioning</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#user-experience-flows-mvp","title":"User Experience Flows (MVP)","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#anonymous-user-journey","title":"Anonymous User Journey","text":"<p>Initial Landing 1. User arrives at landing page 2. Sees clear value proposition: \"Translate books instantly\" 3. Views simple upload form with Google Translate (free) 4. Sees signup prompt for access to better models</p> <p>Free Translation Flow 1. User drags/selects file for upload 2. File validation occurs client-side 3. Selects source and target languages 4. Only Google Translate available (no premium options) 5. Clicks \"Start Translation\" 6. Uploads file and receives job ID 7. Redirected to progress tracking page 8. Monitors basic progress updates 9. Downloads completed translation 10. Sees signup prompt for premium models</p> <p>Signup Consideration 1. User sees \"Want better translations?\" section 2. Views benefits: ChatGPT-4, Claude, Gemini Flash 3. Understands they bring their own API keys 4. No payment required, just account creation</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#registered-user-journey","title":"Registered User Journey","text":"<p>Authentication Flow 1. User clicks \"Sign Up/Login\" from header 2. Simple form with email/password 3. No social login complexity in MVP 4. Successful login redirects to main page (same layout) 5. Failed login shows clear error messages</p> <p>Enhanced Translation Flow 1. User sees same upload form but with all models available 2. Models with \ud83d\udd11 icon require API keys 3. Can select premium models if API keys configured 4. Same upload \u2192 progress \u2192 download flow 5. No file storage or history tracking</p> <p>API Key Setup 1. User clicks \"API Keys\" in navigation 2. Views simple setup page for each provider 3. Adds API keys for desired models 4. Keys are encrypted and not stored permanently 5. Can test keys and update as needed</p> <p>No Complex Management - No dashboards or analytics - No translation history or file management - No billing or subscription flows - No complex user preferences - Files automatically cleaned up after hours</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#error-recovery-flows","title":"Error Recovery Flows","text":"<p>File Upload Errors 1. Invalid file type: Clear error message with supported formats 2. File too large: Error with size limit and compression suggestions 3. Network error: Retry option with exponential backoff 4. Server error: Contact support option with error ID</p> <p>Translation Failures 1. Processing error: Retry option with different model 2. Timeout: Explanation and retry with smaller chunks 3. Language detection failure: Manual language selection 4. API limit reached: Clear explanation and upgrade path</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#responsive-design-strategy","title":"Responsive Design Strategy","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#breakpoint-system","title":"Breakpoint System","text":"<ul> <li>Mobile: 320px - 767px</li> <li>Tablet: 768px - 1023px</li> <li>Desktop: 1024px - 1439px</li> <li>Large Desktop: 1440px+</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#mobile-first-approach","title":"Mobile-First Approach","text":"<p>Layout Adaptations - Single column layouts on mobile - Collapsible navigation with hamburger menu - Touch-friendly button sizes (44px minimum) - Optimized file upload for mobile cameras - Swipe gestures for table navigation</p> <p>Component Responsive Behavior - Language selectors stack vertically on mobile - Progress indicators scale to fit screen width - Tables become horizontally scrollable - Forms use full-width inputs with proper spacing - Modals become full-screen on small devices</p> <p>Performance Considerations - Progressive image loading - Compressed images for mobile devices - Reduced animations on slower devices - Optimized bundle splitting for mobile - Service worker for offline functionality</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#tablet-optimization","title":"Tablet Optimization","text":"<ul> <li>Two-column layouts where appropriate</li> <li>Larger touch targets for better usability</li> <li>Optimized keyboard interactions</li> <li>Portrait and landscape mode support</li> <li>Sidebar navigation remains accessible</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#desktop-enhancement","title":"Desktop Enhancement","text":"<ul> <li>Multi-column layouts for efficient space usage</li> <li>Hover states and tooltips for better UX</li> <li>Keyboard shortcuts for power users</li> <li>Drag-and-drop functionality</li> <li>Side-by-side comparison views</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#integration-architecture","title":"Integration Architecture","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#api-communication-strategy","title":"API Communication Strategy","text":"<p>HTTP Client Configuration - Axios or Fetch with interceptors - Base URL configuration for environment switching - Request/response transformation - Error handling with user-friendly messages - Retry logic for network failures</p> <p>Authentication Integration - Bearer token storage in httpOnly cookies - Token refresh mechanism - Automatic logout on token expiration - Protected route handling - API key management for premium users</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#real-time-updates","title":"Real-time Updates","text":"<p>WebSocket Integration - Connection management with reconnection logic - Progress updates for translation jobs - Real-time status notifications - Heartbeat mechanism for connection health - Graceful fallback to polling if needed</p> <p>Polling Strategy - Progressive polling intervals (start fast, slow down) - Exponential backoff on errors - User-aware polling (pause when tab inactive) - Automatic stop when job completes - Bandwidth-conscious implementation</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#file-handling_1","title":"File Handling","text":"<p>Upload Strategy - Chunked uploads for large files - Progress tracking during upload - Resume capability for interrupted uploads - Client-side file validation - Preview generation for supported formats</p> <p>Download Management - Streaming downloads for large files - Progress indication during download - Automatic filename generation - Browser compatibility handling - Error recovery for failed downloads</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#caching-strategy","title":"Caching Strategy","text":"<p>API Response Caching - Translation history cached locally - Language lists cached with long TTL - User preferences stored locally - Job status updates with smart invalidation - Offline functionality for cached data</p> <p>Asset Caching - Component code splitting - Lazy loading for non-critical components - Image optimization and caching - Font loading optimization - Service worker for asset caching</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#development-workflow","title":"Development Workflow","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#project-setup-process","title":"Project Setup Process","text":"<p>Initial Environment 1. Node.js version management with nvm 2. Package manager preference (npm, yarn, or pnpm) 3. Environment variable configuration 4. Local development server setup 5. Backend API connection configuration</p> <p>Development Dependencies 1. Code formatting tools installation 2. Git hooks setup for pre-commit validation 3. Testing framework configuration 4. Storybook setup for component development 5. Build tools and optimization plugins</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#build-system-configuration","title":"Build System Configuration","text":"<p>Development Build - Hot module replacement for fast iteration - Source maps for debugging - Development-only features (Redux DevTools) - Mock API integration for offline development - Error overlay for runtime errors</p> <p>Production Build - Code minification and tree shaking - Asset optimization and compression - Bundle analysis for size optimization - Source map generation for error tracking - Environment-specific configurations</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#testing-strategy","title":"Testing Strategy","text":"<p>Unit Testing - Component testing with React Testing Library - Hook testing with specialized utilities - Utility function testing - Mock API responses for isolated testing - Coverage requirements and reporting</p> <p>Integration Testing - User flow testing with realistic scenarios - API integration testing with mock server - Error handling and edge case testing - Performance testing for critical paths - Accessibility testing with automated tools</p> <p>End-to-End Testing - Full user journey automation - Cross-browser compatibility testing - Mobile device testing - Performance monitoring in real browsers - Visual regression testing</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#quality-assurance","title":"Quality Assurance","text":"<p>Code Quality Gates - ESLint rules for code consistency - Prettier for automatic formatting - TypeScript strict mode for type safety - Pre-commit hooks for validation - Automated dependency vulnerability scanning</p> <p>Performance Monitoring - Bundle size tracking and alerts - Core Web Vitals monitoring - User interaction tracking - Error boundary implementation - Performance budgets and enforcement</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#deployment-pipeline","title":"Deployment Pipeline","text":"<p>Staging Environment - Automatic deployment from feature branches - Integration testing with staging API - Manual QA validation process - Performance testing in staging - User acceptance testing platform</p> <p>Production Deployment - Automated deployment from main branch - Blue-green deployment strategy - Database migration coordination - Feature flag management - Rollback procedures and monitoring</p> <p>Monitoring and Maintenance - Application performance monitoring - Error tracking and alerting - User analytics and behavior tracking - A/B testing framework - Regular dependency updates and security patches</p>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#additional-considerations","title":"Additional Considerations","text":""},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#accessibility-requirements","title":"Accessibility Requirements","text":"<ul> <li>WCAG 2.1 AA compliance</li> <li>Keyboard navigation support</li> <li>Screen reader optimization</li> <li>Color contrast validation</li> <li>Focus management for dynamic content</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#security-measures","title":"Security Measures","text":"<ul> <li>Content Security Policy implementation</li> <li>XSS prevention mechanisms</li> <li>Secure file upload validation</li> <li>API request sanitization</li> <li>User data protection compliance</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#performance-targets","title":"Performance Targets","text":"<ul> <li>First Contentful Paint: &lt; 1.5s</li> <li>Largest Contentful Paint: &lt; 2.5s</li> <li>Cumulative Layout Shift: &lt; 0.1</li> <li>First Input Delay: &lt; 100ms</li> <li>Bundle size: &lt; 300KB gzipped</li> </ul>"},{"location":"frontend/FRONTEND_DESIGN_GUIDE/#internationalization","title":"Internationalization","text":"<ul> <li>Multi-language UI support</li> <li>RTL language compatibility</li> <li>Cultural adaptation for different markets</li> <li>Date and number formatting</li> <li>Currency and region-specific features</li> </ul> <p>This comprehensive design guide provides the foundation for building a professional, user-friendly frontend for the bilingual book translation service while maintaining focus on the freemium business model and seamless user experience.</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/","title":"Bilingual Book Maker - Service Architecture &amp; UX Technical Guide","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Service Architecture Overview</li> <li>Business Logic &amp; User Tiers</li> <li>API Contract Specifications</li> <li>User Experience Flows</li> <li>Error Handling Patterns</li> <li>Real-time Communication</li> <li>Security Model</li> <li>Performance Characteristics</li> <li>Integration Guidelines</li> <li>Development Environment Setup</li> </ol>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#1-service-architecture-overview","title":"1. Service Architecture Overview","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#core-service-components","title":"Core Service Components","text":"<p>The bilingual book translation service is built on a production-ready FastAPI backend with async job processing. Understanding the architecture is crucial for designing appropriate user experiences.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Frontend Application                      \u2502\n\u2502             (Your UI/UX Implementation)                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502 HTTP/REST API\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              FastAPI Backend (localhost:8000)           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502  Endpoints  \u2502 \u2502 AsyncTranslator \u2502 \u2502   JobManager    \u2502 \u2502\n\u2502 \u2502             \u2502 \u2502                 \u2502 \u2502                 \u2502 \u2502\n\u2502 \u2502 /translate  \u2502 \u2502 \u2022 Job Creation  \u2502 \u2502 \u2022 Thread Pool   \u2502 \u2502\n\u2502 \u2502 /status     \u2502 \u2502 \u2022 Progress      \u2502 \u2502 \u2022 Job Storage   \u2502 \u2502\n\u2502 \u2502 /download   \u2502 \u2502 \u2022 Translation   \u2502 \u2502 \u2022 TTL Cleanup   \u2502 \u2502\n\u2502 \u2502 /health     \u2502 \u2502   Orchestration \u2502 \u2502 \u2022 File Mgmt     \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Translation Engine Layer                     \u2502\n\u2502                                                         \u2502\n\u2502  \u2022 ChatGPT/GPT-4    \u2022 Claude      \u2022 Google Translate   \u2502\n\u2502  \u2022 Gemini           \u2022 DeepL       \u2022 Groq               \u2502\n\u2502  \u2022 Qwen             \u2022 xAI Grok    \u2022 DeepL Free         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#key-architectural-patterns","title":"Key Architectural Patterns","text":"<p>1. Async Request-Response Pattern - File upload returns immediate <code>job_id</code> - Translation happens in background thread - Client polls <code>/status/{job_id}</code> for progress - Download via <code>/download/{job_id}</code> when complete</p> <p>2. Stateful Job Management - Jobs persist in memory with TTL (24 hours default) - Comprehensive job lifecycle tracking - Thread-safe concurrent processing - Automatic cleanup of expired jobs</p> <p>3. File Processing Pipeline - Comprehensive validation (size, format, security) - Temporary file storage with unique paths - Progress tracking via tqdm interception - Output file generation with bilingual suffix</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#service-capabilities-constraints","title":"Service Capabilities &amp; Constraints","text":"<p>Supported File Formats: For MVP phase we set it to 500KB, will increased in the future. - EPUB (eBooks) - up to 500KB - TXT (Plain text) - up to 500KB - SRT (Subtitles) - up to 500KB - MD (Markdown) - up to 500KB</p> <p>Processing Characteristics: - Concurrent job limit: 4 workers (configurable) - Job TTL: 24 hours (configurable) - Progress granularity: Per paragraph/chapter - Test mode: 5 paragraphs only</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#2-business-logic-user-tiers","title":"2. Business Logic &amp; User Tiers","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#freemium-model-implementation","title":"Freemium Model Implementation","text":"<p>The service implements a freemium business model with two distinct user tiers:</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#anonymous-users-free-tier","title":"Anonymous Users (Free Tier)","text":"<pre><code>{\n  \"authentication\": \"None required\",\n  \"models_available\": [\"google\"],\n  \"api_key_required\": false,\n  \"rate_limits\": \"None (Google Translate is free)\",\n  \"quality\": \"Basic translation\",\n  \"features\": [\"All file formats\", \"Test mode\", \"Progress tracking\"]\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#registered-users-premium-tier","title":"Registered Users (Premium Tier)","text":"<pre><code>{\n  \"authentication\": \"Bearer token optional (MVP: unrestricted access)\",\n  \"models_available\": [\n    \"chatgpt\", \"claude\", \"gemini_flash\", \"deepl\",\n    \"deepl_free\", \"groq\", \"qwen\", \"xai\"\n  ],\n  \"api_key_required\": true,\n  \"rate_limits\": \"None in MVP (users provide own API keys)\",\n  \"quality\": \"High-quality AI translation\",\n  \"features\": [\"All free features\", \"Premium models\", \"API management\"]\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#authentication-flow","title":"Authentication Flow","text":"<p>For Anonymous Users:</p> <pre><code>// No authentication needed\nconst response = await fetch('/translate', {\n  method: 'POST',\n  body: formData // model: 'google'\n});\n</code></pre> <p>For Premium Users:</p> <pre><code>// Bearer token optional in MVP (all models accessible with valid translation service API keys)\nconst response = await fetch('/translate', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer bbm_your_api_key_here'\n  },\n  body: formData // model: 'chatgpt', 'claude', 'gemini_flash', etc.\n});\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#business-logic-validation","title":"Business Logic Validation","text":"<p>The backend enforces business rules automatically:</p> <ol> <li>Model Access Control: Premium models require authentication</li> <li>API Key Validation: Translation service keys validated per model</li> <li>Rate Limiting: Per-user limits for premium tiers</li> <li>Usage Tracking: Per-key usage statistics</li> </ol>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#3-api-contract-specifications","title":"3. API Contract Specifications","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#core-endpoints","title":"Core Endpoints","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#post-translate-start-translation-job","title":"POST /translate - Start Translation Job","text":"<p>Request Format:</p> <pre><code>POST /translate HTTP/1.1\nContent-Type: multipart/form-data\nAuthorization: Bearer bbm_api_key (optional in MVP - all models accessible with valid translation service keys)\n\nfile: [EPUB/TXT/SRT/MD file, max 500KB]\nmodel: \"google\" | \"chatgpt\" | \"claude\" | \"gemini_flash\" | \"deepl\" | \"deepl_free\" | \"groq\" | \"qwen\" | \"xai\"\nkey: \"translation_service_api_key\" (default: \"no-key-required\")\nlanguage: \"zh-cn\" (default, target language code)\nis_test: false (boolean, test mode with 5 paragraphs)\ntemperature: 1.0 (0.0-2.0, creativity level)\nmodel_api_base: \"https://custom-api.com\" (optional)\nresume: false (resume previous translation)\nsingle_translate: false (single vs dual language output)\ncontext_flag: false (use context for translation)\nsource_lang: \"auto\" (source language detection)\n</code></pre> <p>Response Format:</p> <pre><code>{\n  \"job_id\": \"uuid-string\",\n  \"status\": \"pending\",\n  \"message\": \"Translation job started successfully\",\n  \"estimated_duration\": \"5-30 minutes depending on file size and model\"\n}\n</code></pre> <p>Error Responses:</p> <pre><code>// File validation error (400)\n{\n  \"error\": \"File validation failed\",\n  \"detail\": \"File too large: 1.2MB exceeds 0.5MB limit\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n\n// Authentication required (401) - Note: In MVP, all models accessible with valid service API keys\n{\n  \"error\": \"Authentication required\",\n  \"detail\": \"Authentication required for premium models (chatgpt, claude, gemini_flash, deepl, groq, qwen, xai). Available without auth: Google Translate (free)\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n\n// Invalid API key (400)\n{\n  \"error\": \"Invalid API key\",\n  \"detail\": \"Translation service API key is required for chatgpt\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#get-statusjob_id-check-job-progress","title":"GET /status/{job_id} - Check Job Progress","text":"<p>Response Format:</p> <pre><code>{\n  \"job_id\": \"uuid-string\",\n  \"status\": \"processing\", // pending|processing|completed|failed|cancelled\n  \"progress\": 45, // 0-100 percentage\n  \"filename\": \"book.epub\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"completed_at\": null,\n  \"error_message\": null,\n  \"download_url\": null, // Available when status=completed\n  \"total_paragraphs\": 150,\n  \"processed_paragraphs\": 67,\n  \"model\": \"chatgpt\",\n  \"target_language\": \"zh-cn\"\n}\n</code></pre> <p>Real-time Progress Example:</p> <pre><code>// Initial state\n{\"status\": \"pending\", \"progress\": 0}\n\n// Processing\n{\"status\": \"processing\", \"progress\": 23, \"processed_paragraphs\": 34, \"total_paragraphs\": 148}\n\n// Completed\n{\"status\": \"completed\", \"progress\": 100, \"download_url\": \"/download/uuid-string\"}\n\n// Failed\n{\"status\": \"failed\", \"error_message\": \"API key invalid or expired\"}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#get-downloadjob_id-download-result","title":"GET /download/{job_id} - Download Result","text":"<p>Response: - Content-Type: application/epub+zip | text/plain | application/x-subrip | text/markdown - Content-Disposition: attachment; filename=\"book_bilingual.epub\" - File stream with translated content</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#additional-endpoints","title":"Additional Endpoints","text":"<pre><code>GET /health          # Service health check\nGET /jobs            # List user jobs (with pagination)\nPOST /cancel/{job_id} # Cancel running job\nDELETE /jobs/{job_id} # Delete completed job\nGET /models          # List available models\nGET /stats           # System statistics\nPOST /cleanup        # Manual cleanup of expired jobs (admin)\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#4-user-experience-flows","title":"4. User Experience Flows","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#flow-1-anonymous-user-translation","title":"Flow 1: Anonymous User Translation","text":"<p>UX Design Considerations: 1. No signup friction - Users can start immediately 2. Clear model limitation - Google Translate only 3. Progress feedback - Real-time progress bar 4. File constraints - Clear 500KB limit messaging</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant B as Backend\n\n    U-&gt;&gt;F: Upload EPUB file\n    F-&gt;&gt;F: Validate file size/format client-side\n    F-&gt;&gt;B: POST /translate (model: google)\n    B-&gt;&gt;B: Validate file, create job\n    B--&gt;&gt;F: 200 {job_id, status: pending}\n    F-&gt;&gt;F: Show \"Translation starting...\"\n\n    loop Every 2-3 seconds\n        F-&gt;&gt;B: GET /status/{job_id}\n        B--&gt;&gt;F: {status: processing, progress: 45%}\n        F-&gt;&gt;F: Update progress bar\n    end\n\n    B--&gt;&gt;F: {status: completed, download_url}\n    F-&gt;&gt;F: Show \"Translation complete!\"\n    U-&gt;&gt;F: Click download\n    F-&gt;&gt;B: GET /download/{job_id}\n    B--&gt;&gt;F: Translated file\n    F-&gt;&gt;U: Download bilingual book\n</code></pre> <p>Key UX Timing Expectations: - Job creation: &lt; 500ms - Status polling: Every 2-3 seconds - Translation time: 3-15 minutes for typical EPUB - Download: Immediate once completed</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#flow-2-premium-user-translation","title":"Flow 2: Premium User Translation","text":"<p>UX Design Considerations: 1. Authentication flow - API key entry/management 2. Model selection - Dropdown with quality descriptions 3. API key validation - Real-time feedback 4. Advanced options - Collapsible settings panel</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant B as Backend\n\n    U-&gt;&gt;F: Enter API key &amp; select model\n    F-&gt;&gt;F: Store API key securely\n    U-&gt;&gt;F: Upload file, select \"Claude\"\n    F-&gt;&gt;B: POST /translate (Authorization: Bearer key)\n\n    alt Valid authentication &amp; API key\n        B--&gt;&gt;F: 200 {job_id, estimated_duration}\n        F-&gt;&gt;F: Show enhanced progress with model info\n    else Authentication failed\n        B--&gt;&gt;F: 401 {error: \"Authentication required\"}\n        F-&gt;&gt;F: Show upgrade prompt\n    else Invalid translation API key\n        B--&gt;&gt;F: 400 {error: \"Invalid Claude API key\"}\n        F-&gt;&gt;F: Show API key help\n    end\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#flow-3-error-recovery-patterns","title":"Flow 3: Error Recovery Patterns","text":"<p>File Validation Errors:</p> <pre><code>// Handle client-side validation\nfunction validateFile(file) {\n  const maxSize = 500 * 1024 * 1024; // 500KB\n  const allowedTypes = ['.epub', '.txt', '.srt', '.md'];\n\n  if (file.size &gt; maxSize) {\n    return {\n      valid: false,\n      message: `File too large (${(file.size/1024/1024).toFixed(1)}MB). Maximum size is 500KB.`\n    };\n  }\n\n  const extension = file.name.toLowerCase().split('.').pop();\n  if (!allowedTypes.includes('.' + extension)) {\n    return {\n      valid: false,\n      message: `Unsupported format (.${extension}). Supported: EPUB, TXT, SRT, MD`\n    };\n  }\n\n  return {valid: true};\n}\n</code></pre> <p>Translation Failure Recovery:</p> <pre><code>// Handle various failure modes\nfunction handleTranslationError(error) {\n  switch(error.status) {\n    case 401:\n      showAuthenticationModal();\n      break;\n    case 400:\n      if (error.detail.includes('API key')) {\n        showAPIKeyHelp();\n      } else {\n        showFileValidationError(error.detail);\n      }\n      break;\n    case 429:\n      showRateLimitMessage(error.headers['Retry-After']);\n      break;\n    case 500:\n      showRetryOption();\n      break;\n  }\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#5-error-handling-patterns","title":"5. Error Handling Patterns","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#error-categories-frontend-responses","title":"Error Categories &amp; Frontend Responses","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#1-file-validation-errors-400-bad-request","title":"1. File Validation Errors (400 Bad Request)","text":"<pre><code>{\n  \"error\": \"File validation failed\",\n  \"detail\": \"File too large: 1.2MB exceeds 0.5MB limit\"\n}\n</code></pre> <p>UX Response: - Show inline validation message - Highlight file upload area in red - Provide clear remediation steps - Don't block other functionality</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#2-authentication-errors-401-unauthorized","title":"2. Authentication Errors (401 Unauthorized)","text":"<pre><code>{\n  \"error\": \"Authentication required\",\n  \"detail\": \"Authentication required for premium models\"\n}\n</code></pre> <p>UX Response: - Show authentication modal/form - Explain benefit of premium models - Offer fallback to Google Translate - Preserve user's file selection</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#3-translation-service-errors-400-bad-request","title":"3. Translation Service Errors (400 Bad Request)","text":"<pre><code>{\n  \"error\": \"Translation service error\",\n  \"detail\": \"Invalid OpenAI API key\"\n}\n</code></pre> <p>UX Response: - Show API key validation error - Link to service API key documentation - Suggest trying different model - Validate keys before job submission</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#4-rate-limiting-429-too-many-requests","title":"4. Rate Limiting (429 Too Many Requests)","text":"<pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"detail\": \"Rate limit exceeded. Please try again later.\",\n  \"headers\": {\"Retry-After\": \"3600\"}\n}\n</code></pre> <p>UX Response: - Show countdown timer - Explain rate limiting - Suggest model alternatives - Queue request for retry</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#5-job-processing-errors-job-status-failed","title":"5. Job Processing Errors (Job Status: failed)","text":"<pre><code>{\n  \"status\": \"failed\",\n  \"error_message\": \"Translation model timeout after 30 minutes\"\n}\n</code></pre> <p>UX Response: - Show specific failure reason - Offer retry with different model - Suggest test mode for large files - Preserve user settings for retry</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#error-recovery-strategies","title":"Error Recovery Strategies","text":"<p>Progressive Degradation: 1. Try premium model \u2192 fallback to Google Translate 2. Try full translation \u2192 suggest test mode 3. Try current settings \u2192 reset to defaults</p> <p>User Communication:</p> <pre><code>const errorMessages = {\n  'file_too_large': 'Your file is larger than our 500KB limit. Try compressing or splitting it.',\n  'invalid_format': 'We support EPUB, TXT, SRT, and MD files. Please convert your file.',\n  'api_key_invalid': 'Your API key seems to be invalid. Check your account settings.',\n  'rate_limited': 'You\\'ve hit your hourly limit. Upgrade for higher limits or try again later.',\n  'translation_timeout': 'Translation took too long. Try test mode first or use a different model.'\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#6-real-time-communication","title":"6. Real-time Communication","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#progress-tracking-implementation","title":"Progress Tracking Implementation","text":"<p>The backend doesn't use WebSockets - instead it uses efficient polling with tqdm interception for granular progress updates.</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#polling-strategy","title":"Polling Strategy","text":"<p>Recommended Polling Pattern:</p> <pre><code>class TranslationProgressTracker {\n  constructor(jobId) {\n    this.jobId = jobId;\n    this.pollInterval = 2000; // Start with 2 seconds\n    this.maxPollInterval = 10000; // Max 10 seconds\n    this.backoffMultiplier = 1.2;\n  }\n\n  async startPolling() {\n    while (true) {\n      try {\n        const status = await this.checkStatus();\n\n        if (status.status === 'completed') {\n          this.onComplete(status);\n          break;\n        }\n\n        if (status.status === 'failed') {\n          this.onError(status);\n          break;\n        }\n\n        this.onProgress(status);\n        await this.sleep(this.pollInterval);\n\n        // Adaptive polling - slow down if no progress\n        if (this.lastProgress === status.progress) {\n          this.pollInterval = Math.min(\n            this.pollInterval * this.backoffMultiplier,\n            this.maxPollInterval\n          );\n        } else {\n          this.pollInterval = 2000; // Reset to fast polling\n        }\n\n        this.lastProgress = status.progress;\n\n      } catch (error) {\n        this.onError({error_message: error.message});\n        break;\n      }\n    }\n  }\n\n  async checkStatus() {\n    const response = await fetch(`/status/${this.jobId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#progress-granularity","title":"Progress Granularity","text":"<p>The backend provides detailed progress information:</p> <pre><code>{\n  \"progress\": 67, // Overall percentage 0-100\n  \"total_paragraphs\": 450, // Total units to process\n  \"processed_paragraphs\": 301, // Units completed\n  \"status\": \"processing\" // Current stage\n}\n</code></pre> <p>UX Implementation:</p> <pre><code>function updateProgressUI(status) {\n  // Main progress bar\n  document.getElementById('progress-bar').style.width = `${status.progress}%`;\n\n  // Detailed progress text\n  document.getElementById('progress-text').textContent =\n    `Processing ${status.processed_paragraphs} of ${status.total_paragraphs} paragraphs (${status.progress}%)`;\n\n  // Estimated time remaining (calculate based on progress rate)\n  const timeRemaining = this.calculateETA(status);\n  document.getElementById('eta').textContent = `About ${timeRemaining} remaining`;\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#performance-optimizations","title":"Performance Optimizations","text":"<p>Efficient Polling: - Start with 2-second intervals during active processing - Back off to 10-second intervals during stall periods - Stop polling immediately on completion/failure - Use <code>If-Modified-Since</code> headers to reduce bandwidth</p> <p>Battery/Performance Considerations:</p> <pre><code>// Pause polling when tab/window is not visible\ndocument.addEventListener('visibilitychange', () =&gt; {\n  if (document.hidden) {\n    this.pausePolling();\n  } else {\n    this.resumePolling();\n  }\n});\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#7-security-model","title":"7. Security Model","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#authentication-architecture","title":"Authentication Architecture","text":"<p>API Key Format: - Prefix: <code>bbm_</code> (Bilingual Book Maker) - Length: 44 characters total - Generation: Cryptographically secure random tokens - Storage: SHA-256 hashed in backend</p> <p>Token Validation:</p> <pre><code>Authorization: Bearer bbm_abcdef1234567890abcdef1234567890abcdef12\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#file-upload-security","title":"File Upload Security","text":"<p>The backend implements comprehensive security validation:</p>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#1-file-content-validation","title":"1. File Content Validation","text":"<pre><code>// These validations happen automatically on backend\nconst securityValidations = {\n  'file_size_check': 'Files limited to 500KB',\n  'extension_validation': 'Only .epub, .txt, .srt, .md allowed',\n  'magic_bytes_check': 'File headers validated against claimed type',\n  'content_scanning': 'Malicious pattern detection',\n  'path_traversal_prevention': 'Filename sanitization',\n  'mime_type_validation': 'Content-Type header validation'\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#2-frontend-security-responsibilities","title":"2. Frontend Security Responsibilities","text":"<pre><code>// Client-side validation (supplement, not replacement)\nfunction secureFileHandling(file) {\n  // Validate on client-side for immediate feedback\n  const validation = validateFile(file);\n  if (!validation.valid) {\n    throw new Error(validation.message);\n  }\n\n  // Never trust client-side validation alone\n  // Backend will re-validate everything\n\n  // Sanitize filename for display\n  const displayName = sanitizeDisplayName(file.name);\n\n  return {file, displayName};\n}\n\nfunction sanitizeDisplayName(filename) {\n  // Remove path separators and limit length for display\n  return filename.replace(/[\\/\\\\]/g, '').slice(0, 50);\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#data-protection","title":"Data Protection","text":"<p>File Storage Security: - Temporary upload files with unique UUIDs - Automatic cleanup after TTL expires - No permanent storage of user files - Output files auto-deleted after 24 hours</p> <p>API Security Headers:</p> <pre><code>X-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nReferrer-Policy: strict-origin-when-cross-origin\nContent-Security-Policy: default-src 'self'\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#cors-configuration","title":"CORS Configuration","text":"<p>Development (localhost:8000):</p> <pre><code>{\n  \"allowed_origins\": [\"http://localhost:3000\", \"http://localhost:8080\"],\n  \"allowed_methods\": [\"*\"],\n  \"allowed_headers\": [\"*\"]\n}\n</code></pre> <p>Production:</p> <pre><code>{\n  \"allowed_origins\": [\"https://yourdomain.com\"],\n  \"allowed_methods\": [\"GET\", \"POST\", \"DELETE\", \"OPTIONS\"],\n  \"allowed_headers\": [\"Content-Type\", \"Authorization\", \"Accept\"]\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#8-performance-characteristics","title":"8. Performance Characteristics","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#response-time-expectations","title":"Response Time Expectations","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#api-response-times","title":"API Response Times","text":"<pre><code>{\n  \"endpoint\": \"/translate\",\n  \"typical_response_time\": \"&lt; 500ms\",\n  \"includes\": \"File validation, job creation, response generation\"\n}\n</code></pre> <pre><code>{\n  \"endpoint\": \"/status/{job_id}\",\n  \"typical_response_time\": \"&lt; 100ms\",\n  \"includes\": \"Job status lookup, progress calculation\"\n}\n</code></pre> <pre><code>{\n  \"endpoint\": \"/download/{job_id}\",\n  \"typical_response_time\": \"&lt; 200ms to start\",\n  \"includes\": \"File stream initiation (streaming continues)\"\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#translation-processing-times","title":"Translation Processing Times","text":"<p>File Size vs Processing Time:</p> <pre><code>const processingTimeEstimates = {\n  'small_file': {\n    'size_range': '&lt; 50KB',\n    'paragraphs': '&lt; 100',\n    'google_translate': '1-3 minutes',\n    'premium_models': '2-5 minutes'\n  },\n  'medium_file': {\n    'size_range': '50KB - 200KB',\n    'paragraphs': '100-400',\n    'google_translate': '3-8 minutes',\n    'premium_models': '5-15 minutes'\n  },\n  'large_file': {\n    'size_range': '200KB - 500KB',\n    'paragraphs': '400-1000+',\n    'google_translate': '8-20 minutes',\n    'premium_models': '15-30 minutes'\n  }\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#scaling-characteristics","title":"Scaling Characteristics","text":"<p>Concurrent Processing: - Job limit: 4 simultaneous translations (configurable) - Queue behavior: Additional jobs queue in PENDING status - Memory usage: ~50-100MB per active translation job</p> <p>Rate Limiting:</p> <pre><code>{\n  \"anonymous_users\": \"No limits (Google Translate only)\",\n  \"premium_users\": \"60 requests/hour default (configurable per key)\"\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#frontend-performance-optimization","title":"Frontend Performance Optimization","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#file-upload-optimization","title":"File Upload Optimization","text":"<pre><code>// Show progress during file upload\nfunction uploadFileWithProgress(file, onProgress) {\n  return new Promise((resolve, reject) =&gt; {\n    const xhr = new XMLHttpRequest();\n\n    xhr.upload.addEventListener('progress', (e) =&gt; {\n      if (e.lengthComputable) {\n        const percentComplete = (e.loaded / e.total) * 100;\n        onProgress(percentComplete, 'upload');\n      }\n    });\n\n    xhr.addEventListener('load', () =&gt; {\n      if (xhr.status === 200) {\n        resolve(JSON.parse(xhr.responseText));\n      } else {\n        reject(new Error(`Upload failed: ${xhr.status}`));\n      }\n    });\n\n    // Set up form data and send\n    const formData = new FormData();\n    formData.append('file', file);\n    // ... other form fields\n\n    xhr.open('POST', '/translate');\n    xhr.send(formData);\n  });\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#progress-ui-optimization","title":"Progress UI Optimization","text":"<pre><code>/* Smooth progress animations */\n.progress-bar {\n  transition: width 0.3s ease-in-out;\n  will-change: width;\n}\n\n.progress-text {\n  font-variant-numeric: tabular-nums; /* Prevents text jumping */\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#9-integration-guidelines","title":"9. Integration Guidelines","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#frontend-architecture-recommendations","title":"Frontend Architecture Recommendations","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#state-management","title":"State Management","text":"<pre><code>// Recommended state structure for translation jobs\nconst translationState = {\n  currentJob: {\n    id: null,\n    status: 'idle', // idle|uploading|pending|processing|completed|failed\n    progress: 0,\n    file: null,\n    settings: {\n      model: 'google',\n      language: 'zh-cn',\n      isTest: false\n    },\n    result: null,\n    error: null\n  },\n  jobHistory: [], // Previous jobs for user\n  apiKey: null, // For premium users\n  availableModels: [] // Fetched from /models\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#component-architecture","title":"Component Architecture","text":"<pre><code>// React example structure\nconst TranslationApp = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;FileUpload onFileSelect={handleFileSelect} /&gt;\n      &lt;ModelSelector\n        models={availableModels}\n        selectedModel={settings.model}\n        onChange={handleModelChange}\n      /&gt;\n      &lt;AuthenticationPanel\n        show={requiresAuth}\n        onApiKeyEntered={handleApiKey}\n      /&gt;\n      &lt;TranslationProgress\n        job={currentJob}\n        onCancel={handleCancel}\n      /&gt;\n      &lt;ResultDownload\n        job={currentJob}\n        onDownload={handleDownload}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#api-integration-patterns","title":"API Integration Patterns","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#error-first-approach","title":"Error-First Approach","text":"<pre><code>async function startTranslation(file, settings) {\n  try {\n    // Validate before sending\n    const validation = validateTranslationRequest(file, settings);\n    if (!validation.valid) {\n      throw new ValidationError(validation.errors);\n    }\n\n    // Send request\n    const job = await apiClient.startTranslation(file, settings);\n\n    // Start progress tracking\n    const progressTracker = new ProgressTracker(job.job_id);\n    progressTracker.onProgress = updateUI;\n    progressTracker.onComplete = handleComplete;\n    progressTracker.onError = handleError;\n\n    await progressTracker.start();\n\n  } catch (error) {\n    handleError(error);\n  }\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#retry-logic","title":"Retry Logic","text":"<pre><code>class APIClient {\n  async makeRequest(url, options, retries = 3) {\n    for (let attempt = 1; attempt &lt;= retries; attempt++) {\n      try {\n        const response = await fetch(url, options);\n\n        if (response.ok) {\n          return response.json();\n        }\n\n        // Don't retry client errors (4xx)\n        if (response.status &gt;= 400 &amp;&amp; response.status &lt; 500) {\n          throw new APIError(response.status, await response.json());\n        }\n\n        // Retry server errors (5xx)\n        if (attempt === retries) {\n          throw new APIError(response.status, 'Max retries exceeded');\n        }\n\n        // Exponential backoff\n        await this.sleep(Math.pow(2, attempt) * 1000);\n\n      } catch (error) {\n        if (attempt === retries) throw error;\n        await this.sleep(Math.pow(2, attempt) * 1000);\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#testing-integration","title":"Testing Integration","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#mock-api-for-development","title":"Mock API for Development","text":"<pre><code>// Mock API responses for frontend development\nconst mockAPI = {\n  '/translate': {\n    method: 'POST',\n    response: {\n      job_id: 'mock-job-123',\n      status: 'pending',\n      message: 'Translation job started successfully',\n      estimated_duration: '5-10 minutes (mock)'\n    }\n  },\n  '/status/mock-job-123': {\n    method: 'GET',\n    response: (callCount) =&gt; ({\n      job_id: 'mock-job-123',\n      status: callCount &lt; 5 ? 'processing' : 'completed',\n      progress: Math.min(callCount * 20, 100),\n      processed_paragraphs: Math.min(callCount * 30, 150),\n      total_paragraphs: 150,\n      download_url: callCount &gt;= 5 ? '/download/mock-job-123' : null\n    })\n  }\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#10-development-environment-setup","title":"10. Development Environment Setup","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#backend-setup-for-frontend-development","title":"Backend Setup for Frontend Development","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#quick-start-docker","title":"Quick Start (Docker)","text":"<pre><code># Clone repository\ngit clone &lt;repo-url&gt;\ncd bilingual_book_maker\n\n# Start backend with Docker\ndocker build -t bilingual-book-maker .\ndocker run -p 8000:8000 bilingual-book-maker\n\n# Backend available at: http://localhost:8000\n# API docs at: http://localhost:8000/docs\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#local-development-setup","title":"Local Development Setup","text":"<pre><code># Install dependencies\ncd api_layer\npip install -r requirements.txt\n\n# Set environment variables\nexport API_HOST=0.0.0.0\nexport API_PORT=8000\nexport ENVIRONMENT=development\n\n# Start development server\npython -m uvicorn api.main:app --reload --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#frontend-development-workflow","title":"Frontend Development Workflow","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#1-api-discovery","title":"1. API Discovery","text":"<pre><code>// First, explore available endpoints\nconst endpoints = [\n  'GET /health',      // Check if backend is running\n  'GET /models',      // Get available translation models\n  'GET /stats',       // System statistics\n  'POST /translate',  // Start translation\n  'GET /status/{id}', // Check progress\n  'GET /download/{id}' // Download result\n];\n\n// Test basic connectivity\nfetch('http://localhost:8000/health')\n  .then(r =&gt; r.json())\n  .then(data =&gt; console.log('Backend is running:', data));\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#2-development-api-key-setup","title":"2. Development API Key Setup","text":"<pre><code>// For testing premium features, get a demo API key\n// The backend creates demo keys on startup (development only)\n\n// Check logs for demo API keys:\n// \"Demo API key created: bbm_abc123...\"\n// \"Admin API key created: bbm_xyz789...\"\n\nconst DEMO_API_KEY = 'bbm_demo_key_from_logs';\n\n// Test premium endpoints\nfetch('http://localhost:8000/translate', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${DEMO_API_KEY}`\n  },\n  body: formData // with model: 'chatgpt'\n});\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#3-file-testing-assets","title":"3. File Testing Assets","text":"<pre><code>// Create test files for development\nconst testFiles = {\n  'small_epub': 'test-files/small-book.epub', // &lt; 50KB\n  'text_file': 'test-files/sample.txt',      // Plain text\n  'subtitle_file': 'test-files/movie.srt',   // SRT format\n  'markdown_file': 'test-files/readme.md'    // Markdown\n};\n\n// Test different scenarios\nconst testScenarios = [\n  {name: 'Anonymous + Google', file: testFiles.small_epub, model: 'google'},\n  {name: 'Premium + ChatGPT', file: testFiles.text_file, model: 'chatgpt'},\n  {name: 'Premium + Gemini Flash', file: testFiles.text_file, model: 'gemini_flash'},\n  {name: 'Test Mode', file: testFiles.small_epub, model: 'google', is_test: true},\n  {name: 'Large File Error', file: 'large-file.epub'} // &gt; 500KB\n];\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#4-error-testing","title":"4. Error Testing","text":"<pre><code>// Test error scenarios during development\nconst errorTests = [\n  {\n    test: 'File too large',\n    action: () =&gt; uploadFile(createLargeFile(1024*1024)) // 1MB file\n  },\n  {\n    test: 'Invalid API key',\n    action: () =&gt; translateWithAuth('invalid-key', 'chatgpt')\n  },\n  {\n    test: 'Unsupported format',\n    action: () =&gt; uploadFile(createFile('test.pdf'))\n  },\n  {\n    test: 'Missing translation API key',\n    action: () =&gt; translate({model: 'chatgpt', key: ''})\n  },\n  {\n    test: 'Invalid Gemini Flash API key',\n    action: () =&gt; translate({model: 'gemini_flash', key: 'invalid-key'})\n  }\n];\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#cors-configuration-for-development","title":"CORS Configuration for Development","text":"<p>If you're running frontend on a different port, ensure CORS is configured:</p> <pre><code>// Backend allows these origins in development:\nconst devOrigins = [\n  'http://localhost:3000',  // React default\n  'http://localhost:8080',  // Vue/Webpack default\n  'http://localhost:5173',  // Vite default\n  'http://127.0.0.1:3000'   // Alternative localhost\n];\n\n// If your frontend runs on a different port, either:\n// 1. Set CORS_ORIGINS environment variable:\n//    CORS_ORIGINS=\"http://localhost:3001,http://localhost:4200\"\n//\n// 2. Or update backend settings.py with your port\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#production-deployment-considerations","title":"Production Deployment Considerations","text":""},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#environment-configuration","title":"Environment Configuration","text":"<pre><code># Production environment variables\nexport ENVIRONMENT=production\nexport API_HOST=0.0.0.0\nexport API_PORT=8000\nexport CORS_ORIGINS=\"https://yourdomain.com,https://www.yourdomain.com\"\nexport TRUSTED_HOSTS=\"yourdomain.com,www.yourdomain.com\"\nexport JOB_TTL_HOURS=12  # Shorter TTL for production\nexport MAX_WORKERS=8     # Scale based on server capacity\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#frontend-build-configuration","title":"Frontend Build Configuration","text":"<pre><code>// Update API base URL for production\nconst config = {\n  development: {\n    API_BASE_URL: 'http://localhost:8000'\n  },\n  production: {\n    API_BASE_URL: 'https://api.yourdomain.com'\n  }\n};\n</code></pre>"},{"location":"frontend/FRONTEND_UX_TECHNICAL_GUIDE/#summary","title":"Summary","text":"<p>This comprehensive guide provides UI/UX engineers with the technical foundation needed to build effective user experiences for the bilingual book translation service. Key takeaways:</p> <ol> <li>Architecture: Async job-based processing with polling for progress</li> <li>Business Model: Freemium with clear authentication boundaries</li> <li>API Design: RESTful with comprehensive error handling</li> <li>Real-time UX: Polling-based progress with adaptive intervals</li> <li>Security: Multi-layer validation with secure file handling</li> <li>Performance: Predictable timing with clear user expectations</li> <li>Integration: Error-first approach with comprehensive testing</li> </ol> <p>The service is production-ready with robust error handling, security validation, and scalable architecture. Frontend implementations should focus on progressive enhancement, clear error communication, and responsive progress feedback to create optimal user experiences.</p>"},{"location":"frontend/UI_MOCKUPS/","title":"Bilingual Book Translation Service - MVP UI Mockups","text":""},{"location":"frontend/UI_MOCKUPS/#overview","title":"Overview","text":"<p>This document contains simplified UI mockups for the MVP version of the bilingual book translation service. The MVP focuses on a simple upload \u2192 translate \u2192 download flow with no user storage or translation history.</p>"},{"location":"frontend/UI_MOCKUPS/#mvp-business-model","title":"MVP Business Model","text":"<ul> <li>Anonymous Users: Free access to Google Translate only</li> <li>Registered Users: Access to all translation models using their own API keys</li> <li>No Premium Payments: Users bring their own API keys, no subscription model</li> <li>No Storage: All files cleaned up after a few hours</li> <li>No History: No translation tracking or management in MVP</li> </ul>"},{"location":"frontend/UI_MOCKUPS/#color-scheme-reference","title":"Color Scheme Reference","text":"<ul> <li>Primary Blue: #2563EB (for main actions and navigation)</li> <li>Success Green: #10B981 (for completed states and downloads)</li> <li>Warning Amber: #F59E0B (for alerts and attention items)</li> <li>Error Red: #EF4444 (for errors and cancel actions)</li> <li>Neutral Gray: #6B7280 (for secondary text and borders)</li> </ul>"},{"location":"frontend/UI_MOCKUPS/#1-landing-page-mvp-anonymous-users","title":"1. Landing Page (MVP - Anonymous Users)","text":"<p>Purpose: Simple upload interface with Google Translate, registration prompt for more models.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                                     \u2502\n\u2502  [\ud83c\udf10 TranslateBooks]                                              [Sign Up/Login]  \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502                          \ud83d\udcda Translate Your Books Instantly                         \u2502\n\u2502                                                                                     \u2502\n\u2502                Transform EPUB, TXT, SRT, and MD files into any language            \u2502\n\u2502                                                                                     \u2502\n\u2502                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502    \ud83d\udcc1 Drop files here or            \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502        [Choose Files]               \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502   Supported: EPUB, TXT, SRT, MD    \u2502                       \u2502\n\u2502                     \u2502     files up to 500KB              \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2502                                                                                     \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502     \u2502 From Language    \u2502  \u2502 To Language      \u2502  \u2502 Translation Model            \u2502  \u2502\n\u2502     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502     \u2502 \u2502English    \u25bc\u2502 \u2502  \u2502 \u2502Spanish    \u25bc\u2502 \u2502  \u2502 \u2502\ud83c\udd93 Google Translate       \u2502 \u2502  \u2502\n\u2502     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502                        [\ud83d\udd04 Start Translation]                                      \u2502\n\u2502                               (Blue Button)                                        \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  \ud83c\udd93 Free         \u2502  \u2502 \ud83d\udcc1 File Support \u2502  \u2502 \ud83d\udd12 Secure       \u2502  \u2502 \u26a1 Fast       \u2502 \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502               \u2502 \u2502\n\u2502  \u2502 Google Translate\u2502  \u2502 EPUB, TXT, SRT, \u2502  \u2502 Files cleaned   \u2502  \u2502 Process in    \u2502 \u2502\n\u2502  \u2502 No signup needed\u2502  \u2502 MD formats      \u2502  \u2502 after hours     \u2502  \u2502 minutes       \u2502 \u2502\n\u2502  \u2502                 \u2502  \u2502 Up to 500KB     \u2502  \u2502                 \u2502  \u2502               \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502                     \ud83d\udd11 Want Better Translations?                               \u2502 \u2502\n\u2502  \u2502                                                                                 \u2502 \u2502\n\u2502  \u2502   Sign up to access ChatGPT-4, Claude, Gemini Flash with your own API keys:   \u2502 \u2502\n\u2502  \u2502                                                                                 \u2502 \u2502\n\u2502  \u2502   \u2022 Higher quality translations                                                \u2502 \u2502\n\u2502  \u2502   \u2022 Context-aware processing                                                   \u2502 \u2502\n\u2502  \u2502   \u2022 Use your existing API subscriptions                                        \u2502 \u2502\n\u2502  \u2502   \u2022 No additional costs - you control your usage                              \u2502 \u2502\n\u2502  \u2502                                                                                 \u2502 \u2502\n\u2502  \u2502                          [Sign Up Free \u2192]                                      \u2502 \u2502\n\u2502  \u2502                           (Blue Button)                                        \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Elements: - Large file upload zone as primary focal point - Only Google Translate available for anonymous users - Simple signup prompt for access to more models - Trust indicators (security, speed, file support) - No premium payments mentioned</p>"},{"location":"frontend/UI_MOCKUPS/#2-registered-user-interface-mvp","title":"2. Registered User Interface (MVP)","text":"<p>Purpose: Access to all translation models with user's own API keys. Same simple upload flow, no history storage.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                                     \u2502\n\u2502  [\ud83c\udf10 TranslateBooks]  [API Keys]                            [\ud83d\udc64 John] [Logout] \u25bc  \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502  Welcome back, John! \ud83d\udc4b                                                           \u2502\n\u2502                                                                                     \u2502\n\u2502                          \ud83d\udcda Translate Your Books Instantly                         \u2502\n\u2502                                                                                     \u2502\n\u2502                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502    \ud83d\udcc1 Drop files here or            \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502        [Choose Files]               \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2502   Supported: EPUB, TXT, SRT, MD    \u2502                       \u2502\n\u2502                     \u2502     files up to 500KB              \u2502                       \u2502\n\u2502                     \u2502                                     \u2502                       \u2502\n\u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2502\n\u2502                                                                                     \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502     \u2502 From Language    \u2502  \u2502 To Language      \u2502  \u2502 Translation Model            \u2502  \u2502\n\u2502     \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502     \u2502 \u2502English    \u25bc\u2502 \u2502  \u2502 \u2502Spanish    \u25bc\u2502 \u2502  \u2502 \u2502\ud83c\udd93 Google Translate       \u2502 \u2502  \u2502\n\u2502     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2502\ud83d\udd11 ChatGPT-4              \u2502 \u2502  \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502 \u2502\ud83d\udd11 Claude Sonnet          \u2502 \u2502  \u2502\n\u2502                                                  \u2502 \u2502\ud83d\udd11 Gemini Flash           \u2502 \u2502  \u2502\n\u2502                                                  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502                                                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502                        [\ud83d\udd04 Start Translation]                                      \u2502\n\u2502                               (Blue Button)                                        \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u2502\n\u2502  \u2502 API Key Status  \u2502  \u2502 Quick Setup     \u2502  \u2502 Support         \u2502                   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502                   \u2502\n\u2502  \u2502 \u2705 Google       \u2502  \u2502 [\ud83d\udd11 Add API Key]\u2502  \u2502 [\ud83d\udcda Tutorials]  \u2502                   \u2502\n\u2502  \u2502 \u274c ChatGPT      \u2502  \u2502 [\ud83d\udd27 Test Keys]  \u2502  \u2502 [\ud83d\udcac Help Chat]  \u2502                   \u2502\n\u2502  \u2502 \u274c Claude       \u2502  \u2502 [\ud83d\udcd6 Quick Guide]\u2502  \u2502 [\ud83d\udce7 Contact]    \u2502                   \u2502\n\u2502  \u2502 \u274c Gemini Flash \u2502  \u2502                 \u2502  \u2502                 \u2502                   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502\n\u2502                                                                                     \u2502\n\u2502  \ud83d\udca1 Tip: Models with \ud83d\udd11 require your own API key. Set them up in API Keys section\u2502\n\u2502                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Elements: - Simplified navigation (no dashboard or history) - All translation models visible with clear indicators (free vs API key required) - API key status overview - Quick setup assistance - Same simple upload flow as anonymous users</p>"},{"location":"frontend/UI_MOCKUPS/#3-translation-progress-page-mvp","title":"3. Translation Progress Page (MVP)","text":"<p>Purpose: Simple progress tracking with basic status and download link when complete.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                                     \u2502\n\u2502  [\ud83c\udf10 TranslateBooks]                                      [\u2190 Back to Main]         \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502                          Translation in Progress                                    \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udcd6 \"Pride and Prejudice.epub\"                                               \u2502  \u2502\n\u2502  \u2502  English \u2192 Spanish \u2022 Using ChatGPT-4 \u2022 342 KB EPUB \u2022 12 chapters            \u2502  \u2502\n\u2502  \u2502  Started: Today, 3:15 PM                                                     \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                           Progress: 83%                                \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udd04 Currently Processing: Chapter 12 - \"Family Matters\"                      \u2502  \u2502\n\u2502  \u2502  \u23f1\ufe0f Estimated Time Remaining: 2 minutes                                      \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                             \ud83d\udca1 Note                                           \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Your file is being processed. You can bookmark this page or save the        \u2502  \u2502\n\u2502  \u2502  job ID below to check status later. Files are automatically cleaned up      \u2502  \u2502\n\u2502  \u2502  after a few hours.                                                           \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Job ID: TR_2024_0923_1547_A8B9C2                                           \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  When complete, your download will be available here.                        \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Elements: - Large progress bar with percentage - File details integrated into the title line (size, type, chapters) - Current processing status and time estimate - Job ID for reference (no dashboard to track in) - Clear messaging about file cleanup policy - No action buttons during translation - keep it simple</p>"},{"location":"frontend/UI_MOCKUPS/#4-translation-complete-page-mvp","title":"4. Translation Complete Page (MVP)","text":"<p>Purpose: Simple success state with download button. No feedback collection or detailed metrics.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                                     \u2502\n\u2502  [\ud83c\udf10 TranslateBooks]                                      [\u2190 Back to Main]         \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502                           \u2705 Translation Complete!                                 \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83c\udf89 Your translation is ready!                                               \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udcd6 \"Pride and Prejudice.epub\" \u2192 \"Orgullo y Prejuicio.epub\"                \u2502  \u2502\n\u2502  \u2502  English \u2192 Spanish \u2022 Using ChatGPT-4 \u2022 342\u2192378 KB EPUB \u2022 12 chapters       \u2502  \u2502\n\u2502  \u2502  Completed: Today, 3:47 PM \u2022 Processing time: 32 minutes                    \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                           Progress: 100%                               \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502                    [\ud83d\udce5 Download Translated Book]                             \u2502  \u2502\n\u2502  \u2502                           (Large Green Button)                               \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                             \ud83d\udca1 Important                                      \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Your translated file will be available for download for a few hours only.   \u2502  \u2502\n\u2502  \u2502  Please save it to your device now. Files are automatically cleaned up for   \u2502  \u2502\n\u2502  \u2502  security and storage reasons.                                                \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Job ID: TR_2024_0923_1547_A8B9C2                                           \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Want to translate another file? [\ud83d\udd04 Start New Translation]                  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Elements: - Large download button as primary action - File details integrated into the title line (original\u2192translated size, type, chapters) - Clear messaging about temporary file storage - Quick action to start new translation - No feedback collection, sharing features, or detailed statistics cards</p>"},{"location":"frontend/UI_MOCKUPS/#5-api-key-management-page-mvp","title":"5. API Key Management Page (MVP)","text":"<p>Purpose: Simple API key setup for registered users to access premium models.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                                                     \u2502\n\u2502  [\ud83c\udf10 TranslateBooks]  [\u2190 Back]                              [\ud83d\udc64 John] [Logout] \u25bc  \u2502\n\u2502                                                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                                     \u2502\n\u2502                            API Key Setup                                           \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udd11 Add your API keys to access premium translation models                   \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  Your keys are encrypted and only used for your translations. You control    \u2502  \u2502\n\u2502  \u2502  your usage and costs directly through your API provider accounts.           \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                         Available Models                                      \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 \ud83e\udd16 OpenAI (ChatGPT)                                      \u2705 Connected   \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 API Key: sk-...Kx9L (Last 4 shown)                      [\ud83d\udd04 Update]   \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 Status: Active                                           [\u274c Remove]   \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 Available: GPT-3.5 Turbo, GPT-4, GPT-4 Turbo                          \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 \ud83e\udde0 Anthropic (Claude)                                    \u274c Not Setup   \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2502 API Key: [Enter your Claude API key here...]           \u2502 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                          [\ud83d\udcbe Save] [\ud83d\udccb Get Key]       \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 Available: Claude 3 Haiku, Claude 3 Sonnet, Claude 3 Opus             \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502  \u2502 \ud83c\udfaf Google AI (Gemini Flash)                              \u274c Not Setup   \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2502 API Key: [Enter your Google AI API key here...]        \u2502 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                          [\ud83d\udcbe Save] [\ud83d\udccb Get Key]       \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502                                                                         \u2502 \u2502  \u2502\n\u2502  \u2502  \u2502 Available: Gemini Flash (1.5), Gemini Flash (2.0)                     \u2502 \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502                           Quick Start Guide                                   \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udd17 Get API Keys: [\ud83e\udd16 OpenAI \u2192]  [\ud83e\udde0 Anthropic \u2192]  [\ud83c\udfaf Google AI \u2192]         \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2502  \ud83d\udccb Steps:                                                                   \u2502  \u2502\n\u2502  \u2502  1. Click a provider link above                                              \u2502  \u2502\n\u2502  \u2502  2. Create account or sign in                                                \u2502  \u2502\n\u2502  \u2502  3. Generate new API key                                                     \u2502  \u2502\n\u2502  \u2502  4. Copy and paste it above                                                  \u2502  \u2502\n\u2502  \u2502  5. Start translating with better models!                                    \u2502  \u2502\n\u2502  \u2502                                                                               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u2502\n\u2502  \u2502 Security        \u2502  \u2502 Your Control    \u2502  \u2502 Support         \u2502                   \u2502\n\u2502  \u2502                 \u2502  \u2502                 \u2502  \u2502                 \u2502                   \u2502\n\u2502  \u2502 \ud83d\udd10 Encrypted    \u2502  \u2502 \ud83d\udcb0 You pay APIs \u2502  \u2502 \ud83d\udcac Help Chat    \u2502                   \u2502\n\u2502  \u2502 \ud83d\udeab Not stored   \u2502  \u2502 \u2699\ufe0f Your usage   \u2502  \u2502 \ud83d\udcda Tutorials    \u2502                   \u2502\n\u2502  \u2502 \ud83d\udee1\ufe0f Secure       \u2502  \u2502 \ud83d\udcca Direct bills \u2502  \u2502 \ud83d\udce7 Contact      \u2502                   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2502\n\u2502                                                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Key Elements: - Service status indicators (connected/not setup) - Simple API key input forms - Direct links to API key providers - Clear messaging about user control over costs - Simplified navigation without complex dashboards</p>"},{"location":"frontend/UI_MOCKUPS/#mvp-design-implementation-notes","title":"MVP Design Implementation Notes","text":""},{"location":"frontend/UI_MOCKUPS/#core-principles","title":"Core Principles","text":"<ol> <li>Simplicity First: Clean, uncluttered interface focusing on core upload \u2192 translate \u2192 download flow</li> <li>No Storage Complexity: Clear messaging that files are temporary and cleaned up automatically</li> <li>User Control: Transparent about API keys, costs, and no hidden fees</li> <li>Progressive Enhancement: Anonymous users get basic functionality, registered users get premium models</li> </ol>"},{"location":"frontend/UI_MOCKUPS/#visual-hierarchy","title":"Visual Hierarchy","text":"<ol> <li>Primary Actions: Large, prominent buttons (file upload, download, start translation)</li> <li>Secondary Actions: Medium buttons (cancel, refresh, setup)</li> <li>Tertiary Actions: Small buttons and links (help, tutorials)</li> </ol>"},{"location":"frontend/UI_MOCKUPS/#color-usage-simplified","title":"Color Usage (Simplified)","text":"<ul> <li>Blue (#2563EB): Main actions, navigation, primary buttons</li> <li>Green (#10B981): Success states, completed translations, download buttons</li> <li>Red (#EF4444): Errors, cancellation, removal actions</li> <li>Gray (#6B7280): Secondary text, borders, disabled states</li> </ul>"},{"location":"frontend/UI_MOCKUPS/#key-differences-from-full-version","title":"Key Differences from Full Version","text":"<ul> <li>No Dashboard: Simple main page with upload form</li> <li>No History: No translation tracking or management</li> <li>No Complex User Management: Basic signup/login, API key setup</li> <li>No Subscription UI: No payment flows, premium tiers, or billing</li> <li>Temporary Storage: Clear messaging about file cleanup</li> <li>BYOK Model: Users bring own API keys, no service-provided credits</li> </ul>"},{"location":"frontend/UI_MOCKUPS/#responsive-behavior","title":"Responsive Behavior","text":"<ul> <li>Mobile: Single column layout, large touch targets</li> <li>Desktop: Centered layout with clear visual hierarchy</li> </ul> <p>This MVP mockup set provides a foundation for implementing a simple, user-controlled translation service without the complexity of subscription management, file storage, or detailed analytics.</p>"},{"location":"review/","title":"API Layer Code Review Documentation","text":"<p>This directory contains the comprehensive code review documentation for the bilingual book maker API layer.</p>"},{"location":"review/#critical-finding","title":"\ud83d\udea8 CRITICAL FINDING","text":"<p>This API layer is NOT production ready due to multiple critical security vulnerabilities that must be addressed immediately.</p>"},{"location":"review/#review-documents","title":"Review Documents","text":""},{"location":"review/#executive-summary","title":"\ud83d\udccb Executive Summary","text":"<p>Start here - High-level overview of findings, risk assessment, and immediate action items.</p>"},{"location":"review/#security-analysis","title":"\ud83d\udee1\ufe0f Security Analysis","text":"<p>CRITICAL - Detailed security vulnerability analysis with immediate fix requirements.</p>"},{"location":"review/#architecture-assessment","title":"\ud83c\udfd7\ufe0f Architecture Assessment","text":"<p>Technical architecture review, strengths, and scalability recommendations.</p>"},{"location":"review/#code-quality-review","title":"\ud83d\udd27 Code Quality Review","text":"<p>Code quality analysis, best practices review, and improvement recommendations.</p>"},{"location":"review/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"<p>Testing coverage analysis and comprehensive testing strategy recommendations.</p>"},{"location":"review/#critical-security-issues-summary","title":"Critical Security Issues Summary","text":"Issue Severity Impact Status CORS Bypass (<code>allow_origins=[\"*\"]</code>) \ud83d\udd34 CRITICAL Data theft, CSRF \u274c MUST FIX Arbitrary File Upload \ud83d\udd34 CRITICAL RCE, malware \u274c MUST FIX Path Traversal \ud83d\udfe0 HIGH File system access \u274c MUST FIX No Authentication \ud83d\udfe0 HIGH Unlimited abuse \u274c MUST FIX Information Disclosure \ud83d\udfe1 MEDIUM System info leak \u274c SHOULD FIX"},{"location":"review/#immediate-actions-required","title":"Immediate Actions Required","text":""},{"location":"review/#before-any-production-deployment","title":"Before ANY Production Deployment:","text":"<ol> <li> <p>Fix CORS Policy:    <code>python    # Change from:    allow_origins=[\"*\"]    # To:    allow_origins=[\"https://yourdomain.com\"]</code></p> </li> <li> <p>Implement File Validation:</p> </li> <li>Validate file content, not just extensions</li> <li>Add file size limits</li> <li> <p>Implement content sanitization</p> </li> <li> <p>Add Path Sanitization:</p> </li> <li>Validate and sanitize all file paths</li> <li> <p>Prevent directory traversal attacks</p> </li> <li> <p>Implement Authentication:</p> </li> <li>Add API key authentication minimum</li> <li> <p>Rate limiting per user/IP</p> </li> <li> <p>Remove Debug Information:</p> </li> <li>Generic error messages for clients</li> <li>Proper logging without sensitive data</li> </ol>"},{"location":"review/#architecture-strengths","title":"Architecture Strengths","text":"<p>\u2705 Good Foundation: - Well-designed async architecture - Clean separation of concerns - Comprehensive error handling framework - Good progress monitoring system - Solid unit test coverage</p>"},{"location":"review/#development-timeline","title":"Development Timeline","text":""},{"location":"review/#week-1-security-hardening","title":"Week 1: Security Hardening","text":"<ul> <li>Fix all critical security vulnerabilities</li> <li>Implement basic authentication</li> <li>Add input validation framework</li> </ul>"},{"location":"review/#week-2-3-reliability-configuration","title":"Week 2-3: Reliability &amp; Configuration","text":"<ul> <li>Configuration management system</li> <li>Persistent job storage</li> <li>Proper logging and monitoring</li> </ul>"},{"location":"review/#week-4-production-preparation","title":"Week 4: Production Preparation","text":"<ul> <li>Performance testing</li> <li>Deployment documentation</li> <li>Security audit validation</li> </ul>"},{"location":"review/#review-methodology","title":"Review Methodology","text":"<p>This review was conducted using industry-standard security and code quality practices:</p> <ol> <li>Security Analysis: OWASP Top 10, common vulnerability patterns</li> <li>Architecture Review: Scalability, maintainability, performance</li> <li>Code Quality: Python best practices, async patterns, error handling</li> <li>Testing Assessment: Coverage analysis, test strategy evaluation</li> </ol>"},{"location":"review/#reviewer-credentials","title":"Reviewer Credentials","text":"<p>Conducted by Claude Code with expertise in: - Production security architecture - FastAPI and async Python development - API security best practices - Enterprise software deployment</p>"},{"location":"review/#next-steps","title":"Next Steps","text":"<ol> <li>Read Executive Summary for high-level overview</li> <li>Review Security Analysis for immediate security fixes</li> <li>Implement Priority 1 fixes before any deployment consideration</li> <li>Plan development sprints based on Architecture and Code Quality recommendations</li> </ol>"},{"location":"review/#contact-support","title":"Contact &amp; Support","text":"<p>For technical clarification on any findings in this review, refer to the detailed analysis in each document section.</p> <p>\u26a0\ufe0f WARNING: Do not deploy this API to production without addressing the critical security issues identified in this review.</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/","title":"Architecture Assessment Report - API Layer","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#executive-summary","title":"Executive Summary","text":"<p>The bilingual book maker API layer demonstrates a well-structured async architecture with clear separation of concerns. However, several design decisions need refinement for production readiness.</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#architecture-overview","title":"Architecture Overview","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#component-structure","title":"Component Structure","text":"<pre><code>api_layer/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 main.py              # FastAPI application &amp; endpoints\n\u2502   \u251c\u2500\u2500 models.py            # Data models &amp; schemas\n\u2502   \u251c\u2500\u2500 async_translator.py  # Core translation logic\n\u2502   \u251c\u2500\u2500 job_manager.py       # Job lifecycle management\n\u2502   \u251c\u2500\u2500 progress_monitor.py  # Progress tracking system\n\u2502   \u2514\u2500\u2500 error_handler.py     # Error handling framework\n\u251c\u2500\u2500 tests/                   # Unit tests\n\u2514\u2500\u2500 examples/               # Usage examples\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#strengths","title":"Strengths","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#well-designed-async-architecture","title":"\u2705 Well-Designed Async Architecture","text":"<ul> <li>Clean separation between API layer and background processing</li> <li>Thread-safe job management with proper locking</li> <li>Non-blocking translation operations</li> <li>Proper resource cleanup and lifecycle management</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#comprehensive-progress-monitoring","title":"\u2705 Comprehensive Progress Monitoring","text":"<ul> <li>Log-based Progress Tracking: Implemented structured progress logging from EPUBBookLoader</li> <li>Real-time Progress Updates: Docker log parsing for live progress monitoring</li> <li>Job Progress Integration: Seamless integration with job management system</li> <li>Structured Progress Format: <code>PROGRESS: {job_id} {current}/{total} ({percentage}%)</code></li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#robust-error-handling-framework","title":"\u2705 Robust Error Handling Framework","text":"<ul> <li>Hierarchical error classification system</li> <li>Retry logic with exponential backoff</li> <li>Timeout management with proper cleanup</li> <li>Comprehensive error statistics tracking</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#good-data-modeling","title":"\u2705 Good Data Modeling","text":"<ul> <li>Clear separation between internal and API models</li> <li>Proper use of Pydantic for validation</li> <li>Comprehensive job status tracking</li> <li>Well-defined state transitions</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#testable-design","title":"\u2705 Testable Design","text":"<ul> <li>Good unit test coverage (3 test files)</li> <li>Mockable dependencies</li> <li>Integration test framework</li> <li>Thread-safety testing</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#progress-tracking-implementation","title":"Progress Tracking Implementation","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#log-based-progress-monitoring-architecture","title":"\ud83d\udcca Log-Based Progress Monitoring Architecture","text":"<p>Implementation Date: September 2025</p> <p>The progress tracking system has been successfully implemented using a log-based approach that provides real-time translation progress without complex threading or state management.</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#core-components","title":"Core Components","text":"<p>1. EPUBBookLoader Progress Logging (<code>book_maker/loader/epub_loader.py</code>)</p> <pre><code># Added job_id parameter to constructor\ndef __init__(self, ..., job_id=None):\n    self.job_id = job_id\n\n# Progress logging at key update points\nif self.job_id and pbar.total:\n    progress = int((pbar.n / pbar.total) * 100) if pbar.total &gt; 0 else 0\n    logger.warning(f\"PROGRESS: {self.job_id} {pbar.n}/{pbar.total} ({progress}%)\")\n</code></pre> <p>2. Log Parser Utility (<code>api_layer/api/log_parser.py</code>)</p> <pre><code>class ProgressLogParser:\n    PROGRESS_PATTERN = r'PROGRESS:\\s+([a-f0-9-]+)\\s+(\\d+)/(\\d+)\\s+\\((\\d+)%\\)'\n\n    def get_job_progress(self, job_id: str) -&gt; Optional[Dict[str, Any]]:\n        # Parses Docker logs to extract progress for specific job\n</code></pre> <p>3. Job Manager Integration (<code>api_layer/api/job_manager.py</code>)</p> <pre><code>def update_progress_from_logs(self, job_id: str) -&gt; bool:\n    progress_info = progress_parser.get_job_progress(job_id)\n    if progress_info:\n        self.update_job_progress(job_id, progress_info['current'], progress_info['total'])\n</code></pre> <p>4. API Status Enhancement (<code>api_layer/api/main.py</code>)</p> <pre><code>@app.get(\"/status/{job_id}\")\nasync def get_job_status(job_id: str):\n    if job and job.status == JobStatus.PROCESSING:\n        job_manager.update_progress_from_logs(job_id)  # Real-time progress update\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#progress-flow-architecture","title":"Progress Flow Architecture","text":"<pre><code>EPUBBookLoader \u2192 Progress Logs \u2192 Docker Container \u2192 Log Parser \u2192 Job Manager \u2192 API Response\n     \u2193               \u2193                \u2193               \u2193            \u2193           \u2193\n[Translation]   [PROGRESS:     [Container         [Regex       [Job        [GET /status\n Processing]     job_id         stdout/stderr]     Parsing]      Update]     Response]\n                 1/5 (20%)]\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#tested-implementation-features","title":"Tested Implementation Features","text":"<p>\u2705 Job ID Parameter Passing: Successfully tested job_id propagation through async_translator to EPUBBookLoader \u2705 Progress Log Generation: Verified structured logs: <code>PROGRESS: c296c9f5-fb00-4425-ab55-606cf9df543a 1/5 (20%)</code> \u2705 Real-time Updates: Confirmed progress logs appear during translation execution \u2705 Integration Testing: End-to-end testing with Google Translate API</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#current-limitations","title":"Current Limitations","text":"<p>\u26a0\ufe0f Docker Socket Access: Log parser requires Docker socket access when running inside container</p> <pre><code># Required for container-based log parsing\ndocker run -v /var/run/docker.sock:/var/run/docker.sock ...\n</code></pre> <p>\u26a0\ufe0f Logging Level Configuration: Progress logs use WARNING level to ensure visibility</p> <pre><code># Had to use WARNING instead of INFO due to logging configuration\nlogger.warning(f\"PROGRESS: {self.job_id} {pbar.n}/{pbar.total} ({progress}%)\")\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Low Overhead: Minimal performance impact on translation process</li> <li>Scalable: Log-based approach scales with container infrastructure</li> <li>Reliable: No threading complexity or state synchronization issues</li> <li>Debuggable: Clear audit trail of progress events</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#alternative-architectures-considered","title":"Alternative Architectures Considered","text":"<ol> <li>TqdmInterceptor Approach: Complex threading model, abandoned due to reliability issues</li> <li>Direct Progress Callbacks: Tight coupling between loader and API, rejected for modularity</li> <li>Message Queue: Over-engineering for current scale, may revisit for distributed deployment</li> </ol>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#areas-for-improvement","title":"Areas for Improvement","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#scalability-concerns","title":"\ud83d\udd04 Scalability Concerns","text":"<p>Issue: Single-node design limitations</p> <pre><code># Current: In-memory job storage\nself._jobs: Dict[str, TranslationJob] = {}\n</code></pre> <p>Impact: - Jobs lost on restart - No horizontal scaling capability - Memory usage grows unbounded</p> <p>Recommendation: - Implement persistent job storage (Redis, PostgreSQL) - Add job state persistence for crash recovery - Consider distributed job queue (Celery, RQ)</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#resource-management","title":"\ud83d\udd04 Resource Management","text":"<p>Issue: Thread pool sizing and resource limits</p> <pre><code>ThreadPoolExecutor(max_workers=4, thread_name_prefix=\"translation-\")\n</code></pre> <p>Concerns: - Fixed thread pool size may not scale - No memory usage monitoring - No CPU utilization controls</p> <p>Recommendation: - Dynamic thread pool sizing based on system resources - Implement resource usage monitoring - Add circuit breakers for overload protection</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#file-management-architecture","title":"\ud83d\udd04 File Management Architecture","text":"<p>Issue: Local file storage with manual cleanup</p> <pre><code># Simple directory structure\nself._upload_dir = Path(\"uploads\")\nself._output_dir = Path(\"outputs\")\n</code></pre> <p>Limitations: - No file versioning - Limited to single machine - Manual cleanup prone to race conditions</p> <p>Recommendation: - Object storage integration (S3, MinIO) - Automated file lifecycle management - Content-addressable storage for deduplication</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#api-design-patterns","title":"\ud83d\udd04 API Design Patterns","text":"<p>Issue: Some inconsistencies in REST patterns</p> <pre><code>@app.post(\"/cancel/{job_id}\")  # Should be PATCH or DELETE\n@app.delete(\"/jobs/{job_id}\")  # Good RESTful design\n</code></pre> <p>Recommendation: - Standardize on RESTful patterns - Consider GraphQL for complex queries - Implement API versioning strategy</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#configuration-management-issues","title":"Configuration Management Issues","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#hardcoded-configuration-values","title":"\u26a0\ufe0f Hardcoded Configuration Values","text":"<p>Issues Found:</p> <pre><code># job_manager.py\nmax_workers: int = 4                    # Should be configurable\njob_ttl_hours: int = 3                  # Should be environment-specific\ntimeout_minutes: int = 30               # Should be model-dependent\n\n# main.py\nhost=\"0.0.0.0\"                         # Should be configurable\nport=8000                               # Should be configurable\nallow_origins=[\"*\"]                     # SECURITY RISK\n</code></pre> <p>Recommendation: Implement proper configuration management</p> <pre><code># config.py\nfrom pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    api_host: str = \"127.0.0.1\"\n    api_port: int = 8000\n    max_workers: int = 4\n    job_ttl_hours: int = 24\n    allowed_origins: List[str] = [\"https://yourdomain.com\"]\n\n    class Config:\n        env_file = \".env\"\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#performance-considerations","title":"Performance Considerations","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#current-performance-characteristics","title":"\ud83d\udcca Current Performance Characteristics","text":"<p>Strengths: - Async/await throughout - Background job processing - Progress streaming - Proper resource cleanup</p> <p>Bottlenecks: - Thread pool bound by <code>max_workers=4</code> - In-memory job storage limits scalability - File I/O not optimized for large files - No caching layer for repeated translations</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#scalability-recommendations","title":"\ud83d\udcca Scalability Recommendations","text":"<ol> <li>Horizontal Scaling:</li> <li>Extract job management to external service</li> <li>Implement stateless API servers</li> <li> <p>Use load balancer with session affinity</p> </li> <li> <p>Performance Optimizations:</p> </li> <li>Implement translation result caching</li> <li>Add file deduplication</li> <li>Optimize progress update frequency</li> <li> <p>Implement background cleanup jobs</p> </li> <li> <p>Monitoring &amp; Observability:</p> </li> <li>Add metrics collection (Prometheus)</li> <li>Implement distributed tracing</li> <li>Add performance profiling hooks</li> <li>Monitor resource usage patterns</li> </ol>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#integration-architecture","title":"Integration Architecture","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#current-integration-approach","title":"\ud83d\udd17 Current Integration Approach","text":"<pre><code># Tight coupling to bilingual_book_maker\nsys.path.insert(0, str(Path(__file__).parent.parent.parent))\nfrom book_maker.loader import BOOK_LOADER_DICT\n</code></pre> <p>Issues: - Hard dependency on parent module structure - Path manipulation for imports - No version compatibility checking</p> <p>Recommendation: - Package bilingual_book_maker as proper dependency - Implement adapter pattern for translation services - Add service discovery for modular architecture</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#state-management","title":"State Management","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#job-state-complexity","title":"\ud83d\udccb Job State Complexity","text":"<p>The job lifecycle has complex state transitions:</p> <pre><code>PENDING \u2192 PROCESSING \u2192 [COMPLETED | FAILED | CANCELLED]\n</code></pre> <p>Current Issues: - Race conditions in state transitions - No state persistence across restarts - Limited state history tracking</p> <p>Recommendations: - Implement state machine pattern - Add state transition logging - Persist state to durable storage - Add state validation hooks</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#error-recovery-resilience","title":"Error Recovery &amp; Resilience","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#current-resilience-features","title":"\ud83d\udee1\ufe0f Current Resilience Features","text":"<ul> <li>Retry logic with exponential backoff</li> <li>Timeout management</li> <li>Graceful shutdown handling</li> <li>Error classification system</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#missing-resilience-patterns","title":"\ud83d\udee1\ufe0f Missing Resilience Patterns","text":"<ul> <li>Circuit breaker for external API calls</li> <li>Bulkhead isolation between job types</li> <li>Health check endpoints for dependencies</li> <li>Fallback mechanisms for service degradation</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#api-gateway-considerations","title":"API Gateway Considerations","text":"<p>Current: Direct FastAPI exposure Recommendation: Add API Gateway layer for: - Rate limiting and throttling - Authentication/authorization - Request/response transformation - Analytics and monitoring - Caching static responses</p>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#progress-tracking-improvements","title":"\ud83d\udd04 Progress Tracking Improvements","text":"<p>Issue: Docker socket dependency for log parsing</p> <pre><code># Current limitation\nERROR:api.log_parser:Error getting Docker logs: [Errno 2] No such file or directory: 'docker'\n</code></pre> <p>Impact: - Progress tracking unavailable when Docker CLI not accessible inside container - Security concerns with mounting Docker socket - Log parsing performance overhead</p> <p>Recommendations: 1. External Log Aggregation: Use Fluentd/Logstash to ship logs to central store 2. Progress Events: Implement event-driven progress updates via message queue 3. Structured Logging: Enhance log format for better parsing and monitoring 4. Configurable Logging Levels: Fix INFO level logging configuration</p> <p>Enhanced Progress Architecture:</p> <pre><code>EPUBBookLoader \u2192 Progress Events \u2192 Message Queue \u2192 Progress Service \u2192 API Cache\n                      \u2193              \u2193             \u2193              \u2193\n              [Structured      [Redis/          [Progress      [Real-time\n               Events]          RabbitMQ]        Aggregator]    Updates]\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"review/ARCHITECTURE_ASSESSMENT/#current-deployment-model","title":"Current Deployment Model","text":"<ul> <li>Single container deployment</li> <li>Local file storage</li> <li>In-memory state</li> <li>No external dependencies</li> </ul>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#recommended-production-architecture","title":"Recommended Production Architecture","text":"<pre><code>[Load Balancer] \u2192 [API Gateway] \u2192 [API Servers (N)]\n                                      \u2193\n[Redis Cluster] \u2190 [Job Queue] \u2192 [Worker Nodes (M)]\n                                      \u2193\n[Object Storage] \u2190 [Database] \u2192 [Monitoring Stack]\n</code></pre>"},{"location":"review/ARCHITECTURE_ASSESSMENT/#conclusion","title":"Conclusion","text":"<p>The API layer demonstrates solid engineering fundamentals with good separation of concerns and async design. The recent implementation of log-based progress tracking significantly enhances the system's observability and user experience.</p> <p>Recent Achievements: \u2705 Progress Tracking Implementation: Successfully delivered real-time progress monitoring using structured logging approach \u2705 End-to-End Testing: Verified progress tracking works correctly with live translation jobs \u2705 Minimal Architecture Impact: Clean implementation without disrupting existing job management flow</p> <p>Immediate Priorities: 1. Fix Docker socket dependency for progress tracking (mount socket or external log aggregation) 2. Fix security vulnerabilities (see Security Analysis) 3. Implement configuration management 4. Add persistent storage for jobs 5. Implement proper logging level configuration</p> <p>Medium-term Improvements: 1. Horizontal scaling architecture 2. Advanced resilience patterns 3. Performance optimizations 4. Enhanced progress tracking with event-driven architecture 5. Comprehensive observability</p> <p>Architecture Score: 7.5/10 (Good foundation with working progress tracking, needs production hardening)</p> <p>\u53ef\u80fd\u51fa\u73b0\u4e22\u4ef6\u4e86 Allen poe</p>"},{"location":"review/CODE_QUALITY_REVIEW/","title":"Code Quality Review - API Layer","text":""},{"location":"review/CODE_QUALITY_REVIEW/#overall-assessment","title":"Overall Assessment","text":"<p>Code Quality Score: 7.5/10</p> <p>The codebase demonstrates good Python practices with clean architecture and proper async patterns. However, there are several areas requiring improvement for production readiness.</p>"},{"location":"review/CODE_QUALITY_REVIEW/#strengths","title":"Strengths","text":""},{"location":"review/CODE_QUALITY_REVIEW/#clean-architecture-design-patterns","title":"\u2705 Clean Architecture &amp; Design Patterns","text":"<ul> <li>Well-separated concerns across modules</li> <li>Proper use of dependency injection patterns</li> <li>Context managers for resource management</li> <li>Factory pattern for model instantiation</li> </ul>"},{"location":"review/CODE_QUALITY_REVIEW/#good-python-practices","title":"\u2705 Good Python Practices","text":"<ul> <li>Comprehensive type hints throughout</li> <li>Proper use of dataclasses and Pydantic models</li> <li>Async/await patterns correctly implemented</li> <li>Context managers for cleanup</li> </ul>"},{"location":"review/CODE_QUALITY_REVIEW/#documentation-readability","title":"\u2705 Documentation &amp; Readability","text":"<ul> <li>Good docstrings on classes and methods</li> <li>Clear variable and function names</li> <li>Logical code organization</li> <li>Helpful inline comments</li> </ul>"},{"location":"review/CODE_QUALITY_REVIEW/#code-quality-issues","title":"Code Quality Issues","text":""},{"location":"review/CODE_QUALITY_REVIEW/#error-handling-inconsistencies","title":"\ud83d\udd27 Error Handling Inconsistencies","text":"<p>Issue 1: Mixed Exception Types</p> <pre><code># async_translator.py:94-96\nif not os.path.exists(file_path):\n    raise FileNotFoundError(f\"Input file not found: {file_path}\")\n# Later...\nraise ValueError(f\"Unsupported file format...\")\n</code></pre> <p>Problem: Inconsistent exception types for similar validation errors Recommendation: Use custom exception hierarchy consistently</p> <p>Issue 2: Broad Exception Catching</p> <pre><code># job_manager.py:205-210\nexcept Exception as e:\n    logger.error(f\"Job {job_id} failed: {str(e)}\", exc_info=True)\n    with self._lock:\n        job.mark_failed(str(e))\n</code></pre> <p>Problem: Catching all exceptions may hide programming errors Recommendation: Catch specific exception types</p>"},{"location":"review/CODE_QUALITY_REVIEW/#resource-management-issues","title":"\ud83d\udd27 Resource Management Issues","text":"<p>Issue 3: File Handle Leaks</p> <pre><code># main.py:201-203\nwith open(unique_upload_path, \"wb\") as buffer:\n    content = await file.read()\n    buffer.write(content)\n</code></pre> <p>Problem: <code>file.read()</code> loads entire file into memory Recommendation: Stream file content for large files</p> <p>Issue 4: Thread Safety Concerns</p> <pre><code># progress_monitor.py:56-57\nif job_id not in self._callbacks:\n    return\n</code></pre> <p>Problem: Race condition - callback could be removed between check and use Recommendation: Use proper locking patterns</p>"},{"location":"review/CODE_QUALITY_REVIEW/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":"<p>Issue 5: Hardcoded Values Throughout</p> <pre><code># job_manager.py:29-42\nmax_workers: int = 4\njob_ttl_hours: int = 3\nself._cleanup_interval = timedelta(minutes=30)\n</code></pre> <p>Problem: Configuration scattered throughout codebase Recommendation: Centralized configuration management</p> <p>Issue 6: Magic Numbers</p> <pre><code># async_translator.py:286\ntime.sleep(2 ** job.retry_count)  # Exponential backoff\n\n# progress_monitor.py:207-208\nestimated_seconds = total_paragraphs * 2  # Average 2 seconds per paragraph\n</code></pre> <p>Problem: Hardcoded timing values should be configurable Recommendation: Extract to configuration</p>"},{"location":"review/CODE_QUALITY_REVIEW/#code-duplication","title":"\ud83d\udd27 Code Duplication","text":"<p>Issue 7: Repeated Pattern Implementations</p> <pre><code># Multiple files have similar patterns:\nwith self._lock:\n    # Critical section\n</code></pre> <p>Problem: Locking patterns repeated without abstraction Recommendation: Create locking decorators or context managers</p> <p>Issue 8: Similar Job Status Checks</p> <pre><code># Repeated in multiple places:\nif job.status in [JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED]:\n</code></pre> <p>Recommendation: Extract to utility methods</p>"},{"location":"review/CODE_QUALITY_REVIEW/#memory-management","title":"\ud83d\udd27 Memory Management","text":"<p>Issue 9: Unbounded Collections</p> <pre><code># job_manager.py:37-38\nself._jobs: Dict[str, TranslationJob] = {}\nself._job_futures: Dict[str, Future] = {}\n</code></pre> <p>Problem: In-memory storage can grow indefinitely Recommendation: Implement size limits and LRU eviction</p> <p>Issue 10: Large Object Storage</p> <pre><code># models.py:63-66\nretry_count: int = 0\nlast_progress_update: datetime = field(default_factory=datetime.now)\n</code></pre> <p>Problem: Job objects accumulate metadata without cleanup Recommendation: Separate transient and persistent data</p>"},{"location":"review/CODE_QUALITY_REVIEW/#performance-issues","title":"Performance Issues","text":""},{"location":"review/CODE_QUALITY_REVIEW/#synchronous-operations-in-async-context","title":"\u26a1 Synchronous Operations in Async Context","text":"<p>Issue 11: File I/O Blocking</p> <pre><code># main.py:201-203\nwith open(unique_upload_path, \"wb\") as buffer:\n    content = await file.read()\n    buffer.write(content)  # Synchronous write\n</code></pre> <p>Recommendation: Use <code>aiofiles</code> for async file operations</p> <p>Issue 12: Progress Update Frequency</p> <pre><code># progress_monitor.py:127\nself._update_interval = timedelta(seconds=1)\n</code></pre> <p>Problem: Fixed 1-second interval may be too frequent Recommendation: Adaptive update intervals based on job duration</p>"},{"location":"review/CODE_QUALITY_REVIEW/#databasestorage-patterns","title":"\u26a1 Database/Storage Patterns","text":"<p>Issue 13: Linear Search Patterns</p> <pre><code># async_translator.py:199-201\njobs = [job for job in jobs if job.status == status_filter]\n</code></pre> <p>Problem: O(n) filtering for job lists Recommendation: Index by status for faster lookups</p>"},{"location":"review/CODE_QUALITY_REVIEW/#code-organization-issues","title":"Code Organization Issues","text":""},{"location":"review/CODE_QUALITY_REVIEW/#module-dependencies","title":"\ud83d\udcc1 Module Dependencies","text":"<p>Issue 14: Circular Import Risk</p> <pre><code># Multiple files import from each other\nfrom .job_manager import job_manager\nfrom .progress_monitor import global_progress_tracker\n</code></pre> <p>Problem: Global singletons create tight coupling Recommendation: Dependency injection container</p> <p>Issue 15: Path Manipulation</p> <pre><code># async_translator.py:16\nsys.path.insert(0, str(Path(__file__).parent.parent.parent))\n</code></pre> <p>Problem: Fragile path-based imports Recommendation: Proper package structure and imports</p>"},{"location":"review/CODE_QUALITY_REVIEW/#testing-structure","title":"\ud83d\udcc1 Testing Structure","text":"<p>Issue 16: Mock Overuse</p> <pre><code># Tests heavily rely on mocking\nwith patch.object(job_manager, 'create_job') as mock_create:\n</code></pre> <p>Problem: Over-mocking reduces test confidence Recommendation: More integration tests with real components</p>"},{"location":"review/CODE_QUALITY_REVIEW/#logging-and-observability","title":"Logging and Observability","text":""},{"location":"review/CODE_QUALITY_REVIEW/#logging-issues","title":"\ud83d\udcca Logging Issues","text":"<p>Issue 17: Inconsistent Logging Levels</p> <pre><code>logger.info(f\"Started job {job_id}\")      # Info\nlogger.error(f\"Job {job_id} failed\")      # Error\nlogger.warning(f\"Job {job_id} timeout\")   # Warning\n</code></pre> <p>Problem: No clear logging level strategy Recommendation: Define logging standards and levels</p> <p>Issue 18: Sensitive Data in Logs</p> <pre><code># Potential API key logging\nlogger.info(f\"Started translation with model {model} and key {key[:4]}...\")\n</code></pre> <p>Problem: Even partial API keys could be sensitive Recommendation: Comprehensive log sanitization</p>"},{"location":"review/CODE_QUALITY_REVIEW/#missing-observability","title":"\ud83d\udcca Missing Observability","text":"<p>Missing Features: - Performance metrics collection - Request tracing - Health check details - Resource usage monitoring</p>"},{"location":"review/CODE_QUALITY_REVIEW/#code-style-and-standards","title":"Code Style and Standards","text":""},{"location":"review/CODE_QUALITY_REVIEW/#good-practices-observed","title":"\u2705 Good Practices Observed","text":"<ul> <li>Consistent naming conventions</li> <li>Proper use of type hints</li> <li>Good docstring coverage</li> <li>Logical module structure</li> </ul>"},{"location":"review/CODE_QUALITY_REVIEW/#style-issues","title":"\ud83d\udd27 Style Issues","text":"<p>Issue 19: Long Functions</p> <pre><code># main.py:118-251 (133 lines)\nasync def start_translation():\n</code></pre> <p>Problem: Function too long, multiple responsibilities Recommendation: Extract validation and job creation logic</p> <p>Issue 20: Complex Conditional Logic</p> <pre><code># job_manager.py:242-244\nif (job.status in [JobStatus.COMPLETED, JobStatus.FAILED, JobStatus.CANCELLED] and\n    job.completed_at and job.completed_at &lt; cutoff_time):\n</code></pre> <p>Recommendation: Extract to named methods for clarity</p>"},{"location":"review/CODE_QUALITY_REVIEW/#recommendations-by-priority","title":"Recommendations by Priority","text":""},{"location":"review/CODE_QUALITY_REVIEW/#priority-1-critical","title":"Priority 1 (Critical)","text":"<ol> <li>Fix Thread Safety Issues: Add proper locking around shared state</li> <li>Implement Configuration Management: Centralize all configuration</li> <li>Add Input Validation: Comprehensive validation for all endpoints</li> <li>Fix Resource Leaks: Proper async file handling</li> </ol>"},{"location":"review/CODE_QUALITY_REVIEW/#priority-2-high","title":"Priority 2 (High)","text":"<ol> <li>Error Handling Consistency: Use custom exception hierarchy</li> <li>Extract Long Functions: Break down complex functions</li> <li>Add Performance Monitoring: Metrics and profiling</li> <li>Implement Proper Logging Strategy: Structured logging with levels</li> </ol>"},{"location":"review/CODE_QUALITY_REVIEW/#priority-3-medium","title":"Priority 3 (Medium)","text":"<ol> <li>Reduce Code Duplication: Extract common patterns</li> <li>Improve Test Coverage: More integration tests</li> <li>Add Documentation: API documentation and examples</li> <li>Optimize Performance: Async I/O and caching</li> </ol>"},{"location":"review/CODE_QUALITY_REVIEW/#priority-4-low","title":"Priority 4 (Low)","text":"<ol> <li>Code Style Cleanup: Consistent formatting</li> <li>Add Type Checking: mypy integration</li> <li>Performance Profiling: Identify bottlenecks</li> <li>Documentation Generation: Auto-generated API docs</li> </ol>"},{"location":"review/CODE_QUALITY_REVIEW/#specific-code-improvements","title":"Specific Code Improvements","text":""},{"location":"review/CODE_QUALITY_REVIEW/#example-better-error-handling","title":"Example: Better Error Handling","text":"<pre><code># Current\nexcept Exception as e:\n    logger.error(f\"Error: {e}\")\n    raise\n\n# Improved\nexcept (ValidationError, FileError) as e:\n    logger.warning(f\"Validation failed: {e}\", extra={\"job_id\": job_id})\n    raise\nexcept TranslationAPIError as e:\n    logger.error(f\"API error: {e}\", extra={\"job_id\": job_id, \"api\": e.api_name})\n    raise\nexcept Exception as e:\n    logger.critical(f\"Unexpected error: {e}\", extra={\"job_id\": job_id}, exc_info=True)\n    raise SystemError(\"Internal server error\") from e\n</code></pre>"},{"location":"review/CODE_QUALITY_REVIEW/#example-configuration-management","title":"Example: Configuration Management","text":"<pre><code># config.py\nfrom pydantic import BaseSettings\n\nclass JobManagerSettings(BaseSettings):\n    max_workers: int = 4\n    job_ttl_hours: int = 24\n    cleanup_interval_minutes: int = 30\n\n    class Config:\n        env_prefix = \"JOB_MANAGER_\"\n        env_file = \".env\"\n\nclass Settings(BaseSettings):\n    job_manager: JobManagerSettings = JobManagerSettings()\n    api_host: str = \"127.0.0.1\"\n    api_port: int = 8000\n</code></pre>"},{"location":"review/CODE_QUALITY_REVIEW/#conclusion","title":"Conclusion","text":"<p>The codebase shows good engineering practices but needs refinement for production use. The async architecture is well-designed, but resource management, error handling, and configuration need improvement. Focus on thread safety, input validation, and performance optimization for the next iteration.</p> <p>Recommended next steps: 1. Address all Priority 1 items 2. Implement comprehensive testing strategy 3. Add monitoring and observability 4. Create production deployment guide</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/","title":"Configuration Management Security Update - September 2024","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#executive-summary","title":"Executive Summary","text":"<p>\ud83c\udf89 MAJOR SECURITY TRANSFORMATION COMPLETE - The API layer has successfully addressed all critical security vulnerabilities identified in the initial review through implementation of a comprehensive configuration management system.</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#previous-critical-issues-all-resolved","title":"Previous Critical Issues - ALL RESOLVED \u2705","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#1-cors-bypass-vulnerability-fixed","title":"1. CORS Bypass Vulnerability - FIXED \u2705","text":"<p>Status: CRITICAL \u2192 RESOLVED Implementation: Environment-based CORS configuration - Development: <code>localhost</code> origins only - Staging: Specific staging domains - Production: Whitelisted production domains - Override: <code>CORS_ORIGINS</code> environment variable</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#2-trusted-host-wildcard-fixed","title":"2. Trusted Host Wildcard - FIXED \u2705","text":"<p>Status: CRITICAL \u2192 RESOLVED Implementation: Environment-specific trusted host lists - Eliminates host header injection vulnerability - Secure defaults for each environment - Override capability via <code>TRUSTED_HOSTS</code></p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#3-hardcoded-configuration-values-fixed","title":"3. Hardcoded Configuration Values - FIXED \u2705","text":"<p>Status: MEDIUM \u2192 RESOLVED Implementation: Centralized configuration system - All settings moved to <code>/api_layer/api/config/</code> - Environment-based configuration - Type-safe Pydantic settings - Comprehensive <code>.env.example</code></p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#new-configuration-architecture","title":"New Configuration Architecture","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#core-components","title":"Core Components","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#1-settings-management-api_layerapiconfigsettingspy","title":"1. Settings Management (<code>/api_layer/api/config/settings.py</code>)","text":"<pre><code>class Settings(BaseSettings):\n    # Environment-based configuration\n    environment: str = Field(default=\"development\", env=\"ENVIRONMENT\")\n\n    # Security methods\n    def get_cors_origins(self) -&gt; List[str]\n    def get_trusted_hosts(self) -&gt; List[str]\n    def get_cors_methods(self) -&gt; List[str]\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#2-constants-organization-api_layerapiconfigconstantspy","title":"2. Constants Organization (<code>/api_layer/api/config/constants.py</code>)","text":"<p>Well-Structured Constant Classes: - <code>NetworkConstants</code> - Hosts, ports, protocols - <code>HttpStatusConstants</code> - All HTTP status codes - <code>SecurityConstants</code> - CORS headers, HTTP methods - <code>DefaultValues</code> - Configuration defaults - <code>ValidationConstants</code> - Limits and validation rules - <code>StorageConstants</code> - File extensions, MIME types - <code>TimeConstants</code> - Time-related calculations</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#3-environment-configuration-envexample","title":"3. Environment Configuration (<code>.env.example</code>)","text":"<p>Comprehensive Configuration Template: - Application environment settings - API server configuration - Job manager parameters - Storage directory paths - Security overrides - Production examples</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#security-improvements-achieved","title":"Security Improvements Achieved","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#environment-based-security","title":"\ud83d\udd12 Environment-Based Security","text":"<p>Development Environment:</p> <pre><code>DEV_CORS_ORIGINS = [\"http://localhost:8000\", \"http://127.0.0.1:8000\"]\nDEV_TRUSTED_HOSTS = [\"localhost:8000\", \"127.0.0.1:8000\", \"0.0.0.0:8000\"]\n</code></pre> <p>Production Environment:</p> <pre><code>PRODUCTION_CORS_ORIGINS = [\n    \"https://yourfrontend.com\",\n    \"https://www.yourfrontend.com\"\n]\nPRODUCTION_TRUSTED_HOSTS = [\n    \"yourfrontend.com\",\n    \"api.yourfrontend.com\"\n]\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#http-status-code-standardization","title":"\ud83c\udfaf HTTP Status Code Standardization","text":"<p>Before: <code>status_code=500</code> (15+ instances) After: <code>status_code=HttpStatusConstants.INTERNAL_SERVER_ERROR</code></p> <p>Complete Migration: - All error responses use constants - Consistent error handling - Easy maintenance and updates</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#configuration-logging","title":"\ud83d\udccb Configuration Logging","text":"<p>Runtime Configuration Visibility:</p> <pre><code>logger.info(f\"Environment: {settings.environment}\")\nlogger.info(f\"CORS Origins: {settings.get_cors_origins()}\")\nlogger.info(f\"Trusted Hosts: {settings.get_trusted_hosts()}\")\nlogger.info(f\"Max Workers: {settings.max_workers}\")\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#current-security-status","title":"Current Security Status","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#resolved-critical-issues","title":"\u2705 RESOLVED - Critical Issues","text":"<ol> <li>CORS Bypass - Environment-specific origin control</li> <li>Host Header Injection - Trusted host validation</li> <li>Hardcoded Development Settings - Environment-based configuration</li> <li>Magic Numbers - Centralized constants system</li> <li>Configuration Management - Type-safe settings</li> </ol>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#remaining-medium-priority-issues","title":"\u26a0\ufe0f REMAINING - Medium Priority Issues","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#1-file-upload-security-partially-addressed","title":"1. File Upload Security - PARTIALLY ADDRESSED","text":"<p>Current State: Basic extension validation Missing: - File size limit enforcement - MIME type validation - Content inspection - Malicious file detection</p> <p>Implementation Needed:</p> <pre><code># File size validation\nif file.size &gt; ValidationConstants.MAX_FILE_SIZE_MB * 1024 * 1024:\n    raise HTTPException(400, \"File too large\")\n\n# MIME type validation\nif file.content_type not in StorageConstants.ALLOWED_MIME_TYPES:\n    raise HTTPException(400, \"Invalid file type\")\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#2-path-traversal-partially-addressed","title":"2. Path Traversal - PARTIALLY ADDRESSED","text":"<p>Current State: UUID prefix provides some protection Issue: Filename still not sanitized Risk: Medium (UUID prefix mitigates but doesn't eliminate)</p> <p>Recommendation:</p> <pre><code>from werkzeug.utils import secure_filename\n\ndef get_upload_path(self, filename: str) -&gt; Path:\n    safe_filename = secure_filename(filename)\n    unique_filename = f\"{uuid.uuid4().hex[:8]}_{safe_filename}\"\n    return self._upload_dir / unique_filename\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#3-configuration-value-validation-needs-review","title":"3. Configuration Value Validation - NEEDS REVIEW","text":"<p>Critical Configuration Questions:</p> <p>\ud83d\udea8 Job Manager Settings:</p> <pre><code>DEFAULT_MAX_WORKERS = 4  # Is this sufficient for production load?\nDEFAULT_JOB_TTL_HOURS = 3  # Too short for user workflows?\nDEFAULT_CLEANUP_INTERVAL_MINUTES = 30  # Could interrupt active jobs?\n</code></pre> <p>Recommendations: - Load testing required for worker count validation - User workflow analysis for TTL determination - Job lifecycle analysis for cleanup timing</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#minor-issues-remaining","title":"Minor Issues Remaining","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#hardcoded-values-to-migrate","title":"\ud83d\udca1 Hardcoded Values to Migrate","text":"<p>File Extension Lists:</p> <pre><code># Should use StorageConstants.SUPPORTED_EXTENSIONS\nsupported_formats = ['.epub', '.txt', '.srt', '.md']\n</code></pre> <p>MIME Type Mappings:</p> <pre><code># Should use StorageConstants.MIME_TYPE_MAP\nmime_types = {\n    '.epub': 'application/epub+zip',\n    '.txt': 'text/plain'\n}\n</code></pre> <p>Temperature Validation:</p> <pre><code># Should use ValidationConstants\nif not 0.0 &lt;= temperature &lt;= 2.0:  # Use MIN/MAX_TEMPERATURE\n</code></pre>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#production-readiness-assessment","title":"Production Readiness Assessment","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#previous-status-not-production-ready-critical-vulnerabilities","title":"Previous Status: \ud83d\udea8 NOT PRODUCTION READY (Critical vulnerabilities)","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#current-status-approaching-production-ready-major-improvements","title":"Current Status: \u26a0\ufe0f APPROACHING PRODUCTION READY (Major improvements)","text":"<p>Security Transformation: - Risk Level: CRITICAL \u2192 MEDIUM-LOW - Vulnerability Count: 12 critical issues \u2192 3 medium issues - Production Suitability: 20% \u2192 85%</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#pre-production-checklist","title":"Pre-Production Checklist","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#must-fix-high-priority","title":"\ud83d\udea8 MUST FIX (High Priority):","text":"<ul> <li>[ ] Implement comprehensive file upload validation</li> <li>[ ] Add filename sanitization for path traversal prevention</li> <li>[ ] Validate and test all configuration default values</li> <li>[ ] Implement file size limit enforcement</li> </ul>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#should-fix-medium-priority","title":"\ud83d\udca1 SHOULD FIX (Medium Priority):","text":"<ul> <li>[ ] Complete hardcoded value migration to constants</li> <li>[ ] Add authentication/authorization system</li> <li>[ ] Implement rate limiting</li> <li>[ ] Add comprehensive input validation</li> </ul>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#optional-low-priority","title":"\u2705 OPTIONAL (Low Priority):","text":"<ul> <li>[ ] Enhance error message security</li> <li>[ ] Add security headers middleware</li> <li>[ ] Implement audit logging</li> <li>[ ] Add configuration validation tests</li> </ul>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#configuration-best-practices-implemented","title":"Configuration Best Practices Implemented","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#environment-management","title":"\ud83c\udfaf Environment Management","text":"<ol> <li>Clear Environment Separation - Development, staging, production</li> <li>Secure Defaults - Production-safe default values</li> <li>Override Capability - Environment variable customization</li> <li>Type Safety - Pydantic validation and type checking</li> </ol>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#organization","title":"\ud83d\udcc1 Organization","text":"<ol> <li>Centralized Constants - Single source of truth</li> <li>Logical Grouping - Related constants grouped in classes</li> <li>Clear Naming - Descriptive constant names</li> <li>Documentation - Comprehensive inline documentation</li> </ol>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#maintainability","title":"\ud83d\udd27 Maintainability","text":"<ol> <li>Easy Updates - Change constants in one place</li> <li>Environment Switching - Simple environment configuration</li> <li>Testing Support - Configuration suitable for testing</li> <li>Deployment Ready - Container and deployment friendly</li> </ol>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#recommendations-for-final-production-deployment","title":"Recommendations for Final Production Deployment","text":""},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#1-configuration-value-testing","title":"1. Configuration Value Testing","text":"<p>Load test the following configuration values: - <code>MAX_WORKERS</code> under expected concurrent load - <code>JOB_TTL_HOURS</code> with real user workflows - <code>CLEANUP_INTERVAL_MINUTES</code> with job lifecycle analysis</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#2-security-hardening","title":"2. Security Hardening","text":"<p>Complete the remaining security implementations: - File upload validation - Path traversal prevention - Authentication system - Rate limiting</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#3-monitoring-alerting","title":"3. Monitoring &amp; Alerting","text":"<p>Implement production monitoring for: - Configuration validation - Security event detection - Performance metrics - Error rate tracking</p>"},{"location":"review/CONFIGURATION_SECURITY_UPDATE/#conclusion","title":"Conclusion","text":"<p>The configuration management system implementation represents a successful security transformation of the API layer. The systematic approach to addressing security vulnerabilities through centralized configuration management has eliminated all critical security risks and established a solid foundation for production deployment.</p> <p>Key Achievements: - \u2705 All critical security vulnerabilities resolved - \u2705 Professional configuration management system - \u2705 Environment-based security policies - \u2705 Type-safe, maintainable codebase - \u2705 Production deployment foundation established</p> <p>Next Steps: Complete remaining file security implementations and validate configuration values through load testing to achieve full production readiness.</p> <p>Review Date: September 21, 2024 Reviewer: Senior Security Code Reviewer Status: MAJOR SECURITY IMPROVEMENT COMPLETE</p>"},{"location":"review/EXECUTIVE_SUMMARY/","title":"Executive Summary - API Layer Code Review","text":""},{"location":"review/EXECUTIVE_SUMMARY/#overall-assessment","title":"Overall Assessment","text":"<p>\ud83d\udea8 NOT PRODUCTION READY - The API layer requires significant security hardening and reliability improvements before deployment.</p>"},{"location":"review/EXECUTIVE_SUMMARY/#risk-summary","title":"Risk Summary","text":"Category Risk Level Impact Priority Security \ud83d\udd34 CRITICAL System compromise IMMEDIATE Reliability \ud83d\udfe1 MEDIUM Service disruption HIGH Performance \ud83d\udfe1 MEDIUM User experience MEDIUM Maintainability \ud83d\udfe2 LOW Development velocity LOW"},{"location":"review/EXECUTIVE_SUMMARY/#critical-security-issues-must-fix","title":"\ud83d\udea8 Critical Security Issues (MUST FIX)","text":""},{"location":"review/EXECUTIVE_SUMMARY/#1-complete-cors-bypass-critical","title":"1. Complete CORS Bypass - CRITICAL","text":"<ul> <li>Issue: <code>allow_origins=[\"*\"]</code> accepts requests from any website</li> <li>Impact: Data theft, unauthorized API usage, CSRF attacks</li> <li>Fix: Configure specific allowed origins for production</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#2-arbitrary-file-upload-critical","title":"2. Arbitrary File Upload - CRITICAL","text":"<ul> <li>Issue: No file content validation, only extension checking</li> <li>Impact: Remote code execution, malware upload, DoS attacks</li> <li>Fix: Implement proper file validation and sandboxing</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#3-path-traversal-vulnerability-high","title":"3. Path Traversal Vulnerability - HIGH","text":"<ul> <li>Issue: User-controlled filenames used directly in file paths</li> <li>Impact: Arbitrary file system access</li> <li>Fix: Sanitize and validate all file paths</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#4-no-authentication-high","title":"4. No Authentication - HIGH","text":"<ul> <li>Issue: All endpoints publicly accessible</li> <li>Impact: Unlimited abuse of translation services</li> <li>Fix: Implement API key authentication minimum</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#5-information-disclosure-medium","title":"5. Information Disclosure - MEDIUM","text":"<ul> <li>Issue: Internal error details exposed to clients</li> <li>Impact: System information leakage aids attackers</li> <li>Fix: Generic error messages for client responses</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#architecture-strengths","title":"\ud83c\udfd7\ufe0f Architecture Strengths","text":""},{"location":"review/EXECUTIVE_SUMMARY/#well-designed-async-architecture","title":"\u2705 Well-Designed Async Architecture","text":"<ul> <li>Clean separation of concerns across modules</li> <li>Proper async/await patterns throughout</li> <li>Thread-safe job management with appropriate locking</li> <li>Comprehensive progress monitoring system</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#good-code-organization","title":"\u2705 Good Code Organization","text":"<ul> <li>Logical module structure and clear responsibilities</li> <li>Proper use of design patterns (Factory, Observer)</li> <li>Good type hints and documentation</li> <li>Comprehensive error handling framework</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#solid-testing-foundation","title":"\u2705 Solid Testing Foundation","text":"<ul> <li>Good unit test coverage for core components</li> <li>Proper use of fixtures and mocking</li> <li>Thread safety and concurrent testing</li> <li>Integration test framework in place</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#major-reliability-concerns","title":"\u26a0\ufe0f Major Reliability Concerns","text":""},{"location":"review/EXECUTIVE_SUMMARY/#configuration-management-issues","title":"Configuration Management Issues","text":"<ul> <li>Problem: Hardcoded values throughout codebase</li> <li>Impact: Difficult to configure for different environments</li> <li>Examples:</li> <li><code>max_workers=4</code> fixed thread pool</li> <li><code>host=\"0.0.0.0\"</code> development binding</li> <li><code>job_ttl_hours=3</code> fixed cleanup interval</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#resource-management-problems","title":"Resource Management Problems","text":"<ul> <li>Problem: In-memory job storage without persistence</li> <li>Impact: All jobs lost on restart, no horizontal scaling</li> <li>Risk: Memory exhaustion with high job volume</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#file-handling-vulnerabilities","title":"File Handling Vulnerabilities","text":"<ul> <li>Problem: Local file storage with manual cleanup</li> <li>Impact: File system clutter, potential disk space issues</li> <li>Risk: Race conditions in file operations</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#performance-limitations","title":"\ud83d\udcca Performance Limitations","text":""},{"location":"review/EXECUTIVE_SUMMARY/#scalability-bottlenecks","title":"Scalability Bottlenecks","text":"<ul> <li>Fixed thread pool limits concurrent processing</li> <li>In-memory storage prevents horizontal scaling</li> <li>No caching layer for repeated operations</li> <li>Synchronous file I/O in async context</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#memory-management","title":"Memory Management","text":"<ul> <li>Unbounded job storage can lead to memory exhaustion</li> <li>Large file uploads load entirely into memory</li> <li>No resource usage monitoring or limits</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#testing-gaps","title":"\ud83e\uddea Testing Gaps","text":""},{"location":"review/EXECUTIVE_SUMMARY/#missing-test-coverage","title":"Missing Test Coverage","text":"<ul> <li>API Endpoints: No FastAPI endpoint tests</li> <li>Security: No security validation tests</li> <li>Integration: Limited real integration testing</li> <li>Performance: No load or stress testing</li> <li>Error Handling: Error handler component untested</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#test-quality-issues","title":"Test Quality Issues","text":"<ul> <li>Over-reliance on mocking reduces confidence</li> <li>Missing edge case coverage</li> <li>No end-to-end workflow validation</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#immediate-action-items","title":"\ud83c\udfaf Immediate Action Items","text":""},{"location":"review/EXECUTIVE_SUMMARY/#priority-1-security-hardening-days-1-3","title":"Priority 1: Security Hardening (Days 1-3)","text":"<ol> <li>\u2705 Fix CORS configuration</li> <li>\u2705 Implement file upload validation</li> <li>\u2705 Add path sanitization</li> <li>\u2705 Implement basic API authentication</li> <li>\u2705 Remove sensitive error details</li> </ol>"},{"location":"review/EXECUTIVE_SUMMARY/#priority-2-critical-fixes-days-4-7","title":"Priority 2: Critical Fixes (Days 4-7)","text":"<ol> <li>\u2705 Add configuration management</li> <li>\u2705 Implement proper input validation</li> <li>\u2705 Add request size limits</li> <li>\u2705 Fix async file handling</li> <li>\u2705 Add basic monitoring</li> </ol>"},{"location":"review/EXECUTIVE_SUMMARY/#priority-3-reliability-days-8-14","title":"Priority 3: Reliability (Days 8-14)","text":"<ol> <li>\u2705 Add persistent job storage</li> <li>\u2705 Implement health checks</li> <li>\u2705 Add rate limiting</li> <li>\u2705 Improve error handling</li> <li>\u2705 Add proper logging</li> </ol>"},{"location":"review/EXECUTIVE_SUMMARY/#development-recommendations","title":"\ud83d\udccb Development Recommendations","text":""},{"location":"review/EXECUTIVE_SUMMARY/#architecture-improvements","title":"Architecture Improvements","text":"<ul> <li>Service Layer: Extract translation logic to separate service</li> <li>Storage Layer: Implement persistent job storage (Redis/PostgreSQL)</li> <li>Configuration: Environment-based configuration management</li> <li>Monitoring: Add comprehensive observability</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#code-quality-enhancements","title":"Code Quality Enhancements","text":"<ul> <li>Error Handling: Consistent exception hierarchy</li> <li>Resource Management: Proper async patterns throughout</li> <li>Testing: Comprehensive API and integration test suite</li> <li>Documentation: API documentation and deployment guides</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#production-readiness","title":"Production Readiness","text":"<ul> <li>Security: WAF, rate limiting, input sanitization</li> <li>Deployment: Container orchestration, health checks</li> <li>Monitoring: Metrics, logging, alerting</li> <li>Scalability: Horizontal scaling architecture</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#business-impact-assessment","title":"\ud83d\udcb0 Business Impact Assessment","text":""},{"location":"review/EXECUTIVE_SUMMARY/#current-state-risks","title":"Current State Risks","text":"<ul> <li>Security breaches could lead to data theft and legal liability</li> <li>Service instability affects user experience and reputation</li> <li>Scalability limits restrict business growth potential</li> <li>Maintenance overhead from technical debt</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#recommended-investment","title":"Recommended Investment","text":"<ul> <li>Security: 3-5 developer days (critical)</li> <li>Reliability: 5-7 developer days (high priority)</li> <li>Scalability: 10-15 developer days (medium priority)</li> <li>Total: 3-4 weeks for production readiness</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#return-on-investment","title":"Return on Investment","text":"<ul> <li>Risk Reduction: Prevents potential security incidents</li> <li>Scalability: Enables business growth and higher load</li> <li>Maintainability: Reduces long-term development costs</li> <li>User Experience: Improved reliability and performance</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#deployment-blockers","title":"\ud83d\udee1\ufe0f Deployment Blockers","text":""},{"location":"review/EXECUTIVE_SUMMARY/#cannot-deploy-until-fixed","title":"Cannot Deploy Until Fixed","text":"<ol> <li>CORS security vulnerability</li> <li>File upload validation</li> <li>Path traversal protection</li> <li>Basic authentication implementation</li> <li>Error message sanitization</li> </ol>"},{"location":"review/EXECUTIVE_SUMMARY/#should-fix-before-deployment","title":"Should Fix Before Deployment","text":"<ol> <li>Configuration management</li> <li>Input validation framework</li> <li>Rate limiting implementation</li> <li>Proper async file handling</li> <li>Basic monitoring and logging</li> </ol>"},{"location":"review/EXECUTIVE_SUMMARY/#success-metrics","title":"\ud83d\udcc8 Success Metrics","text":""},{"location":"review/EXECUTIVE_SUMMARY/#security-metrics","title":"Security Metrics","text":"<ul> <li>Zero critical vulnerabilities</li> <li>All inputs validated</li> <li>Authentication on all endpoints</li> <li>Security headers implemented</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#reliability-metrics","title":"Reliability Metrics","text":"<ul> <li>99.9% uptime target</li> <li>Job persistence across restarts</li> <li>Graceful error handling</li> <li>Resource usage monitoring</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>&lt; 200ms API response times</li> <li>Support for 50+ concurrent jobs</li> <li>&lt; 30 second file upload handling</li> <li>Memory usage bounded and monitored</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#future-roadmap","title":"\ud83d\udd2e Future Roadmap","text":""},{"location":"review/EXECUTIVE_SUMMARY/#phase-1-security-stability-month-1","title":"Phase 1: Security &amp; Stability (Month 1)","text":"<ul> <li>Fix all critical security issues</li> <li>Implement configuration management</li> <li>Add comprehensive testing</li> <li>Basic production deployment</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#phase-2-scale-performance-month-2","title":"Phase 2: Scale &amp; Performance (Month 2)","text":"<ul> <li>Horizontal scaling architecture</li> <li>Performance optimization</li> <li>Advanced monitoring</li> <li>Load testing validation</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#phase-3-advanced-features-month-3","title":"Phase 3: Advanced Features (Month 3+)","text":"<ul> <li>Caching layer implementation</li> <li>Advanced error recovery</li> <li>Multi-tenant architecture</li> <li>Analytics and reporting</li> </ul>"},{"location":"review/EXECUTIVE_SUMMARY/#conclusion","title":"Conclusion","text":"<p>The API layer demonstrates solid engineering fundamentals with a well-designed async architecture. However, critical security vulnerabilities make it unsuitable for production deployment without immediate remediation.</p> <p>Recommendation: Complete Priority 1 security fixes before any production consideration. The codebase has good bones but needs security and reliability hardening to meet enterprise standards.</p> <p>Timeline: 3-4 weeks of focused development to achieve production readiness, with security fixes required in the first week.</p>"},{"location":"review/SECURITY_ANALYSIS/","title":"Security Analysis Report - API Layer","text":""},{"location":"review/SECURITY_ANALYSIS/#executive-summary","title":"Executive Summary","text":"<p>\ud83d\udea8 CRITICAL SECURITY ISSUES FOUND - This API layer has several severe security vulnerabilities that make it unsuitable for production deployment without immediate remediation.</p>"},{"location":"review/SECURITY_ANALYSIS/#critical-security-issues","title":"CRITICAL Security Issues","text":""},{"location":"review/SECURITY_ANALYSIS/#1-complete-cors-bypass-severity-critical","title":"1. Complete CORS Bypass - SEVERITY: CRITICAL","text":"<p>Location: <code>/api_layer/api/main.py:61-67</code></p> <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # ALLOWS ANY ORIGIN\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # ALLOWS ANY METHOD\n    allow_headers=[\"*\"],  # ALLOWS ANY HEADER\n)\n</code></pre> <p>Impact: Complete bypass of same-origin policy. Any website can make requests to this API. Risk: Data theft, CSRF attacks, unauthorized API usage Recommendation: Configure specific allowed origins for production</p>"},{"location":"review/SECURITY_ANALYSIS/#2-trusted-host-wildcard-severity-critical","title":"2. Trusted Host Wildcard - SEVERITY: CRITICAL","text":"<p>Location: <code>/api_layer/api/main.py:69-73</code></p> <pre><code>app.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=[\"*\"]  # ACCEPTS ANY HOST HEADER\n)\n</code></pre> <p>Impact: Host header injection vulnerability Risk: Cache poisoning, password reset attacks, web cache deception Recommendation: Specify exact allowed hostnames</p>"},{"location":"review/SECURITY_ANALYSIS/#3-arbitrary-file-upload-severity-high","title":"3. Arbitrary File Upload - SEVERITY: HIGH","text":"<p>Location: <code>/api_layer/api/main.py:174-186</code> - File type validation only checks extension, easily bypassed - No file size limits - No content validation - Files stored in predictable locations</p> <p>Risk: - Malicious file upload leading to RCE - DoS via large file uploads - Path traversal attacks</p>"},{"location":"review/SECURITY_ANALYSIS/#4-path-traversal-vulnerability-severity-high","title":"4. Path Traversal Vulnerability - SEVERITY: HIGH","text":"<p>Location: <code>/api_layer/api/main.py:198, 208</code></p> <pre><code>unique_upload_path = job_manager.get_upload_path(file.filename)\n# filename can contain \"../../../etc/passwd\"\n</code></pre> <p>Impact: Attackers can write files anywhere on the system Recommendation: Sanitize filenames, use safe path generation</p>"},{"location":"review/SECURITY_ANALYSIS/#5-information-disclosure-severity-medium","title":"5. Information Disclosure - SEVERITY: MEDIUM","text":"<p>Location: <code>/api_layer/api/main.py:76-87</code></p> <pre><code>@app.exception_handler(Exception)\nasync def global_exception_handler(request, exc):\n    return JSONResponse(\n        content=ErrorResponse(\n            detail=str(exc),  # EXPOSES INTERNAL ERROR DETAILS\n        ).dict()\n    )\n</code></pre> <p>Impact: Sensitive system information leaked in error responses Risk: Information gathering for further attacks</p>"},{"location":"review/SECURITY_ANALYSIS/#6-no-authenticationauthorization-severity-high","title":"6. No Authentication/Authorization - SEVERITY: HIGH","text":"<p>Impact: All endpoints are publicly accessible Risk: Unauthorized usage, abuse, DoS attacks Recommendation: Implement API key authentication at minimum</p>"},{"location":"review/SECURITY_ANALYSIS/#7-no-rate-limiting-severity-medium","title":"7. No Rate Limiting - SEVERITY: MEDIUM","text":"<p>Impact: API can be abused for DoS attacks Risk: Resource exhaustion, service disruption Recommendation: Implement rate limiting per IP/user</p>"},{"location":"review/SECURITY_ANALYSIS/#configuration-security-issues","title":"Configuration Security Issues","text":""},{"location":"review/SECURITY_ANALYSIS/#8-hardcoded-development-settings-severity-medium","title":"8. Hardcoded Development Settings - SEVERITY: MEDIUM","text":"<p>Location: <code>/api_layer/api/main.py:450-458</code></p> <pre><code>uvicorn.run(\n    \"main:app\",\n    host=\"0.0.0.0\",  # BINDS TO ALL INTERFACES\n    reload=True,     # DEBUG MODE ENABLED\n)\n</code></pre> <p>Risk: Debug mode exposes sensitive information, binding to all interfaces increases attack surface</p>"},{"location":"review/SECURITY_ANALYSIS/#9-insecure-file-permissions-severity-medium","title":"9. Insecure File Permissions - SEVERITY: MEDIUM","text":"<p>Location: <code>/api_layer/api/job_manager.py:51-52</code></p> <pre><code>directory.mkdir(exist_ok=True)  # No explicit permissions set\n</code></pre> <p>Risk: Created directories may have overly permissive permissions</p>"},{"location":"review/SECURITY_ANALYSIS/#data-security-issues","title":"Data Security Issues","text":""},{"location":"review/SECURITY_ANALYSIS/#10-api-keys-in-logs-severity-high","title":"10. API Keys in Logs - SEVERITY: HIGH","text":"<p>The system accepts API keys via form parameters but may log them: - No redaction of sensitive parameters in logs - Keys stored in job objects without encryption - Keys passed through multiple layers without protection</p>"},{"location":"review/SECURITY_ANALYSIS/#11-temporary-file-security-severity-medium","title":"11. Temporary File Security - SEVERITY: MEDIUM","text":"<ul> <li>Uploaded files stored in predictable locations</li> <li>No secure deletion of temporary files</li> <li>Race conditions in file handling</li> </ul>"},{"location":"review/SECURITY_ANALYSIS/#container-security-issues-dockerfile","title":"Container Security Issues (Dockerfile)","text":""},{"location":"review/SECURITY_ANALYSIS/#12-overly-permissive-error-handling-severity-medium","title":"12. Overly Permissive Error Handling - SEVERITY: MEDIUM","text":"<p>Location: <code>/api_layer/Dockerfile:9, 19</code></p> <pre><code>RUN pip install ... || echo \"Main requirements failed, continuing...\"\n</code></pre> <p>Risk: Silent failures may leave system in insecure state</p>"},{"location":"review/SECURITY_ANALYSIS/#recommendations","title":"Recommendations","text":""},{"location":"review/SECURITY_ANALYSIS/#immediate-actions-pre-production","title":"Immediate Actions (Pre-Production)","text":"<ol> <li>Fix CORS Configuration: Set specific allowed origins</li> <li>Fix Trusted Host: Set specific allowed hostnames</li> <li>Implement Authentication: Add API key authentication</li> <li>Sanitize File Uploads: Validate file content, limit size, sanitize paths</li> <li>Remove Debug Information: Don't expose internal errors to clients</li> </ol>"},{"location":"review/SECURITY_ANALYSIS/#security-headers","title":"Security Headers","text":"<p>Implement security headers: - <code>X-Content-Type-Options: nosniff</code> - <code>X-Frame-Options: DENY</code> - <code>X-XSS-Protection: 1; mode=block</code> - <code>Strict-Transport-Security</code></p>"},{"location":"review/SECURITY_ANALYSIS/#input-validation","title":"Input Validation","text":"<ul> <li>Validate all input parameters</li> <li>Implement proper file type detection (magic numbers)</li> <li>Add request size limits</li> <li>Sanitize all user-provided data</li> </ul>"},{"location":"review/SECURITY_ANALYSIS/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Log security events</li> <li>Implement intrusion detection</li> <li>Monitor for suspicious patterns</li> <li>Redact sensitive data from logs</li> </ul>"},{"location":"review/SECURITY_ANALYSIS/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li>Use HTTPS only</li> <li>Implement rate limiting</li> <li>Add Web Application Firewall (WAF)</li> <li>Regular security testing</li> </ul>"},{"location":"review/SECURITY_ANALYSIS/#risk-assessment-matrix","title":"Risk Assessment Matrix","text":"Vulnerability Likelihood Impact Risk Level CORS Bypass High High CRITICAL Host Header Injection Medium High HIGH File Upload RCE High Critical CRITICAL Path Traversal High High HIGH No Authentication High Medium HIGH Information Disclosure Medium Medium MEDIUM"},{"location":"review/SECURITY_ANALYSIS/#conclusion","title":"Conclusion","text":"<p>This API is NOT production-ready due to multiple critical security vulnerabilities. The CORS and file upload issues alone make this extremely dangerous to deploy. All critical and high-severity issues must be addressed before any production deployment.</p>"},{"location":"review/TESTING_STRATEGY/","title":"Testing Strategy Review &amp; Recommendations","text":""},{"location":"review/TESTING_STRATEGY/#current-testing-status","title":"Current Testing Status","text":""},{"location":"review/TESTING_STRATEGY/#existing-test-coverage","title":"\u2705 Existing Test Coverage","text":"<ul> <li>Unit Tests: 3 comprehensive test files</li> <li><code>test_job_manager.py</code> (301 lines) - Excellent coverage</li> <li><code>test_async_translator.py</code> (328 lines) - Good coverage with mocking</li> <li><code>test_progress_monitor.py</code> (295 lines) - Comprehensive progress testing</li> <li>Integration Test: Basic integration test framework</li> <li>Test Framework: pytest with async support</li> </ul>"},{"location":"review/TESTING_STRATEGY/#test-quality-assessment","title":"\ud83d\udcca Test Quality Assessment","text":"<p>Strengths: - Comprehensive unit test coverage for core components - Good use of fixtures and mocking - Thread safety testing - Error handling test cases - Cleanup mechanisms in tests</p> <p>Weaknesses: - Over-reliance on mocking reduces confidence - Limited end-to-end testing - No performance testing - Missing security testing - No load testing</p>"},{"location":"review/TESTING_STRATEGY/#test-coverage-analysis","title":"Test Coverage Analysis","text":""},{"location":"review/TESTING_STRATEGY/#current-coverage-by-component","title":"Current Coverage by Component","text":"Component Unit Tests Integration Tests E2E Tests JobManager \u2705 Excellent \u26a0\ufe0f Limited \u274c None AsyncTranslator \u2705 Good \u26a0\ufe0f Mocked \u274c None ProgressMonitor \u2705 Excellent \u2705 Good \u274c None ErrorHandler \u274c Missing \u274c Missing \u274c None FastAPI Endpoints \u274c Missing \u274c Missing \u274c None File Operations \u26a0\ufe0f Partial \u274c Missing \u274c None"},{"location":"review/TESTING_STRATEGY/#critical-testing-gaps","title":"Critical Testing Gaps","text":""},{"location":"review/TESTING_STRATEGY/#missing-test-categories","title":"\ud83d\udea8 Missing Test Categories","text":""},{"location":"review/TESTING_STRATEGY/#1-api-endpoint-testing","title":"1. API Endpoint Testing","text":"<p>Gap: No tests for FastAPI endpoints</p> <pre><code># Missing tests for:\n@app.post(\"/translate\")\n@app.get(\"/status/{job_id}\")\n@app.get(\"/download/{job_id}\")\n</code></pre> <p>Risk: API contract not validated, regression risks</p>"},{"location":"review/TESTING_STRATEGY/#2-security-testing","title":"2. Security Testing","text":"<p>Gap: No security validation tests</p> <pre><code># Need tests for:\n- File upload vulnerabilities\n- Path traversal attacks\n- Input validation bypass\n- CORS policy enforcement\n- Rate limiting behavior\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#3-error-handler-testing","title":"3. Error Handler Testing","text":"<p>Gap: Comprehensive error handling component not tested</p> <pre><code># error_handler.py has no corresponding test file\nclass ErrorHandler:  # 356 lines of untested code\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#4-integration-testing","title":"4. Integration Testing","text":"<p>Gap: Limited real integration testing - Current integration test uses extensive mocking - No tests with actual file processing - No end-to-end workflow validation</p>"},{"location":"review/TESTING_STRATEGY/#test-quality-issues","title":"\ud83d\udd27 Test Quality Issues","text":""},{"location":"review/TESTING_STRATEGY/#issue-1-over-mocking-reduces-confidence","title":"Issue 1: Over-Mocking Reduces Confidence","text":"<pre><code># test_async_translator.py:52-61\nwith patch.object(job_manager, 'create_job') as mock_create, \\\n     patch.object(job_manager, 'start_job') as mock_start, \\\n     patch('shutil.copy2') as mock_copy:\n</code></pre> <p>Problem: Heavy mocking means tests don't validate real behavior Recommendation: Add integration tests with real components</p>"},{"location":"review/TESTING_STRATEGY/#issue-2-missing-edge-cases","title":"Issue 2: Missing Edge Cases","text":"<pre><code># Need tests for:\n- Network timeouts during translation\n- Disk space exhaustion\n- Memory pressure scenarios\n- Concurrent job limits\n- File corruption handling\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#issue-3-no-performance-testing","title":"Issue 3: No Performance Testing","text":"<pre><code># Missing performance validations:\n- Large file handling (&gt;100MB)\n- Concurrent job processing\n- Memory usage under load\n- Response time requirements\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#recommended-testing-strategy","title":"Recommended Testing Strategy","text":""},{"location":"review/TESTING_STRATEGY/#testing-pyramid-implementation","title":"\ud83c\udfaf Testing Pyramid Implementation","text":"<pre><code>                    E2E Tests (5%)\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502 Full workflows  \u2502\n                 \u2502 Real files      \u2502\n                 \u2502 Performance     \u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               Integration Tests (25%)\n           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n           \u2502 Component interactions      \u2502\n           \u2502 Database operations         \u2502\n           \u2502 File system operations      \u2502\n           \u2502 API contract testing        \u2502\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          Unit Tests (70%)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Individual component logic            \u2502\n    \u2502 Business rule validation              \u2502\n    \u2502 Error handling                        \u2502\n    \u2502 Edge cases and boundary conditions    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#specific-test-implementations-needed","title":"\ud83e\uddea Specific Test Implementations Needed","text":""},{"location":"review/TESTING_STRATEGY/#1-api-contract-tests","title":"1. API Contract Tests","text":"<pre><code># test_api_endpoints.py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom api.main import app\n\nclient = TestClient(app)\n\nclass TestTranslationEndpoints:\n    def test_start_translation_valid_file(self):\n        \"\"\"Test translation start with valid EPUB file\"\"\"\n        with open(\"test_files/sample.epub\", \"rb\") as f:\n            response = client.post(\n                \"/translate\",\n                files={\"file\": (\"test.epub\", f, \"application/epub+zip\")},\n                data={\n                    \"model\": \"google\",\n                    \"key\": \"test-key\",\n                    \"language\": \"zh-cn\"\n                }\n            )\n        assert response.status_code == 200\n        assert \"job_id\" in response.json()\n\n    def test_start_translation_invalid_file_type(self):\n        \"\"\"Test rejection of invalid file types\"\"\"\n        with open(\"test_files/malicious.exe\", \"rb\") as f:\n            response = client.post(\n                \"/translate\",\n                files={\"file\": (\"test.exe\", f, \"application/octet-stream\")},\n                data={\"model\": \"google\", \"key\": \"test-key\"}\n            )\n        assert response.status_code == 400\n\n    def test_path_traversal_attack(self):\n        \"\"\"Test protection against path traversal\"\"\"\n        malicious_filename = \"../../../etc/passwd\"\n        response = client.post(\n            \"/translate\",\n            files={\"file\": (malicious_filename, b\"content\", \"application/epub+zip\")},\n            data={\"model\": \"google\", \"key\": \"test-key\"}\n        )\n        # Should either reject or sanitize the filename\n        assert response.status_code in [400, 200]\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#2-security-tests","title":"2. Security Tests","text":"<pre><code># test_security.py\nclass TestSecurityValidation:\n    def test_file_size_limit(self):\n        \"\"\"Test file size limits are enforced\"\"\"\n        large_file = b\"x\" * (100 * 1024 * 1024)  # 100MB\n        response = client.post(\n            \"/translate\",\n            files={\"file\": (\"large.epub\", large_file, \"application/epub+zip\")},\n            data={\"model\": \"google\", \"key\": \"test-key\"}\n        )\n        # Should reject large files\n        assert response.status_code == 413\n\n    def test_malicious_file_content(self):\n        \"\"\"Test detection of malicious file content\"\"\"\n        # Test various malicious payloads\n        malicious_content = b\"&lt;script&gt;alert('xss')&lt;/script&gt;\"\n        response = client.post(\n            \"/translate\",\n            files={\"file\": (\"test.epub\", malicious_content, \"application/epub+zip\")},\n            data={\"model\": \"google\", \"key\": \"test-key\"}\n        )\n        # Should validate file content\n        assert response.status_code == 400\n\n    def test_rate_limiting(self):\n        \"\"\"Test rate limiting enforcement\"\"\"\n        for i in range(10):  # Exceed rate limit\n            response = client.post(\"/translate\", ...)\n        assert response.status_code == 429  # Too Many Requests\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#3-integration-tests","title":"3. Integration Tests","text":"<pre><code># test_integration.py\nclass TestFullWorkflow:\n    @pytest.mark.integration\n    def test_complete_translation_workflow(self):\n        \"\"\"Test complete translation from upload to download\"\"\"\n        # 1. Upload file\n        response = client.post(\"/translate\", ...)\n        job_id = response.json()[\"job_id\"]\n\n        # 2. Monitor progress\n        max_wait = 30  # seconds\n        while max_wait &gt; 0:\n            status_response = client.get(f\"/status/{job_id}\")\n            status = status_response.json()[\"status\"]\n            if status in [\"completed\", \"failed\"]:\n                break\n            time.sleep(1)\n            max_wait -= 1\n\n        assert status == \"completed\"\n\n        # 3. Download result\n        download_response = client.get(f\"/download/{job_id}\")\n        assert download_response.status_code == 200\n        assert download_response.headers[\"content-type\"] == \"application/epub+zip\"\n\n    @pytest.mark.integration\n    def test_concurrent_job_processing(self):\n        \"\"\"Test multiple concurrent translation jobs\"\"\"\n        import concurrent.futures\n\n        def submit_job(i):\n            return client.post(\"/translate\", files=..., data=...)\n\n        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n            futures = [executor.submit(submit_job, i) for i in range(5)]\n            results = [f.result() for f in futures]\n\n        # All jobs should be accepted\n        assert all(r.status_code == 200 for r in results)\n\n        # All should have unique job IDs\n        job_ids = [r.json()[\"job_id\"] for r in results]\n        assert len(set(job_ids)) == 5\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#4-performance-tests","title":"4. Performance Tests","text":"<pre><code># test_performance.py\nimport time\nimport psutil\n\nclass TestPerformance:\n    @pytest.mark.performance\n    def test_large_file_handling(self):\n        \"\"\"Test performance with large files\"\"\"\n        # Create large test file\n        large_epub = create_large_test_epub(50_000_000)  # 50MB\n\n        start_time = time.time()\n        response = client.post(\"/translate\", files={\"file\": large_epub}, ...)\n        upload_time = time.time() - start_time\n\n        # Upload should complete within reasonable time\n        assert upload_time &lt; 30  # 30 seconds max\n        assert response.status_code == 200\n\n    @pytest.mark.performance\n    def test_memory_usage_under_load(self):\n        \"\"\"Test memory usage doesn't leak under load\"\"\"\n        initial_memory = psutil.Process().memory_info().rss\n\n        # Submit many jobs\n        for i in range(20):\n            client.post(\"/translate\", ...)\n\n        final_memory = psutil.Process().memory_info().rss\n        memory_growth = final_memory - initial_memory\n\n        # Memory growth should be reasonable\n        assert memory_growth &lt; 100_000_000  # 100MB limit\n\n    @pytest.mark.performance\n    def test_response_time_requirements(self):\n        \"\"\"Test API response time requirements\"\"\"\n        start_time = time.time()\n        response = client.get(\"/health\")\n        response_time = time.time() - start_time\n\n        assert response_time &lt; 1.0  # 1 second max\n        assert response.status_code == 200\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#5-error-handling-tests","title":"5. Error Handling Tests","text":"<pre><code># test_error_handling.py\nclass TestErrorHandling:\n    def test_error_handler_classification(self):\n        \"\"\"Test error classification logic\"\"\"\n        from api.error_handler import global_error_handler\n\n        # Test different error types\n        timeout_error = TimeoutError(\"Operation timed out\")\n        classified = global_error_handler.handle_error(\n            timeout_error, \"job-123\", \"translation\"\n        )\n        assert classified.error_type == ErrorType.TIMEOUT\n\n    def test_retry_logic(self):\n        \"\"\"Test retry mechanism\"\"\"\n        from api.error_handler import RetryManager\n\n        retry_manager = RetryManager(max_retries=3)\n        attempt_count = 0\n\n        def failing_operation():\n            nonlocal attempt_count\n            attempt_count += 1\n            if attempt_count &lt; 3:\n                raise ConnectionError(\"Network error\")\n            return \"success\"\n\n        with retry_manager.retry_context(\"job-123\", \"test\"):\n            result = failing_operation()\n\n        assert result == \"success\"\n        assert attempt_count == 3\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#test-infrastructure-improvements","title":"\ud83c\udf9b\ufe0f Test Infrastructure Improvements","text":""},{"location":"review/TESTING_STRATEGY/#1-test-data-management","title":"1. Test Data Management","text":"<pre><code># conftest.py\n@pytest.fixture(scope=\"session\")\ndef test_files():\n    \"\"\"Provide test files for various scenarios\"\"\"\n    return {\n        \"valid_epub\": Path(\"test_data/valid_book.epub\"),\n        \"large_epub\": Path(\"test_data/large_book.epub\"),\n        \"corrupted_epub\": Path(\"test_data/corrupted.epub\"),\n        \"malicious_file\": Path(\"test_data/malicious.exe\")\n    }\n\n@pytest.fixture\ndef clean_database():\n    \"\"\"Clean database state between tests\"\"\"\n    # Setup\n    yield\n    # Cleanup\n    job_manager._jobs.clear()\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#2-mock-services","title":"2. Mock Services","text":"<pre><code># test_helpers.py\nclass MockTranslationService:\n    \"\"\"Mock translation service for testing\"\"\"\n    def __init__(self, failure_rate=0.0, delay=0.1):\n        self.failure_rate = failure_rate\n        self.delay = delay\n\n    async def translate(self, text):\n        await asyncio.sleep(self.delay)\n        if random.random() &lt; self.failure_rate:\n            raise Exception(\"Translation failed\")\n        return f\"Translated: {text}\"\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#3-test-categories-and-markers","title":"3. Test Categories and Markers","text":"<pre><code># pytest.ini\n[tool:pytest]\nmarkers =\n    unit: Unit tests (fast, isolated)\n    integration: Integration tests (medium speed)\n    e2e: End-to-end tests (slow, full system)\n    performance: Performance and load tests\n    security: Security validation tests\n    smoke: Quick smoke tests for deployment validation\n\n# Run different test categories:\n# pytest -m unit                    # Fast unit tests\n# pytest -m \"integration or e2e\"    # Slower tests\n# pytest -m security                # Security tests\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#test-metrics-and-coverage","title":"\ud83d\udcca Test Metrics and Coverage","text":""},{"location":"review/TESTING_STRATEGY/#coverage-requirements","title":"Coverage Requirements","text":"<ul> <li>Unit Tests: 95% line coverage minimum</li> <li>Integration Tests: All critical paths covered</li> <li>API Tests: All endpoints tested</li> <li>Error Paths: All error conditions tested</li> </ul>"},{"location":"review/TESTING_STRATEGY/#performance-benchmarks","title":"Performance Benchmarks","text":"<ul> <li>API Response Time: &lt; 200ms for status endpoints</li> <li>File Upload: &lt; 30 seconds for 50MB files</li> <li>Memory Usage: &lt; 100MB growth per job</li> <li>Concurrent Jobs: Support 10 simultaneous jobs</li> </ul>"},{"location":"review/TESTING_STRATEGY/#implementation-roadmap","title":"\ud83d\ude80 Implementation Roadmap","text":""},{"location":"review/TESTING_STRATEGY/#phase-1-foundation-week-1-2","title":"Phase 1: Foundation (Week 1-2)","text":"<ol> <li>\u2705 Add API endpoint tests</li> <li>\u2705 Implement security tests</li> <li>\u2705 Create test data fixtures</li> <li>\u2705 Add error handler tests</li> </ol>"},{"location":"review/TESTING_STRATEGY/#phase-2-integration-week-3-4","title":"Phase 2: Integration (Week 3-4)","text":"<ol> <li>\u2705 End-to-end workflow tests</li> <li>\u2705 File handling integration tests</li> <li>\u2705 Concurrent processing tests</li> <li>\u2705 Database integration tests</li> </ol>"},{"location":"review/TESTING_STRATEGY/#phase-3-performance-week-5-6","title":"Phase 3: Performance (Week 5-6)","text":"<ol> <li>\u2705 Load testing framework</li> <li>\u2705 Performance benchmarks</li> <li>\u2705 Memory usage validation</li> <li>\u2705 Stress testing</li> </ol>"},{"location":"review/TESTING_STRATEGY/#phase-4-production-week-7-8","title":"Phase 4: Production (Week 7-8)","text":"<ol> <li>\u2705 Security penetration tests</li> <li>\u2705 Deployment validation tests</li> <li>\u2705 Monitoring integration tests</li> <li>\u2705 Disaster recovery tests</li> </ol>"},{"location":"review/TESTING_STRATEGY/#test-automation-strategy","title":"Test Automation Strategy","text":""},{"location":"review/TESTING_STRATEGY/#continuous-integration-pipeline","title":"Continuous Integration Pipeline","text":"<pre><code># .github/workflows/test.yml\nname: Test Suite\non: [push, pull_request]\n\njobs:\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run unit tests\n        run: pytest -m unit --cov=api --cov-report=xml\n\n  integration-tests:\n    runs-on: ubuntu-latest\n    needs: unit-tests\n    steps:\n      - name: Run integration tests\n        run: pytest -m integration\n\n  security-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run security tests\n        run: pytest -m security\n\n  performance-tests:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    steps:\n      - name: Run performance tests\n        run: pytest -m performance\n</code></pre>"},{"location":"review/TESTING_STRATEGY/#conclusion","title":"Conclusion","text":"<p>The current testing foundation is good but needs significant expansion for production readiness. Priority should be:</p> <ol> <li>Immediate: Add API endpoint and security tests</li> <li>Short-term: Implement integration and error handling tests</li> <li>Medium-term: Add performance and load testing</li> <li>Long-term: Comprehensive E2E and production validation testing</li> </ol> <p>Test Maturity Score: 6/10 (Good foundation, needs comprehensive expansion)</p>"}]}